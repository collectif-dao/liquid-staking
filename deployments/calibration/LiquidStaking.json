{
  "address": "0x19AAB7dD96E9EedF9E232fE56d1736f53205834a",
  "abi": [
    {
      "inputs": [],
      "name": "ActiveSlashing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "errorCode",
          "type": "int256"
        }
      ],
      "name": "ActorError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ActorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AllowanceUnderflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC4626Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC4626Underflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC4626ZeroShares",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailToCallActor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InactiveActor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "InvalidCodec",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidResponseLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "minerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Pledge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PledgeRepayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WFIL",
      "outputs": [
        {
          "internalType": "contract IWFIL",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsageRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wFIL",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialDeposit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_minerId",
          "type": "uint64"
        }
      ],
      "name": "pledge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayPledge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "restake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        }
      ],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFilAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFilPledged",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "unstakeAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "715747b106f662a0794fb6bd31843d93",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ActiveSlashing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"errorCode\",\"type\":\"int256\"}],\"name\":\"ActorError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ActorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllowanceUnderflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC4626Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC4626Underflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC4626ZeroShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailToCallActor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InactiveActor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"InvalidCodec\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidResponseLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"minerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Pledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PledgeRepayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WFIL\",\"outputs\":[{\"internalType\":\"contract IWFIL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsageRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wFIL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_minerId\",\"type\":\"uint64\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayPledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"restake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"}],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFilAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFilPledged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"unstakeAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"details\":\"Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,address,uint256)\":{\"details\":\"Contract initializer function.\",\"params\":{\"_initialDeposit\":\"Initial deposit to the pool to prevent the inflation attack\",\"_resolver\":\"Resolver contract address\",\"_wFIL\":\"WFIL token contract address\"}},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pledge(uint256,uint64)\":{\"params\":{\"_minerId\":\"Storage Provider Miner ID\",\"amount\":\"Amount of FIL to pledge from Liquid Staking Pool\"}},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"repayPledge(uint256)\":{\"params\":{\"amount\":\"Amount of pledge repayment\"}},\"restake(uint256,address)\":{\"params\":{\"assets\":\"Amount of assets to restake\",\"receiver\":\"f4 address to receive clFIL tokens\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalFees(uint64)\":{\"params\":{\"_ownerId\":\"Storage Provider owner ID\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"unstake(uint256,address)\":{\"details\":\"Please note that unstake amount has to be clFIL shares (not FIL assets)\",\"params\":{\"owner\":\"Receiver of FIL assets\",\"shares\":\"Total clFIL amount to burn (unstake)\"}},\"unstakeAssets(uint256,address)\":{\"params\":{\"assets\":\"Total FIL amount to unstake\",\"owner\":\"Receiver of FIL assets\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"title\":\"LiquidStaking contract allows users to stake/unstake FIL to earn Filecoin mining rewards. Staked FIL is allocated to Storage Providers (SPs) that perform filecoin storage mining operations. This contract acts as a beneficiary address for each SP that uses FIL capital for pledges. While staking FIL user would get clFIL token in exchange, the token follows ERC4626 standard and it's price is recalculated once mining rewards are distributed to the liquid staking pool and once new FIL is deposited. Please note that LiquidStaking contract performs wrapping of the native FIL into Wrapped Filecoin (WFIL) token.\",\"version\":1},\"userdoc\":{\"errors\":{\"ActorError(int256)\":[{\"notice\":\"the called actor returned an error as part of its expected behaviour\"}],\"ActorNotFound()\":[{\"notice\":\"the actor is not found\"}],\"FailToCallActor()\":[{\"notice\":\"an error happened trying to call the actor\"}],\"InvalidCodec(uint64)\":[{\"notice\":\"the codec received is not valid\"}],\"InvalidResponseLength()\":[{\"notice\":\"the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\"}],\"NotEnoughBalance(uint256,uint256)\":[{\"notice\":\"the smart contract has no enough balance to transfer\"}]},\"events\":{\"Pledge(uint64,uint64,uint256)\":{\"notice\":\"Emitted when storage provider is withdrawing FIL for pledge\"},\"PledgeRepayment(uint256)\":{\"notice\":\"Emitted when storage provider's pledge is returned back to the LSP\"},\"Stake(address,address,uint256,uint256)\":{\"notice\":\"Emitted when user is staked wFIL to the Liquid Staking\"},\"Unstaked(address,address,uint256,uint256)\":{\"notice\":\"Emitted when user is unstaked wFIL from the Liquid Staking\"}},\"kind\":\"user\",\"methods\":{\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"getUsageRatio()\":{\"notice\":\"Returns pool usage ratio to determine what percentage of FIL is pledged compared to the total amount of FIL staked.\"},\"pledge(uint256,uint64)\":{\"notice\":\"Pledge FIL assets from liquid staking pool to miner pledge for one sector\"},\"repayPledge(uint256)\":{\"notice\":\"Triggered when pledge is repaid on the Reward Collector\"},\"restake(uint256,address)\":{\"notice\":\"Restakes `assets` for a specified `target` address\"},\"stake()\":{\"notice\":\"Stake FIL to the Liquid Staking pool and get clFIL in return native FIL is wrapped into WFIL and deposited into LiquidStakingmsg.value is the amount of FIL to stake\"},\"totalAssets()\":{\"notice\":\"Returns total amount of assets backing clFIL, that includes buffered capital in the pool and pledged capital to the SPs.\"},\"totalFees(uint64)\":{\"notice\":\"Returns total amount of fees held by LSP for a specific SP with `_ownerId`\"},\"totalFilAvailable()\":{\"notice\":\"Returns the amount of WFIL available on the liquid staking contract\"},\"totalFilPledged()\":{\"notice\":\"The current total amount of FIL that is allocated to SPs.\"},\"unstake(uint256,address)\":{\"notice\":\"Unstake FIL from the Liquid Staking pool and burn clFIL tokens\"},\"unstakeAssets(uint256,address)\":{\"notice\":\"Unstake FIL from the Liquid Staking pool and burn clFIL tokens\"},\"version()\":{\"notice\":\"Returns the version of clFIL token contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidStaking.sol\":\"LiquidStaking\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363838313731363032323733\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"contracts/ClFIL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IWFIL} from \\\"./libraries/tokens/IWFIL.sol\\\";\\nimport {Initializable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport {ERC4626Upgradeable, IERC20Upgradeable, MathUpgradeable} from \\\"./libraries/tokens/ERC4626Upgradeable.sol\\\";\\n\\n/**\\n * @title clFIL token contract is the main wrapper over staked FIL in the liquid staking system\\n *\\n * @notice The clFIL token vault works with wrapped version of Filecoin (FIL)\\n * as it's an ultimate requirement of the ERC4626 standard.\\n */\\nabstract contract ClFILToken is Initializable, ERC4626Upgradeable {\\n\\tIWFIL public WFIL; // WFIL implementation\\n\\n\\t/**\\n\\t * @dev Contract initializer function.\\n\\t * @param _wFIL WFIL token implementation\\n\\t */\\n\\tfunction __ClFILToken_init(address _wFIL) internal onlyInitializing {\\n\\t\\t__ERC20_init(\\\"Collectif Staked FIL\\\", \\\"clFIL\\\");\\n\\t\\t__ERC4626_init(IERC20Upgradeable(_wFIL));\\n\\t\\tWFIL = IWFIL(_wFIL);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns total amount of assets backing clFIL, that includes\\n\\t * buffered capital in the pool and pledged capital to the SPs.\\n\\t */\\n\\tfunction totalAssets() public view virtual override returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x92276c41275a7e611b61224d24596f3e1a08572c25bf8c0d2705ed33de0b6942\",\"license\":\"MIT\"},\"contracts/LiquidStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {ClFILToken, MathUpgradeable} from \\\"./ClFIL.sol\\\";\\nimport {Initializable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {SafeTransferLib} from \\\"./libraries/SafeTransferLib.sol\\\";\\nimport {CommonTypes} from \\\"lib/filecoin-solidity/contracts/v0.8/types/CommonTypes.sol\\\";\\nimport {FilAddresses} from \\\"lib/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol\\\";\\nimport {FilAddress} from \\\"lib/fevmate/contracts/utils/FilAddress.sol\\\";\\nimport {SendAPI} from \\\"lib/filecoin-solidity/contracts/v0.8/SendAPI.sol\\\";\\n\\nimport {ILiquidStaking} from \\\"./interfaces/ILiquidStaking.sol\\\";\\nimport {ILiquidStakingControllerClient as IStakingControllerClient} from \\\"./interfaces/ILiquidStakingControllerClient.sol\\\";\\nimport {IStorageProviderCollateralClient as ICollateralClient} from \\\"./interfaces/IStorageProviderCollateralClient.sol\\\";\\nimport {IStorageProviderRegistryClient as IRegistryClient} from \\\"./interfaces/IStorageProviderRegistryClient.sol\\\";\\nimport {IResolverClient} from \\\"./interfaces/IResolverClient.sol\\\";\\n\\n/**\\n * @title LiquidStaking contract allows users to stake/unstake FIL to earn\\n * Filecoin mining rewards. Staked FIL is allocated to Storage Providers (SPs) that\\n * perform filecoin storage mining operations. This contract acts as a beneficiary address\\n * for each SP that uses FIL capital for pledges.\\n *\\n * While staking FIL user would get clFIL token in exchange, the token follows ERC4626\\n * standard and it's price is recalculated once mining rewards are distributed to the\\n * liquid staking pool and once new FIL is deposited. Please note that LiquidStaking contract\\n * performs wrapping of the native FIL into Wrapped Filecoin (WFIL) token.\\n */\\ncontract LiquidStaking is\\n\\tILiquidStaking,\\n\\tInitializable,\\n\\tClFILToken,\\n\\tReentrancyGuardUpgradeable,\\n\\tAccessControlUpgradeable,\\n\\tUUPSUpgradeable\\n{\\n\\tusing SafeTransferLib for *;\\n\\tusing FilAddress for address;\\n\\n\\terror InvalidAccess();\\n\\terror ERC4626ZeroShares();\\n\\terror InactiveActor();\\n\\terror ActiveSlashing();\\n\\terror InsufficientFunds();\\n\\terror InvalidOwner();\\n\\n\\tuint256 private constant BASIS_POINTS = 10000;\\n\\n\\t/// @notice The current total amount of FIL that is allocated to SPs.\\n\\tuint256 public totalFilPledged;\\n\\n\\tIResolverClient internal resolver;\\n\\n\\tbytes32 private constant LIQUID_STAKING_ADMIN = keccak256(\\\"LIQUID_STAKING_ADMIN\\\");\\n\\tbytes32 private constant FEE_DISTRIBUTOR = keccak256(\\\"FEE_DISTRIBUTOR\\\");\\n\\n\\tmodifier onlyAdmin() {\\n\\t\\tif (!hasRole(LIQUID_STAKING_ADMIN, msg.sender)) revert InvalidAccess();\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Contract initializer function.\\n\\t * @param _wFIL WFIL token contract address\\n\\t * @param _resolver Resolver contract address\\n\\t * @param _initialDeposit Initial deposit to the pool to prevent the inflation attack\\n\\t */\\n\\tfunction initialize(address _wFIL, address _resolver, uint256 _initialDeposit) public initializer {\\n\\t\\t__AccessControl_init();\\n\\t\\t__ReentrancyGuard_init();\\n\\t\\t__ClFILToken_init(_wFIL);\\n\\t\\t__UUPSUpgradeable_init();\\n\\n\\t\\tresolver = IResolverClient(_resolver);\\n\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\tgrantRole(LIQUID_STAKING_ADMIN, msg.sender);\\n\\t\\t_setRoleAdmin(LIQUID_STAKING_ADMIN, DEFAULT_ADMIN_ROLE);\\n\\t\\tgrantRole(FEE_DISTRIBUTOR, msg.sender);\\n\\t\\t_setRoleAdmin(FEE_DISTRIBUTOR, DEFAULT_ADMIN_ROLE);\\n\\n\\t\\tif (_initialDeposit > 0) deposit(_initialDeposit, address(this));\\n\\t}\\n\\n\\treceive() external payable virtual {}\\n\\n\\tfallback() external payable virtual {}\\n\\n\\t/**\\n\\t * @notice Stake FIL to the Liquid Staking pool and get clFIL in return\\n\\t * native FIL is wrapped into WFIL and deposited into LiquidStaking\\n\\t *\\n\\t * @notice msg.value is the amount of FIL to stake\\n\\t */\\n\\tfunction stake() external payable nonReentrant returns (uint256 shares) {\\n\\t\\tuint256 assets = msg.value;\\n\\t\\taddress receiver = msg.sender.normalize();\\n\\n\\t\\tif (assets > maxDeposit(receiver)) revert ERC4626Overflow();\\n\\t\\tshares = previewDeposit(assets);\\n\\n\\t\\tif (shares == 0) revert ERC4626ZeroShares();\\n\\n\\t\\tWFIL.deposit{value: assets}();\\n\\n\\t\\t_mint(receiver, shares);\\n\\n\\t\\temit Deposit(_msgSender(), receiver, assets, shares);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unstake FIL from the Liquid Staking pool and burn clFIL tokens\\n\\t * @param shares Total clFIL amount to burn (unstake)\\n\\t * @param owner Original owner of clFIL tokens\\n\\t * @param owner Receiver of FIL assets\\n\\t * @dev Please note that unstake amount has to be clFIL shares (not FIL assets)\\n\\t */\\n\\tfunction unstake(uint256 shares, address owner) external nonReentrant returns (uint256 assets) {\\n\\t\\tif (shares > maxRedeem(owner)) revert ERC4626Overflow();\\n\\n\\t\\taddress receiver = msg.sender.normalize();\\n\\t\\towner = owner.normalize();\\n\\n\\t\\tassets = previewRedeem(shares);\\n\\n\\t\\tif (receiver != owner) {\\n\\t\\t\\t_spendAllowance(owner, receiver, shares);\\n\\t\\t}\\n\\n\\t\\t_burn(owner, shares);\\n\\n\\t\\temit Unstaked(msg.sender, owner, assets, shares);\\n\\n\\t\\t_unwrapWFIL(receiver, assets);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unstake FIL from the Liquid Staking pool and burn clFIL tokens\\n\\t * @param assets Total FIL amount to unstake\\n\\t * @param owner Original owner of clFIL tokens\\n\\t * @param owner Receiver of FIL assets\\n\\t */\\n\\tfunction unstakeAssets(uint256 assets, address owner) external nonReentrant returns (uint256 shares) {\\n\\t\\tif (assets > maxWithdraw(owner)) revert ERC4626Overflow();\\n\\n\\t\\taddress receiver = msg.sender.normalize();\\n\\t\\towner = owner.normalize();\\n\\n\\t\\tshares = previewWithdraw(assets);\\n\\t\\tif (receiver != owner) {\\n\\t\\t\\t_spendAllowance(owner, receiver, shares);\\n\\t\\t}\\n\\n\\t\\t_burn(owner, shares);\\n\\n\\t\\temit Unstaked(receiver, owner, assets, shares);\\n\\n\\t\\t_unwrapWFIL(receiver, assets);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Pledge FIL assets from liquid staking pool to miner pledge for one sector\\n\\t * @param amount Amount of FIL to pledge from Liquid Staking Pool\\n\\t * @param _minerId Storage Provider Miner ID\\n\\t */\\n\\tfunction pledge(uint256 amount, uint64 _minerId) external virtual nonReentrant {\\n\\t\\tif (amount > totalFilAvailable()) revert InvalidParams();\\n\\n\\t\\taddress ownerAddr = msg.sender.normalize();\\n\\t\\t(bool isID, uint64 ownerId) = ownerAddr.getActorID();\\n\\t\\tif (!isID) revert InactiveActor();\\n\\n\\t\\tif (!IRegistryClient(resolver.getRegistry()).isActualOwner(ownerId, _minerId)) revert InvalidOwner();\\n\\n\\t\\tICollateralClient collateral = ICollateralClient(resolver.getCollateral());\\n\\t\\tif (collateral.activeSlashings(ownerId)) revert ActiveSlashing();\\n\\n\\t\\tcollateral.lock(ownerId, _minerId, amount);\\n\\n\\t\\temit Pledge(ownerId, _minerId, amount);\\n\\n\\t\\tWFIL.withdraw(amount);\\n\\n\\t\\ttotalFilPledged += amount;\\n\\n\\t\\tSendAPI.send(CommonTypes.FilActorId.wrap(_minerId), amount); // send FIL to the miner actor\\n\\t}\\n\\n\\t/**\\n\\t * @notice Restakes `assets` for a specified `target` address\\n\\t * @param assets Amount of assets to restake\\n\\t * @param receiver f4 address to receive clFIL tokens\\n\\t */\\n\\tfunction restake(uint256 assets, address receiver) external returns (uint256 shares) {\\n\\t\\tif (msg.sender != resolver.getRewardCollector()) revert InvalidAccess();\\n\\t\\tif (assets > maxDeposit(receiver)) revert ERC4626Overflow();\\n\\t\\tshares = previewDeposit(assets);\\n\\t\\tif (shares == 0) revert ERC4626ZeroShares();\\n\\n\\t\\t_mint(receiver, shares);\\n\\n\\t\\temit Deposit(receiver, receiver, assets, shares);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Triggered when pledge is repaid on the Reward Collector\\n\\t * @param amount Amount of pledge repayment\\n\\t */\\n\\tfunction repayPledge(uint256 amount) external {\\n\\t\\tif (msg.sender != resolver.getRewardCollector()) revert InvalidAccess();\\n\\n\\t\\ttotalFilPledged -= amount;\\n\\n\\t\\temit PledgeRepayment(amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns total amount of assets backing clFIL, that includes\\n\\t * buffered capital in the pool and pledged capital to the SPs.\\n\\t */\\n\\tfunction totalAssets() public view virtual override returns (uint256) {\\n\\t\\treturn totalFilAvailable() + totalFilPledged;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns total amount of fees held by LSP for a specific SP with `_ownerId`\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t */\\n\\tfunction totalFees(uint64 _ownerId) external view virtual override returns (uint256) {\\n\\t\\treturn IStakingControllerClient(resolver.getLiquidStakingController()).totalFees(_ownerId, address(this));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns pool usage ratio to determine what percentage of FIL\\n\\t * is pledged compared to the total amount of FIL staked.\\n\\t */\\n\\tfunction getUsageRatio() external view virtual returns (uint256) {\\n\\t\\treturn (totalFilPledged * BASIS_POINTS) / (totalFilAvailable() + totalFilPledged);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the amount of WFIL available on the liquid staking contract\\n\\t */\\n\\tfunction totalFilAvailable() public view returns (uint256) {\\n\\t\\treturn WFIL.balanceOf(address(this));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unwraps `_amount` of WFIL into FIL and transfers it to the `_recipient` address\\n\\t * @param _recipient WFIL recipient address\\n\\t */\\n\\tfunction _unwrapWFIL(address _recipient, uint256 _amount) internal {\\n\\t\\tuint256 balanceWETH9 = WFIL.balanceOf(address(this));\\n\\t\\tif (balanceWETH9 < _amount) revert InsufficientFunds();\\n\\n\\t\\tif (balanceWETH9 > 0) {\\n\\t\\t\\tWFIL.withdraw(_amount);\\n\\t\\t\\t_recipient.safeTransferETH(_amount);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice UUPS Upgradeable function to update the liquid staking pool implementation\\n\\t * @dev Only triggered by contract admin\\n\\t */\\n\\tfunction _authorizeUpgrade(address newImplementation) internal override onlyAdmin {}\\n\\n\\t/**\\n\\t * @notice Returns the version of clFIL token contract\\n\\t */\\n\\tfunction version() external pure virtual returns (string memory) {\\n\\t\\treturn \\\"v1\\\";\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the implementation contract\\n\\t */\\n\\tfunction getImplementation() external view returns (address) {\\n\\t\\treturn _getImplementation();\\n\\t}\\n\\n\\t/** @dev See {IERC4626-maxDeposit}. */\\n\\tfunction maxDeposit(address) public view virtual override returns (uint256) {\\n\\t\\tuint256 liquidityCap = IStakingControllerClient(resolver.getLiquidStakingController()).liquidityCap();\\n\\n\\t\\tif (liquidityCap > 0) {\\n\\t\\t\\treturn liquidityCap - totalFilAvailable();\\n\\t\\t}\\n\\n\\t\\treturn type(uint256).max;\\n\\t}\\n\\n\\t/** @dev See {IERC4626-maxMint}. */\\n\\tfunction maxMint(address) public view virtual override returns (uint256) {\\n\\t\\tuint256 liquidityCap = IStakingControllerClient(resolver.getLiquidStakingController()).liquidityCap();\\n\\n\\t\\tif (liquidityCap != 0) {\\n\\t\\t\\treturn convertToShares(liquidityCap - totalFilAvailable());\\n\\t\\t}\\n\\n\\t\\treturn type(uint256).max;\\n\\t}\\n\\n\\t/** @dev See {IERC4626-maxWithdraw}. */\\n\\tfunction maxWithdraw(address owner) public view virtual override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tIStakingControllerClient(resolver.getLiquidStakingController()).withdrawalsActivated()\\n\\t\\t\\t\\t? _convertToAssets(balanceOf(owner), MathUpgradeable.Rounding.Down)\\n\\t\\t\\t\\t: 0;\\n\\t}\\n\\n\\t/** @dev See {IERC4626-maxRedeem}. */\\n\\tfunction maxRedeem(address owner) public view virtual override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tIStakingControllerClient(resolver.getLiquidStakingController()).withdrawalsActivated()\\n\\t\\t\\t\\t? balanceOf(owner)\\n\\t\\t\\t\\t: 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xb4641e2b9d9d0c50f0e49b7b50d1a8b729ae646e24244ed4c6e12a69cffcf559\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ILiquidStaking {\\n\\t/**\\n\\t * @notice Emitted when user is staked wFIL to the Liquid Staking\\n\\t * @param user User's address\\n\\t * @param owner Owner of clFIL tokens\\n\\t * @param assets Total wFIL amount staked\\n\\t * @param shares Total clFIL amount staked\\n\\t */\\n\\tevent Stake(address indexed user, address indexed owner, uint256 assets, uint256 shares);\\n\\n\\t/**\\n\\t * @notice Emitted when user is unstaked wFIL from the Liquid Staking\\n\\t * @param user User's address\\n\\t * @param owner Original owner of clFIL tokens\\n\\t * @param assets Total wFIL amount unstaked\\n\\t * @param shares Total clFIL amount unstaked\\n\\t */\\n\\tevent Unstaked(address indexed user, address indexed owner, uint256 assets, uint256 shares);\\n\\n\\t/**\\n\\t * @notice Emitted when storage provider is withdrawing FIL for pledge\\n\\t * @param ownerId Storage Provider's owner ID\\n\\t * @param minerId Storage Provider's miner actor ID\\n\\t * @param amount Total FIL amount to pledge\\n\\t */\\n\\tevent Pledge(uint64 ownerId, uint64 minerId, uint256 amount);\\n\\n\\t/**\\n\\t * @notice Emitted when storage provider's pledge is returned back to the LSP\\n\\t * @param amount Total FIL amount of repayment\\n\\t */\\n\\tevent PledgeRepayment(uint256 amount);\\n\\n\\t/**\\n\\t * @notice Stake FIL to the Liquid Staking pool and get clFIL in return\\n\\t * native FIL is wrapped into WFIL and deposited into LiquidStaking\\n\\t *\\n\\t * @notice msg.value is the amount of FIL to stake\\n\\t */\\n\\tfunction stake() external payable returns (uint256 shares);\\n\\n\\t/**\\n\\t * @notice Unstake wFIL from the Liquid Staking pool and burn clFIL tokens\\n\\t * @param shares Total clFIL amount to burn (unstake)\\n\\t * @param owner Original owner of clFIL tokens\\n\\t * @dev Please note that unstake amount has to be clFIL shares (not wFIL assets)\\n\\t */\\n\\tfunction unstake(uint256 shares, address owner) external returns (uint256 assets);\\n\\n\\t/**\\n\\t * @notice Unstake wFIL from the Liquid Staking pool and burn clFIL tokens\\n\\t * @param assets Total FIL amount to unstake\\n\\t * @param owner Original owner of clFIL tokens\\n\\t */\\n\\tfunction unstakeAssets(uint256 assets, address owner) external returns (uint256 shares);\\n\\n\\t/**\\n\\t * @notice Pledge FIL assets from liquid staking pool to miner pledge for one sector\\n\\t * @param amount Amount of FIL to pledge from Liquid Staking Pool\\n\\t * @param _minerId Storage Provider Miner ID\\n\\t */\\n\\tfunction pledge(uint256 amount, uint64 _minerId) external;\\n\\n\\t/**\\n\\t * @notice Restakes `assets` for a specified `target` address\\n\\t * @param assets Amount of assets to restake\\n\\t * @param receiver f4 address to receive clFIL tokens\\n\\t */\\n\\tfunction restake(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n\\t/**\\n\\t * @notice Triggered when pledge is repaid on the Reward Collector\\n\\t * @param amount Amount of pledge repayment\\n\\t */\\n\\tfunction repayPledge(uint256 amount) external;\\n\\n\\t/**\\n\\t * @notice Returns pool usage ratio to determine what percentage of FIL\\n\\t * is pledged compared to the total amount of FIL staked.\\n\\t */\\n\\tfunction getUsageRatio() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Returns the amount of WFIL available on the liquid staking contract\\n\\t */\\n\\tfunction totalFilAvailable() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Returns total amount of fees held by LSP for a specific SP with `_ownerId`\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t */\\n\\tfunction totalFees(uint64 _ownerId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3bcd6b74dcedaf11848e0bae1d316b98409afb0dfbd19fa6ff922e96d2314db4\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidStakingControllerClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ILiquidStakingControllerClient {\\n\\t/**\\n\\t * @dev Updates profit sharing requirements for SP with `_ownerId` by `_profitShare` percentage\\n\\t * @notice Only triggered by Liquid Staking admin or registry contract while registering SP\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _profitShare Percentage of profit sharing\\n\\t * @param _pool Address of liquid staking pool\\n\\t */\\n\\tfunction updateProfitShare(uint64 _ownerId, uint256 _profitShare, address _pool) external;\\n\\n\\t/**\\n\\t * @notice Returns total amount of fees held by LSP for a specific SP with `_ownerId`\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _pool Liquid Staking contract address\\n\\t */\\n\\tfunction totalFees(uint64 _ownerId, address _pool) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Returns profit sharing ratio on Liquid Staking for SP with `_ownerId` at `_pool`\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _pool Liquid Staking contract address\\n\\t */\\n\\tfunction getProfitShares(uint64 _ownerId, address _pool) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Returns the admin fees on Liquid Staking\\n\\t */\\n\\tfunction adminFee() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Returns the base profit sharing ratio on Liquid Staking\\n\\t */\\n\\tfunction baseProfitShare() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Returns the liquidity cap for Liquid Staking\\n\\t */\\n\\tfunction liquidityCap() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Returns wether witdrawals are activated\\n\\t */\\n\\tfunction withdrawalsActivated() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x17a4619bb191f7ffb178734ca8eab0157860bc27f5ea163c45b18605ccbf9535\",\"license\":\"MIT\"},\"contracts/interfaces/IResolverClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IResolverClient {\\n\\t/**\\n\\t * @notice Returns an address of a Storage Provider Registry contract\\n\\t */\\n\\tfunction getRegistry() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns an address of a Storage Provider Collateral contract\\n\\t */\\n\\tfunction getCollateral() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns an address of a Liquid Staking contract\\n\\t */\\n\\tfunction getLiquidStaking() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns an address of a Liquid Staking Controller contract\\n\\t */\\n\\tfunction getLiquidStakingController() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns an address of a Reward Collector contract\\n\\t */\\n\\tfunction getRewardCollector() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns a Protocol Rewards address\\n\\t */\\n\\tfunction getProtocolRewards() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1d79881a8d747da13f8b2f0d01e1b585530d1da35bbb24eea6093e6081559e20\",\"license\":\"MIT\"},\"contracts/interfaces/IStorageProviderCollateralClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IStorageProviderCollateralClient {\\n\\t/**\\n\\t * @dev Locks required collateral amount based on `_allocated` FIL to pledge\\n\\t * @notice Increases the total amount of locked collateral for storage provider\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _minerId Storage provider miner ID\\n\\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\\n\\t */\\n\\tfunction lock(uint64 _ownerId, uint64 _minerId, uint256 _allocated) external;\\n\\n\\t/**\\n\\t * @dev Fits collateral amounts based on SP pledge usage, distributed rewards and pledge paybacks\\n\\t * @notice Rebalances the total locked and available collateral amounts\\n\\t * @param _ownerId Storage provider owner ID\\n\\t */\\n\\tfunction fit(uint64 _ownerId) external;\\n\\n\\t/**\\n\\t * @dev Updates collateral requirements for SP with `_ownerId` by `requirements` percentage\\n\\t * @notice Only triggered by Collateral admin or registry contract while registering SP\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param requirements Percentage of collateral requirements\\n\\t */\\n\\tfunction updateCollateralRequirements(uint64 _ownerId, uint256 requirements) external;\\n\\n\\t/**\\n\\t * @notice Return a slashing flag for a storage provider\\n\\t */\\n\\tfunction activeSlashings(uint64 ownerId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4e63217530fde4e6d512e0583c70efe26e092bcb9d5104cc7d6aecc668995ae2\",\"license\":\"MIT\"},\"contracts/interfaces/IStorageProviderRegistryClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IStorageProviderRegistryClient {\\n\\t/**\\n\\t * @notice Return Storage Provider information with `_ownerId`\\n\\t */\\n\\tfunction getStorageProvider(uint64 _ownerId) external view returns (bool, address, uint64, int64);\\n\\n\\t/**\\n\\t * @notice Increase collected rewards by Storage Provider\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _accuredRewards Withdrawn rewards from SP's miner actor\\n\\t */\\n\\tfunction increaseRewards(uint64 _ownerId, uint256 _accuredRewards) external;\\n\\n\\t/**\\n\\t * @notice Increase repaid pledge by Storage Provider\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _repaidPledge Withdrawn initial pledge after sector termination\\n\\t */\\n\\tfunction increasePledgeRepayment(uint64 _ownerId, uint256 _repaidPledge) external;\\n\\n\\t/**\\n\\t * @notice Increase used allocation for Storage Provider\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\\n\\t * @param _timestamp Transaction timestamp\\n\\t */\\n\\tfunction increaseUsedAllocation(uint64 _ownerId, uint256 _allocated, uint256 _timestamp) external;\\n\\n\\t/**\\n\\t * @notice Return a boolean flag of Storage Provider activity\\n\\t */\\n\\tfunction isActiveProvider(uint64 _ownerId) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Return a boolean flag if `_ownerId` has registered any miner ids\\n\\t */\\n\\tfunction isActiveOwner(uint64 _ownerId) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Return a boolean flag if `_ownerId` owns the specific `_minerId`\\n\\t */\\n\\tfunction isActualOwner(uint64 _ownerId, uint64 _minerId) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Return a boolean flag whether `_pool` is active or not\\n\\t */\\n\\tfunction isActivePool(address _pool) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Return a restaking information for a storage provider\\n\\t */\\n\\tfunction restakings(uint64 ownerId) external view returns (uint256, address);\\n\\n\\t/**\\n\\t * @notice Return allocation information for a storage provider\\n\\t */\\n\\tfunction allocations(uint64 ownerId) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n\\n\\tfunction getAllocations(uint64 _ownerId) external returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @notice Return a repayment amount for Storage Provider\\n\\t */\\n\\tfunction getRepayment(uint64 ownerId) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Return a repayment amount for Storage Provider\\n\\t */\\n\\tfunction storageProviders(uint64 ownerId) external view returns (bool, bool, address, uint64, int64);\\n}\\n\",\"keccak256\":\"0xcf841470d3b2ea3a3086a90fd715b66f7988d75d59b6d67f8cfc566c8c4af23f\",\"license\":\"MIT\"},\"contracts/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * Slightly modified Solmate SafeTransferLib library for safe transfers of tokens\\n * original ERC20 token has been replaced by Filecoin-safe ERC20. Updated token version performs\\n * address normalization and allows to send tokens to f0/f1/f3/f4 addresses. In FVM no\\n * tokens could be sent to the native actors.\\n */\\n\\nimport {ERC20Upgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n\\t/*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction safeTransferETH(address to, uint256 amount) internal {\\n\\t\\tbool success;\\n\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Transfer the ETH and store if it succeeded or not.\\n\\t\\t\\tsuccess := call(gas(), to, amount, 0, 0, 0, 0)\\n\\t\\t}\\n\\n\\t\\trequire(success, \\\"ETH_TRANSFER_FAILED\\\");\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction safeTransferFrom(ERC20Upgradeable token, address from, address to, uint256 amount) internal {\\n\\t\\tbool success;\\n\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Get a pointer to some free memory.\\n\\t\\t\\tlet freeMemoryPointer := mload(0x40)\\n\\n\\t\\t\\t// Write the abi-encoded calldata into memory, beginning with the function selector.\\n\\t\\t\\tmstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n\\t\\t\\tmstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n\\t\\t\\tmstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n\\t\\t\\tmstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n\\t\\t\\tsuccess := and(\\n\\t\\t\\t\\t// Set success to whether the call reverted, if not we check it either\\n\\t\\t\\t\\t// returned exactly 1 (can't just be non-zero data), or had no return data.\\n\\t\\t\\t\\tor(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n\\t\\t\\t\\t// We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n\\t\\t\\t\\t// We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n\\t\\t\\t\\t// Counterintuitively, this call must be positioned second to the or() call in the\\n\\t\\t\\t\\t// surrounding and() call or else returndatasize() will be zero during the computation.\\n\\t\\t\\t\\tcall(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n\\t\\t\\t)\\n\\t\\t}\\n\\n\\t\\trequire(success, \\\"TRANSFER_FROM_FAILED\\\");\\n\\t}\\n\\n\\tfunction safeTransfer(ERC20Upgradeable token, address to, uint256 amount) internal {\\n\\t\\tbool success;\\n\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Get a pointer to some free memory.\\n\\t\\t\\tlet freeMemoryPointer := mload(0x40)\\n\\n\\t\\t\\t// Write the abi-encoded calldata into memory, beginning with the function selector.\\n\\t\\t\\tmstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n\\t\\t\\tmstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n\\t\\t\\tmstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n\\t\\t\\tsuccess := and(\\n\\t\\t\\t\\t// Set success to whether the call reverted, if not we check it either\\n\\t\\t\\t\\t// returned exactly 1 (can't just be non-zero data), or had no return data.\\n\\t\\t\\t\\tor(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n\\t\\t\\t\\t// We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n\\t\\t\\t\\t// We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n\\t\\t\\t\\t// Counterintuitively, this call must be positioned second to the or() call in the\\n\\t\\t\\t\\t// surrounding and() call or else returndatasize() will be zero during the computation.\\n\\t\\t\\t\\tcall(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n\\t\\t\\t)\\n\\t\\t}\\n\\n\\t\\trequire(success, \\\"TRANSFER_FAILED\\\");\\n\\t}\\n\\n\\tfunction safeApprove(ERC20Upgradeable token, address to, uint256 amount) internal {\\n\\t\\tbool success;\\n\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Get a pointer to some free memory.\\n\\t\\t\\tlet freeMemoryPointer := mload(0x40)\\n\\n\\t\\t\\t// Write the abi-encoded calldata into memory, beginning with the function selector.\\n\\t\\t\\tmstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n\\t\\t\\tmstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n\\t\\t\\tmstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n\\t\\t\\tsuccess := and(\\n\\t\\t\\t\\t// Set success to whether the call reverted, if not we check it either\\n\\t\\t\\t\\t// returned exactly 1 (can't just be non-zero data), or had no return data.\\n\\t\\t\\t\\tor(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n\\t\\t\\t\\t// We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n\\t\\t\\t\\t// We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n\\t\\t\\t\\t// Counterintuitively, this call must be positioned second to the or() call in the\\n\\t\\t\\t\\t// surrounding and() call or else returndatasize() will be zero during the computation.\\n\\t\\t\\t\\tcall(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n\\t\\t\\t)\\n\\t\\t}\\n\\n\\t\\trequire(success, \\\"APPROVE_FAILED\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xdc98c057cc45028ba9a18071f61f205118f219295ffe9ecfe927cdbb928b2c16\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/tokens/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Upgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC20MetadataUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport {Initializable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport {ContextUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\\\";\\nimport {FilAddress} from \\\"lib/fevmate/contracts/utils/FilAddress.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n\\tusing FilAddress for address;\\n\\n\\tmapping(address => uint256) private _balances;\\n\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\n\\tuint256 private _totalSupply;\\n\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\terror ZeroAddress();\\n\\terror InvalidBalance();\\n\\terror InsufficientAllowance();\\n\\n\\t/**\\n\\t * @dev Sets the values for {name} and {symbol}.\\n\\t *\\n\\t * All two of these values are immutable: they can only be set once during\\n\\t * construction.\\n\\t */\\n\\tfunction __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n\\t\\t__ERC20_init_unchained(name_, symbol_);\\n\\t}\\n\\n\\tfunction __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the name of the token.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the symbol of the token, usually a shorter version of the\\n\\t * name.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the number of decimals used to get its user representation.\\n\\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n\\t *\\n\\t * Tokens usually opt for a value of 18, imitating the relationship between\\n\\t * Ether and Wei. This is the default value returned by this function, unless\\n\\t * it's overridden.\\n\\t *\\n\\t * NOTE: This information is only used for _display_ purposes: it in\\n\\t * no way affects any of the arithmetic of the contract, including\\n\\t * {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t */\\n\\tfunction decimals() public view virtual override returns (uint8) {\\n\\t\\treturn 18;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address account) public view virtual override returns (uint256) {\\n\\t\\treturn _balances[account.normalize()];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transfer}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - the caller must have a balance of at least `amount`.\\n\\t */\\n\\tfunction transfer(address to, uint256 amount) public virtual override returns (bool) {\\n\\t\\taddress owner = _msgSender();\\n\\t\\towner = owner.normalize();\\n\\t\\tto = to.normalize();\\n\\n\\t\\t_transfer(owner, to, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-allowance}.\\n\\t */\\n\\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\\n\\t\\treturn _allowances[owner.normalize()][spender.normalize()];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-approve}.\\n\\t *\\n\\t * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n\\t * `transferFrom`. This is semantically equivalent to an infinite approval.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\\n\\t\\taddress owner = _msgSender();\\n\\t\\towner = owner.normalize();\\n\\t\\tspender = spender.normalize();\\n\\n\\t\\t_approve(owner, spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transferFrom}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance. This is not\\n\\t * required by the EIP. See the note at the beginning of {ERC20}.\\n\\t *\\n\\t * NOTE: Does not update the allowance if the current allowance\\n\\t * is the maximum `uint256`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` and `to` cannot be the zero address.\\n\\t * - `from` must have a balance of at least `amount`.\\n\\t * - the caller must have allowance for ``from``'s tokens of at least\\n\\t * `amount`.\\n\\t */\\n\\tfunction transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n\\t\\taddress spender = _msgSender();\\n\\t\\tfrom = from.normalize();\\n\\t\\tto = to.normalize();\\n\\t\\tspender = spender.normalize();\\n\\n\\t\\t_spendAllowance(from, spender, amount);\\n\\t\\t_transfer(from, to, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically increases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n\\t\\taddress owner = _msgSender();\\n\\t\\towner = owner.normalize();\\n\\t\\tspender = spender.normalize();\\n\\n\\t\\t_approve(owner, spender, allowance(owner, spender) + addedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t * - `spender` must have allowance for the caller of at least\\n\\t * `subtractedValue`.\\n\\t */\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n\\t\\taddress owner = _msgSender();\\n\\t\\towner = owner.normalize();\\n\\t\\tspender = spender.normalize();\\n\\n\\t\\tuint256 currentAllowance = allowance(owner, spender);\\n\\t\\trequire(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_approve(owner, spender, currentAllowance - subtractedValue);\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Moves `amount` of tokens from `from` to `to`.\\n\\t *\\n\\t * This internal function is equivalent to {transfer}, and can be used to\\n\\t * e.g. implement automatic token fees, slashing mechanisms, etc.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `from` must have a balance of at least `amount`.\\n\\t */\\n\\tfunction _transfer(address from, address to, uint256 amount) internal virtual {\\n\\t\\tif (from == address(0)) revert ZeroAddress();\\n\\t\\tif (to == address(0)) revert ZeroAddress();\\n\\n\\t\\t_beforeTokenTransfer(from, to, amount);\\n\\n\\t\\tuint256 fromBalance = _balances[from];\\n\\t\\tif (fromBalance < amount) revert InvalidBalance();\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[from] = fromBalance - amount;\\n\\t\\t\\t// Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n\\t\\t\\t// decrementing then incrementing.\\n\\t\\t\\t_balances[to] += amount;\\n\\t\\t}\\n\\n\\t\\temit Transfer(from, to, amount);\\n\\n\\t\\t_afterTokenTransfer(from, to, amount);\\n\\t}\\n\\n\\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n\\t * the total supply.\\n\\t *\\n\\t * Emits a {Transfer} event with `from` set to the zero address.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `account` cannot be the zero address.\\n\\t */\\n\\tfunction _mint(address account, uint256 amount) internal virtual {\\n\\t\\tif (account == address(0)) revert ZeroAddress();\\n\\n\\t\\t_beforeTokenTransfer(address(0), account, amount);\\n\\n\\t\\t_totalSupply += amount;\\n\\t\\tunchecked {\\n\\t\\t\\t// Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n\\t\\t\\t_balances[account] += amount;\\n\\t\\t}\\n\\t\\temit Transfer(address(0), account, amount);\\n\\n\\t\\t_afterTokenTransfer(address(0), account, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `amount` tokens from `account`, reducing the\\n\\t * total supply.\\n\\t *\\n\\t * Emits a {Transfer} event with `to` set to the zero address.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `account` cannot be the zero address.\\n\\t * - `account` must have at least `amount` tokens.\\n\\t */\\n\\tfunction _burn(address account, uint256 amount) internal virtual {\\n\\t\\tif (account == address(0)) revert ZeroAddress();\\n\\n\\t\\t_beforeTokenTransfer(account, address(0), amount);\\n\\n\\t\\tuint256 accountBalance = _balances[account];\\n\\t\\tif (accountBalance < amount) revert InvalidBalance();\\n\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[account] = accountBalance - amount;\\n\\t\\t\\t// Overflow not possible: amount <= accountBalance <= totalSupply.\\n\\t\\t\\t_totalSupply -= amount;\\n\\t\\t}\\n\\n\\t\\temit Transfer(account, address(0), amount);\\n\\n\\t\\t_afterTokenTransfer(account, address(0), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n\\t *\\n\\t * This internal function is equivalent to `approve`, and can be used to\\n\\t * e.g. set automatic allowances for certain subsystems, etc.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `owner` cannot be the zero address.\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\\n\\t\\tif (owner == address(0)) revert ZeroAddress();\\n\\t\\tif (spender == address(0)) revert ZeroAddress();\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n\\t *\\n\\t * Does not update the allowance amount in case of infinite allowance.\\n\\t * Revert if not enough allowance is available.\\n\\t *\\n\\t * Might emit an {Approval} event.\\n\\t */\\n\\tfunction _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n\\t\\tuint256 currentAllowance = allowance(owner, spender);\\n\\t\\tif (currentAllowance != type(uint256).max) {\\n\\t\\t\\tif (currentAllowance < amount) revert InsufficientAllowance();\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\t_approve(owner, spender, currentAllowance - amount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any transfer of tokens. This includes\\n\\t * minting and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n\\t * will be transferred to `to`.\\n\\t * - when `from` is zero, `amount` tokens will be minted for `to`.\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n\\t/**\\n\\t * @dev Hook that is called after any transfer of tokens. This includes\\n\\t * minting and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n\\t * has been transferred to `to`.\\n\\t * - when `from` is zero, `amount` tokens have been minted for `to`.\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n\\t/**\\n\\t * @dev This empty reserved space is put in place to allow future versions to add new\\n\\t * variables without shifting down storage in the inheritance chain.\\n\\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\tuint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x06e0f8e047d46256b61263226b00f7c497a7ca84e6632a05d8839b572a1b48be\",\"license\":\"MIT\"},\"contracts/libraries/tokens/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport {IERC4626Upgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC4626Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport {MathUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\\\";\\nimport {FilAddress} from \\\"lib/fevmate/contracts/utils/FilAddress.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626Upgradeable is Initializable, ERC20Upgradeable, IERC4626Upgradeable {\\n\\tusing MathUpgradeable for uint256;\\n\\tusing FilAddress for address;\\n\\n\\tIERC20Upgradeable private _asset;\\n\\tuint8 private _underlyingDecimals;\\n\\n\\terror ERC4626Overflow();\\n\\terror ERC4626Underflow();\\n\\terror AllowanceUnderflow();\\n\\terror InvalidParams();\\n\\n\\t/**\\n\\t * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n\\t */\\n\\tfunction __ERC4626_init(IERC20Upgradeable asset_) internal onlyInitializing {\\n\\t\\t__ERC4626_init_unchained(asset_);\\n\\t}\\n\\n\\tfunction __ERC4626_init_unchained(IERC20Upgradeable asset_) internal onlyInitializing {\\n\\t\\t(bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n\\t\\t_underlyingDecimals = success ? assetDecimals : 18;\\n\\t\\t_asset = asset_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n\\t */\\n\\tfunction _tryGetAssetDecimals(IERC20Upgradeable asset_) private view returns (bool, uint8) {\\n\\t\\t(bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n\\t\\t\\tabi.encodeWithSelector(IERC20MetadataUpgradeable.decimals.selector)\\n\\t\\t);\\n\\t\\tif (success && encodedDecimals.length >= 32) {\\n\\t\\t\\tuint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n\\t\\t\\tif (returnedDecimals <= type(uint8).max) {\\n\\t\\t\\t\\treturn (true, uint8(returnedDecimals));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (false, 0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n\\t * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n\\t * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n\\t *\\n\\t * See {IERC20Metadata-decimals}.\\n\\t */\\n\\tfunction decimals() public view virtual override(IERC20MetadataUpgradeable, ERC20Upgradeable) returns (uint8) {\\n\\t\\treturn _underlyingDecimals + _decimalsOffset();\\n\\t}\\n\\n\\t/** @dev See {IERC4626-asset}. */\\n\\tfunction asset() public view virtual override returns (address) {\\n\\t\\treturn address(_asset);\\n\\t}\\n\\n\\t/** @dev See {IERC4626-totalAssets}. */\\n\\tfunction totalAssets() public view virtual override returns (uint256) {\\n\\t\\treturn _asset.balanceOf(address(this));\\n\\t}\\n\\n\\t/** @dev See {IERC4626-convertToShares}. */\\n\\tfunction convertToShares(uint256 assets) public view virtual override returns (uint256) {\\n\\t\\treturn _convertToShares(assets, MathUpgradeable.Rounding.Down);\\n\\t}\\n\\n\\t/** @dev See {IERC4626-convertToAssets}. */\\n\\tfunction convertToAssets(uint256 shares) public view virtual override returns (uint256) {\\n\\t\\treturn _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n\\t}\\n\\n\\t/** @dev See {IERC4626-maxDeposit}. */\\n\\tfunction maxDeposit(address) public view virtual override returns (uint256) {\\n\\t\\treturn type(uint256).max;\\n\\t}\\n\\n\\t/** @dev See {IERC4626-maxMint}. */\\n\\tfunction maxMint(address) public view virtual override returns (uint256) {\\n\\t\\treturn type(uint256).max;\\n\\t}\\n\\n\\t/** @dev See {IERC4626-maxWithdraw}. */\\n\\tfunction maxWithdraw(address owner) public view virtual override returns (uint256) {\\n\\t\\treturn _convertToAssets(balanceOf(owner), MathUpgradeable.Rounding.Down);\\n\\t}\\n\\n\\t/** @dev See {IERC4626-maxRedeem}. */\\n\\tfunction maxRedeem(address owner) public view virtual override returns (uint256) {\\n\\t\\treturn balanceOf(owner);\\n\\t}\\n\\n\\t/** @dev See {IERC4626-previewDeposit}. */\\n\\tfunction previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n\\t\\treturn _convertToShares(assets, MathUpgradeable.Rounding.Down);\\n\\t}\\n\\n\\t/** @dev See {IERC4626-previewMint}. */\\n\\tfunction previewMint(uint256 shares) public view virtual override returns (uint256) {\\n\\t\\treturn _convertToAssets(shares, MathUpgradeable.Rounding.Up);\\n\\t}\\n\\n\\t/** @dev See {IERC4626-previewWithdraw}. */\\n\\tfunction previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n\\t\\treturn _convertToShares(assets, MathUpgradeable.Rounding.Up);\\n\\t}\\n\\n\\t/** @dev See {IERC4626-previewRedeem}. */\\n\\tfunction previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n\\t\\treturn _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n\\t}\\n\\n\\t/** @dev See {IERC4626-deposit}. */\\n\\tfunction deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n\\t\\treceiver = receiver.normalize();\\n\\t\\tif (assets > maxDeposit(receiver)) revert ERC4626Overflow();\\n\\n\\t\\tuint256 shares = previewDeposit(assets);\\n\\t\\tif (shares == 0) revert InvalidParams();\\n\\n\\t\\t_deposit(_msgSender(), receiver, assets, shares);\\n\\n\\t\\treturn shares;\\n\\t}\\n\\n\\t/** @dev See {IERC4626-mint}.\\n\\t *\\n\\t * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n\\t * In this case, the shares will be minted without requiring any assets to be deposited.\\n\\t */\\n\\tfunction mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n\\t\\treceiver = receiver.normalize();\\n\\t\\tif (shares > maxMint(receiver)) revert ERC4626Overflow();\\n\\n\\t\\tuint256 assets = previewMint(shares);\\n\\t\\tif (assets == 0) revert InvalidParams();\\n\\t\\t_deposit(_msgSender(), receiver, assets, shares);\\n\\n\\t\\treturn assets;\\n\\t}\\n\\n\\t/** @dev See {IERC4626-withdraw}. */\\n\\tfunction withdraw(uint256 assets, address receiver, address owner) public virtual override returns (uint256) {\\n\\t\\treceiver = receiver.normalize();\\n\\t\\towner = owner.normalize();\\n\\t\\tif (assets > maxWithdraw(owner)) revert ERC4626Overflow();\\n\\n\\t\\tuint256 shares = previewWithdraw(assets);\\n\\t\\t_withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n\\t\\treturn shares;\\n\\t}\\n\\n\\t/** @dev See {IERC4626-redeem}. */\\n\\tfunction redeem(uint256 shares, address receiver, address owner) public virtual override returns (uint256) {\\n\\t\\treceiver = receiver.normalize();\\n\\t\\towner = owner.normalize();\\n\\t\\tif (shares > maxRedeem(owner)) revert ERC4626Overflow();\\n\\n\\t\\tuint256 assets = previewRedeem(shares);\\n\\t\\t_withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n\\t\\treturn assets;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n\\t */\\n\\tfunction _convertToShares(\\n\\t\\tuint256 assets,\\n\\t\\tMathUpgradeable.Rounding rounding\\n\\t) internal view virtual returns (uint256) {\\n\\t\\treturn assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n\\t */\\n\\tfunction _convertToAssets(\\n\\t\\tuint256 shares,\\n\\t\\tMathUpgradeable.Rounding rounding\\n\\t) internal view virtual returns (uint256) {\\n\\t\\treturn shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Deposit/mint common workflow.\\n\\t */\\n\\tfunction _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n\\t\\tcaller = caller.normalize();\\n\\t\\t// If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n\\t\\t// `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n\\t\\t// calls the vault, which is assumed not malicious.\\n\\t\\t//\\n\\t\\t// Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n\\t\\t// assets are transferred and before the shares are minted, which is a valid state.\\n\\t\\t// slither-disable-next-line reentrancy-no-eth\\n\\t\\tSafeERC20Upgradeable.safeTransferFrom(_asset, caller, address(this), assets);\\n\\t\\t_mint(receiver, shares);\\n\\n\\t\\temit Deposit(caller, receiver, assets, shares);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraw/redeem common workflow.\\n\\t */\\n\\tfunction _withdraw(\\n\\t\\taddress caller,\\n\\t\\taddress receiver,\\n\\t\\taddress owner,\\n\\t\\tuint256 assets,\\n\\t\\tuint256 shares\\n\\t) internal virtual {\\n\\t\\tcaller = caller.normalize();\\n\\n\\t\\tif (caller != owner) {\\n\\t\\t\\t_spendAllowance(owner, caller, shares);\\n\\t\\t}\\n\\n\\t\\t// If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n\\t\\t// `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n\\t\\t// calls the vault, which is assumed not malicious.\\n\\t\\t//\\n\\t\\t// Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n\\t\\t// shares are burned and after the assets are transferred, which is a valid state.\\n\\t\\t_burn(owner, shares);\\n\\t\\tSafeERC20Upgradeable.safeTransfer(_asset, receiver, assets);\\n\\n\\t\\temit Withdraw(caller, receiver, owner, assets, shares);\\n\\t}\\n\\n\\tfunction _decimalsOffset() internal view virtual returns (uint8) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev This empty reserved space is put in place to allow future versions to add new\\n\\t * variables without shifting down storage in the inheritance chain.\\n\\t * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\tuint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa9335dabdf2221f535641ea4bcbedc05deb9c540e404b55751dc7da66f8cadf5\",\"license\":\"MIT\"},\"contracts/libraries/tokens/IWFIL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC20Upgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {WFIL} from \\\"lib/fevmate/contracts/token/WFIL.sol\\\";\\n\\ninterface IWFIL is IERC20Upgradeable {\\n\\t/**\\n\\t * @notice Deposit Fil into the contract, and mint WFIL 1:1.\\n\\t */\\n\\tfunction deposit() external payable;\\n\\n\\t/**\\n\\t * @notice Burns _amount WFIL from caller's balance, and transfers them\\n\\t * the unwrapped Fil 1:1.\\n\\t *\\n\\t * Note: The fund transfer used here is address.call{value: _amount}(\\\"\\\"),\\n\\t * which does NOT work with the FVM's builtin Multisig actor. This is\\n\\t * because, under the hood, address.call acts like a message to an actor's\\n\\t * InvokeEVM method. The Multisig actor does not implement this method.\\n\\t *\\n\\t * This is a known issue, but we've decided to keep the method as-is,\\n\\t * because it's likely that the Multisig actor is eventually upgraded to\\n\\t * support this method. Even though a Multisig actor cannot directly\\n\\t * withdraw, it is still possible for Multisigs to deposit, transfer,\\n\\t * etc WFIL. So, if your Multisig actor needs to withdraw, you can\\n\\t * transfer your WFIL to another contract, which can perform the\\n\\t * withdrawal for you.\\n\\t *\\n\\t * (Though Multisig actors are not supported, BLS/SECPK/EthAccounts\\n\\t * and EVM contracts can use this method normally)\\n\\t */\\n\\tfunction withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x41653085647d47d4909a304ac982d350b6fe20762db5b6574779ab6a06ad6bea\",\"license\":\"MIT\"},\"lib/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"lib/fevmate/contracts/access/OwnedClaimable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/FilAddress.sol\\\";\\n\\n/**\\n * @author fevmate (https://github.com/wadealexc/fevmate)\\n * @notice Two-step owner transferrance mixin. Unlike many fevmate contracts,\\n * no methods here normalize address inputs - so it is possible to transfer\\n * ownership to an ID address. However, the acceptOwnership method enforces\\n * that the pending owner address can actually be the msg.sender.\\n *\\n * This should mean it's possible for other Filecoin actor types to hold the\\n * owner role - like BLS/SECP account actors.\\n */\\nabstract contract OwnedClaimable {    \\n    \\n    using FilAddress for *;\\n\\n    error Unauthorized();\\n    error InvalidAddress();\\n\\n    /*//////////////////////////////////////\\n                  OWNER INFO\\n    //////////////////////////////////////*/\\n\\n    address public owner;\\n    address pendingOwner;\\n\\n    /*//////////////////////////////////////\\n                    EVENTS\\n    //////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n    event OwnershipPending(address indexed currentOwner, address indexed pendingOwner);\\n\\n    /*//////////////////////////////////////\\n                  CONSTRUCTOR\\n    //////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        if (_owner == address(0)) revert InvalidAddress();\\n        // normalize _owner to avoid setting an EVM actor's ID address as owner\\n        owner = _owner.normalize();\\n\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /*//////////////////////////////////////\\n                OWNABLE METHODS\\n    //////////////////////////////////////*/\\n\\n    modifier onlyOwner() virtual {\\n        if (msg.sender != owner) revert Unauthorized();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Allows the current owner to revoke the owner role, locking\\n     * any onlyOwner functions.\\n     *\\n     * Note: this method requires that there is not currently a pending\\n     * owner. To revoke ownership while there is a pending owner, the\\n     * current owner must first set a new pending owner to address(0).\\n     * Alternatively, the pending owner can claim ownership and then\\n     * revoke it.\\n     */\\n    function revokeOwnership() public virtual onlyOwner {\\n        if (pendingOwner != address(0)) revert Unauthorized();\\n        owner = address(0);\\n\\n        emit OwnershipTransferred(msg.sender, address(0));\\n    }\\n\\n    /**\\n     * @notice Works like most 2-step ownership transfer methods. The current\\n     * owner can call this to set a new pending owner.\\n     * \\n     * Note: the new owner address is NOT normalized - it is stored as-is.\\n     * This is safe, because the acceptOwnership method enforces that the\\n     * new owner can make a transaction as msg.sender.\\n     */\\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\\n        pendingOwner = _newOwner;\\n\\n        emit OwnershipPending(msg.sender, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Used by the pending owner to accept the ownership transfer.\\n     *\\n     * Note: If this fails unexpectedly, check that the pendingOwner is not\\n     * an ID address. The pending owner address should match the pending\\n     * owner's msg.sender address.         \\n     */\\n    function acceptOwnership() public virtual {\\n        if (msg.sender != pendingOwner) revert Unauthorized();\\n\\n        // Transfer ownership and set pendingOwner to 0\\n        address oldOwner = owner;\\n        owner = msg.sender;\\n        delete pendingOwner;\\n\\n        emit OwnershipTransferred(oldOwner, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x123a5b03dad2077ef62890a048a2220cc2637e0ea331e30fac2fe3a4d4638955\",\"license\":\"MIT\"},\"lib/fevmate/contracts/token/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/FilAddress.sol\\\";\\n\\n/**\\n * @author fevmate (https://github.com/wadealexc/fevmate)\\n * @notice ERC20 mixin for the FEVM. This contract implements the ERC20\\n * standard, with additional safety features for the FEVM.\\n *\\n * All methods attempt to normalize address input. This means that if\\n * they are provided ID addresses as input, they will attempt to convert\\n * these addresses to standard Eth addresses. \\n * \\n * This is an important consideration when developing on the FEVM, and\\n * you can read about it more in the README.\\n */\\nabstract contract ERC20 {\\n\\n    using FilAddress for *;\\n\\n    /*//////////////////////////////////////\\n                  TOKEN INFO\\n    //////////////////////////////////////*/\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    /*//////////////////////////////////////\\n                 ERC-20 STORAGE\\n    //////////////////////////////////////*/\\n\\n    uint public totalSupply;\\n\\n    mapping(address => uint) balances;\\n    mapping(address => mapping(address => uint)) allowances;\\n\\n    /*//////////////////////////////////////\\n                    EVENTS\\n    //////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////\\n                  CONSTRUCTOR\\n    //////////////////////////////////////*/\\n\\n    constructor (\\n        string memory _name, \\n        string memory _symbol, \\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    /*//////////////////////////////////////\\n                 ERC-20 METHODS\\n    //////////////////////////////////////*/\\n\\n    function transfer(address _to, uint _amount) public virtual returns (bool) {\\n        // Attempt to convert destination to Eth address\\n        _to = _to.normalize();\\n        \\n        balances[msg.sender] -= _amount;\\n        balances[_to] += _amount;\\n\\n        emit Transfer(msg.sender, _to, _amount);\\n        return true;\\n    }\\n    \\n    function transferFrom(address _owner, address _to, uint _amount) public virtual returns (bool) {\\n        // Attempt to convert owner and destination to Eth addresses\\n        _owner = _owner.normalize();\\n        _to = _to.normalize();\\n\\n        // Reduce allowance for spender. If allowance is set to the\\n        // max value, we leave it alone.\\n        uint allowed = allowances[_owner][msg.sender];\\n        if (allowed != type(uint).max)\\n            allowances[_owner][msg.sender] = allowed - _amount;\\n        \\n        balances[_owner] -= _amount;\\n        balances[_to] += _amount;\\n\\n        emit Transfer(_owner, _to, _amount);\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint _amount) public virtual returns (bool) {\\n        // Attempt to convert spender to Eth address\\n        _spender = _spender.normalize();\\n\\n        allowances[msg.sender][_spender] = _amount;\\n\\n        emit Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////\\n                 ERC-20 GETTERS\\n    //////////////////////////////////////*/\\n\\n    function balanceOf(address _a) public virtual view returns (uint) {\\n        return balances[_a.normalize()];\\n    }\\n\\n    function allowance(address _owner, address _spender) public virtual view returns (uint) {\\n        return allowances[_owner.normalize()][_spender.normalize()];\\n    }\\n\\n    /*//////////////////////////////////////\\n           MINT/BURN INTERNAL METHODS\\n    //////////////////////////////////////*/\\n\\n    function _mint(address _to, uint _amount) internal virtual {\\n        // Attempt to convert to Eth address\\n        _to = _to.normalize();\\n\\n        totalSupply += _amount;\\n        balances[_to] += _amount;\\n\\n        emit Transfer(address(0), _to, _amount);\\n    }\\n\\n    function _burn(address _from, uint _amount) internal virtual {\\n        // Attempt to convert to Eth address\\n        _from = _from.normalize();\\n\\n        balances[_from] -= _amount;\\n        totalSupply -= _amount;\\n\\n        emit Transfer(_from, address(0), _amount);\\n    }\\n}\",\"keccak256\":\"0x2f5d552af1558ee014802a268681037b3b5f7dde65bc28a8400ab21470fd1263\",\"license\":\"MIT\"},\"lib/fevmate/contracts/token/WFIL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../utils/FilAddress.sol\\\";\\nimport \\\"../access/OwnedClaimable.sol\\\";\\n\\n/**\\n * @author fevmate (https://github.com/wadealexc/fevmate)\\n * @notice Wrapped filecoin implementation, using ERC20-FEVM mixin.\\n */\\ncontract WFIL is ERC20(\\\"Wrapped FIL\\\", \\\"WFIL\\\", 18), OwnedClaimable {\\n\\n    using FilAddress for *;\\n\\n    error TimelockActive();\\n\\n    /*//////////////////////////////////////\\n                 WFIL STORAGE\\n    //////////////////////////////////////*/\\n\\n    // Timelock for 6 months after contract is deployed\\n    // Applies only to recoverDeposit. See comments there for info\\n    uint public immutable recoveryTimelock = block.timestamp + 24 weeks;\\n\\n    /*//////////////////////////////////////\\n                    EVENTS\\n    //////////////////////////////////////*/\\n\\n    event Deposit(address indexed from, uint amount);\\n    event Withdrawal(address indexed to, uint amount);\\n    \\n    /*//////////////////////////////////////\\n                  CONSTRUCTOR\\n    //////////////////////////////////////*/\\n    \\n    constructor(address _owner) OwnedClaimable(_owner) {}\\n\\n    /*//////////////////////////////////////\\n                  WFIL METHODS\\n    //////////////////////////////////////*/\\n\\n    /**\\n     * @notice Fallback function - Fil transfers via standard address.call\\n     * will end up here and trigger the deposit function, minting the caller\\n     * with WFIL 1:1.\\n     *\\n     * Note that transfers of value via the FVM's METHOD_SEND bypass bytecode,\\n     * and will not credit the sender with WFIL in return. Please ensure you\\n     * do NOT send the contract Fil via METHOD_SEND - always use InvokeEVM.\\n     *\\n     * For more information on METHOD_SEND, see recoverDeposit below.\\n     */\\n    receive() external payable virtual {\\n        deposit();\\n    }\\n\\n    /**\\n     * @notice Deposit Fil into the contract, and mint WFIL 1:1.\\n     */\\n    function deposit() public payable virtual {\\n        _mint(msg.sender, msg.value);\\n\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @notice Burns _amount WFIL from caller's balance, and transfers them\\n     * the unwrapped Fil 1:1.\\n     *\\n     * Note: The fund transfer used here is address.call{value: _amount}(\\\"\\\"),\\n     * which does NOT work with the FVM's builtin Multisig actor. This is\\n     * because, under the hood, address.call acts like a message to an actor's\\n     * InvokeEVM method. The Multisig actor does not implement this method.\\n     * \\n     * This is a known issue, but we've decided to keep the method as-is,\\n     * because it's likely that the Multisig actor is eventually upgraded to\\n     * support this method. Even though a Multisig actor cannot directly\\n     * withdraw, it is still possible for Multisigs to deposit, transfer,\\n     * etc WFIL. So, if your Multisig actor needs to withdraw, you can\\n     * transfer your WFIL to another contract, which can perform the\\n     * withdrawal for you.\\n     *\\n     * (Though Multisig actors are not supported, BLS/SECPK/EthAccounts\\n     * and EVM contracts can use this method normally)\\n     */\\n    function withdraw(uint _amount) public virtual {\\n        _burn(msg.sender, _amount);\\n\\n        emit Withdrawal(msg.sender, _amount);\\n\\n        payable(msg.sender).sendValue(_amount);\\n    }\\n\\n    /**\\n     * @notice Used by owner to unstick Fil that was directly transferred\\n     * to the contract without triggering the deposit/receive functions.\\n     * When called, _amount stuck Fil is converted to WFIL on behalf of\\n     * the passed-in _depositor.\\n     *\\n     * This method ONLY converts Fil that would otherwise be permanently\\n     * lost.\\n     *\\n     * --- About ---\\n     *\\n     * In the event someone accidentally sends Fil to this contract via\\n     * FVM method METHOD_SEND (or via selfdestruct), the Fil will be\\n     * lost rather than being converted to WFIL. This is because METHOD_SEND \\n     * transfers value without invoking the recipient's code.\\n     *\\n     * If this occurs, the contract's Fil balance will go up, but no WFIL\\n     * will be minted. Luckily, this means we can calculate the number of  \\n     * stuck tokens as the contract's Fil balance minus WFIL totalSupply, \\n     * and ensure we're only touching stuck tokens with this method.\\n     *\\n     * Please ensure you only ever send funds to this contract using the\\n     * FVM method InvokeEVM! This method is not a get-out-of-jail free card,\\n     * and comes with no guarantees.\\n     *\\n     * (If you're a lost EVM dev, address.call uses InvokeEVM under the\\n     * hood. So in a purely contract-contract context, you don't need\\n     * to do anything special - use address.call, or call the WFIL.deposit\\n     * method as you would normally.)\\n     */\\n    function recoverDeposit(address _depositor, uint _amount) public virtual onlyOwner {\\n        // This method is locked for 6 months after contract deployment.\\n        // This is to give the deployers time to sort out the best/most\\n        // equitable way to recover and distribute accidentally-locked\\n        // tokens.\\n        if (block.timestamp < recoveryTimelock) revert TimelockActive();\\n\\n        // Calculate number of locked tokens\\n        uint lockedTokens = address(this).balance - totalSupply;\\n        require(_amount <= lockedTokens);\\n\\n        // Normalize depositor. _mint also does this, but we want to\\n        // emit the normalized address in the Deposit event below.\\n        _depositor = _depositor.normalize();\\n\\n        _mint(_depositor, _amount);\\n        emit Deposit(_depositor, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6a1938a82207a89956168faadad6bc93941ac3bad2dd9c3507f3e4e29c791576\",\"license\":\"MIT\"},\"lib/fevmate/contracts/utils/FilAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @author fevmate (https://github.com/wadealexc/fevmate)\\n * @notice Utility functions for converting between id and\\n * eth addresses. Helps implement address normalization.\\n *\\n * See README for more details about how to use this when\\n * developing for the FEVM.\\n */\\nlibrary FilAddress {\\n    \\n    // Custom errors\\n    error CallFailed();\\n    error InvalidAddress();\\n    error InsufficientFunds();\\n\\n    // Builtin Actor addresses (singletons)\\n    address constant SYSTEM_ACTOR = 0xfF00000000000000000000000000000000000000;\\n    address constant INIT_ACTOR = 0xff00000000000000000000000000000000000001;\\n    address constant REWARD_ACTOR = 0xff00000000000000000000000000000000000002;\\n    address constant CRON_ACTOR = 0xFF00000000000000000000000000000000000003;\\n    address constant POWER_ACTOR = 0xFf00000000000000000000000000000000000004;\\n    address constant MARKET_ACTOR = 0xff00000000000000000000000000000000000005;\\n    address constant VERIFIED_REGISTRY_ACTOR = 0xFF00000000000000000000000000000000000006;\\n    address constant DATACAP_TOKEN_ACTOR = 0xfF00000000000000000000000000000000000007;\\n    address constant EAM_ACTOR = 0xfF0000000000000000000000000000000000000a;\\n\\n    // FEVM precompile addresses\\n    address constant RESOLVE_ADDRESS = 0xFE00000000000000000000000000000000000001;\\n    address constant LOOKUP_DELEGATED_ADDRESS = 0xfE00000000000000000000000000000000000002;\\n    address constant CALL_ACTOR = 0xfe00000000000000000000000000000000000003;\\n    // address constant GET_ACTOR_TYPE = 0xFe00000000000000000000000000000000000004; // (deprecated)\\n    address constant CALL_ACTOR_BY_ID = 0xfe00000000000000000000000000000000000005;\\n\\n    // An ID address with id == 0. It's also equivalent to the system actor address\\n    // This is useful for bitwise operations\\n    address constant ZERO_ID_ADDRESS = SYSTEM_ACTOR;\\n    \\n    /**\\n     * @notice Convert ID to Eth address. Returns input if conversion fails.\\n     *\\n     * Attempt to convert address _a from an ID address to an Eth address\\n     * If _a is NOT an ID address, this returns _a\\n     * If _a does NOT have a corresponding Eth address, this returns _a\\n     * \\n     * NOTE: It is possible this returns an ID address! If you want a method\\n     *       that will NEVER return an ID address, see mustNormalize below.\\n     */\\n    function normalize(address _a) internal view returns (address) {\\n        // First, check if we have an ID address. If we don't, return as-is\\n        (bool isID, uint64 id) = isIDAddress(_a);\\n        if (!isID) {\\n            return _a;\\n        }\\n\\n        // We have an ID address -- attempt the conversion\\n        // If there is no corresponding Eth address, return _a\\n        (bool success, address eth) = getEthAddress(id);\\n        if (!success) {\\n            return _a;\\n        } else {\\n            return eth;\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert ID to Eth address. Reverts if conversion fails.\\n     *\\n     * Attempt to convert address _a from an ID address to an Eth address\\n     * If _a is NOT an ID address, this returns _a unchanged\\n     * If _a does NOT have a corresponding Eth address, this method reverts\\n     *\\n     * This method can be used when you want a guarantee that an ID address is not\\n     * returned. Note, though, that rejecting ID addresses may mean you don't support\\n     * other Filecoin-native actors.\\n     */\\n    function mustNormalize(address _a) internal view returns (address) {\\n        // First, check if we have an ID address. If we don't, return as-is\\n        (bool isID, uint64 id) = isIDAddress(_a);\\n        if (!isID) {\\n            return _a;\\n        }\\n\\n        // We have an ID address -- attempt the conversion\\n        // If there is no corresponding Eth address, revert\\n        (bool success, address eth) = getEthAddress(id);\\n        if (!success) revert InvalidAddress();\\n        return eth;\\n    }\\n\\n    // Used to clear the last 8 bytes of an address    (addr & U64_MASK)\\n    address constant U64_MASK = 0xFffFfFffffFfFFffffFFFffF0000000000000000;\\n    // Used to retrieve the last 8 bytes of an address (addr & MAX_U64)\\n    address constant MAX_U64 = 0x000000000000000000000000fFFFFFffFFFFfffF;\\n\\n    /**\\n     * @notice Checks whether _a matches the ID address format.\\n     * If it does, returns true and the id\\n     * \\n     * The ID address format is:\\n     * 0xFF | bytes11(0) | uint64(id)\\n     */\\n    function isIDAddress(address _a) internal pure returns (bool isID, uint64 id) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Zeroes out the last 8 bytes of _a\\n            let a_mask := and(_a, U64_MASK)\\n\\n            // If the result is equal to the ZERO_ID_ADDRESS,\\n            // _a is an ID address.\\n            if eq(a_mask, ZERO_ID_ADDRESS) {\\n                isID := true\\n                id := and(_a, MAX_U64)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Given an Actor ID, converts it to an EVM-compatible address.\\n     * \\n     * If _id has a corresponding Eth address, we return that\\n     * Otherwise, _id is returned as a 20-byte ID address\\n     */\\n    function toAddress(uint64 _id) internal view returns (address) {\\n        (bool success, address eth) = getEthAddress(_id);\\n        if (success) {\\n            return eth;\\n        } else {\\n            return toIDAddress(_id);\\n        }\\n    }\\n\\n    /**\\n     * @notice Given an Actor ID, converts it to a 20-byte ID address\\n     * \\n     * Note that this method does NOT check if the _id has a corresponding\\n     * Eth address. If you want that, try toAddress above.\\n     */\\n    function toIDAddress(uint64 _id) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly { addr := or(ZERO_ID_ADDRESS, _id) }\\n    }\\n\\n    // An address with all bits set. Used to clean higher-order bits\\n    address constant ADDRESS_MASK = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\\n\\n    /**\\n     * @notice Convert ID to Eth address by querying the lookup_delegated_address\\n     * precompile.\\n     *\\n     * If the actor ID corresponds to an Eth address, this will return (true, addr)\\n     * If the actor ID does NOT correspond to an Eth address, this will return (false, 0)\\n     * \\n     * --- About ---\\n     * \\n     * The lookup_delegated_address precompile retrieves the actor state corresponding\\n     * to the id. If the actor has a delegated address, it is returned using fil\\n     * address encoding (see below).\\n     *\\n     * f4, or delegated addresses, have a namespace as well as a subaddress that can\\n     * be up to 54 bytes long. This is to support future address formats. Currently,\\n     * though, the f4 format is only used to support Eth addresses.\\n     *\\n     * Consequently, the only addresses lookup_delegated_address should return have:\\n     * - Prefix:     \\\"f4\\\" address      - 1 byte   - (0x04)\\n     * - Namespace:  EAM actor id 10   - 1 byte   - (0x0A)\\n     * - Subaddress: EVM-style address - 20 bytes - (EVM address)\\n     * \\n     * This method checks that the precompile output exactly matches this format:\\n     * 22 bytes, starting with 0x040A.\\n     * \\n     * If we get anything else, we return (false, 0x00).\\n     */\\n    function getEthAddress(uint64 _id) internal view returns (bool success, address eth) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Call LOOKUP_DELEGATED_ADDRESS precompile\\n            //\\n            // Input: uint64 id, in standard EVM format (left-padded to 32 bytes)\\n            //\\n            // Output: LOOKUP_DELEGATED_ADDRESS returns an f4-encoded address. \\n            // For Eth addresses, the format is a 20-byte address, prefixed with\\n            // 0x040A. So, we expect exactly 22 bytes of returndata.\\n            // \\n            // Since we want to read an address from the returndata, we place the\\n            // output at memory offset 10, which means the address is already\\n            // word-aligned (10 + 22 == 32)\\n            //\\n            // NOTE: success and returndatasize checked at the end of the function\\n            mstore(0, _id)\\n            success := staticcall(gas(), LOOKUP_DELEGATED_ADDRESS, 0, 32, 10, 22)\\n\\n            // Read result. LOOKUP_DELEGATED_ADDRESS returns raw, unpadded\\n            // bytes. Assuming we succeeded, we can extract the eth address\\n            // by reading from offset 0 and cleaning any higher-order bits:\\n            let result := mload(0)\\n            eth := and(ADDRESS_MASK, result)\\n\\n            // Check that the returned address has the expected prefix. The\\n            // prefix is the first 2 bytes of returndata, located at memory \\n            // offset 10. \\n            // \\n            // To isolate it, shift right by the # of bits in an address (160),\\n            // and clean all but the last 2 bytes.\\n            let prefix := and(0xFFFF, shr(160, result))\\n            if iszero(eq(prefix, 0x040A)) {\\n                success := false\\n                eth := 0\\n            }\\n        }\\n        // Checking these here because internal functions don't have\\n        // a good way to return from inline assembly.\\n        //\\n        // But, it's very important we do check these. If the output\\n        // wasn't exactly what we expected, we assume there's no eth\\n        // address and return (false, 0).\\n        if (!success || returnDataSize() != 22) {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert Eth address to ID by querying the resolve_address precompile.\\n     *\\n     * If the passed-in address is already in ID form, returns (true, id)\\n     * If the Eth address has no corresponding ID address, returns (false, 0)\\n     * Otherwise, the lookup succeeds and this returns (true, id)\\n     * \\n     * --- About ---\\n     *\\n     * The resolve_address precompile can resolve any fil-encoded address to its\\n     * corresponding actor ID, if there is one. This means resolve_address handles\\n     * all address protocols: f0, f1, f2, f3, and f4. \\n     * \\n     * An address might not have an actor ID if it does not exist in state yet. A \\n     * typical example of this is a public-key-type address, which can exist even \\n     * if it hasn't been used on-chain yet.\\n     *\\n     * This method is only meant to look up ids for Eth addresses, so it contains\\n     * very specific logic to correctly encode an Eth address into its f4 format.\\n     * \\n     * Note: This is essentially just the reverse of getEthAddress above, so check\\n     * the comments there for more details on f4 encoding.\\n     */\\n    function getActorID(address _eth) internal view returns (bool success, uint64 id) {\\n        // First - if we already have an ID address, we can just return that\\n        (success, id) = isIDAddress(_eth);\\n        if (success) {\\n            return (success, id);\\n        }\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert Eth address to f4 format: 22 bytes, with prefix 0x040A.\\n            // (see getEthAddress above for more details on this format)\\n            //\\n            // We're going to pass the 22 bytes to the precompile without any\\n            // padding or length, so everything will be left-aligned. Since \\n            // addresses are right-aligned, we need to shift everything left:\\n            // - 0x040A prefix - shifted left 240 bits (30 bytes * 8 bits)\\n            // - Eth address   - shifted left 80 bits  (10 bytes * 8 bits)\\n            let input := or(\\n                shl(240, 0x040A),\\n                shl(80, _eth)\\n            )\\n            // Call RESOLVE_ADDRESS precompile\\n            //\\n            // Input: Eth address in f4 format. 22 bytes, no padding or length\\n            //\\n            // Output: RESOLVE_ADDRESS returns a uint64 actor ID in standard EVM\\n            // format (left-padded to 32 bytes).\\n            // \\n            // NOTE: success and returndatasize checked at the end of the function\\n            mstore(0, input)\\n            success := staticcall(gas(), RESOLVE_ADDRESS, 0, 22, 0, 32)\\n\\n            // Read result and clean higher-order bits, just in case.\\n            // If successful, this will be the actor id.\\n            id := and(MAX_U64, mload(0))\\n        }\\n        // Checking these here because internal functions don't have\\n        // a good way to return from inline assembly.\\n        //\\n        // But, it's very important we do check these. If the output\\n        // wasn't exactly what we expected, we assume there's no ID\\n        // address and return (false, 0).\\n        if (!success || returnDataSize() != 32) {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Replacement for Solidity's address.send and address.transfer\\n     * This sends _amount to _recipient, forwarding all available gas and\\n     * reverting if there are any errors.\\n     *\\n     * If _recpient is an Eth address, this works the way you'd\\n     * expect the EVM to work.\\n     *\\n     * If _recpient is an ID address, this works if:\\n     * 1. The ID corresponds to an Eth EOA address      (EthAccount actor)\\n     * 2. The ID corresponds to an Eth contract address (EVM actor)\\n     * 3. The ID corresponds to a BLS/SECPK address     (Account actor)\\n     *\\n     * If _recpient is some other Filecoin-native actor, this will revert.\\n     */\\n    function sendValue(address payable _recipient, uint _amount) internal {\\n        if (address(this).balance < _amount) revert InsufficientFunds();\\n\\n        (bool success, ) = _recipient.call{value: _amount}(\\\"\\\");\\n        if (!success) revert CallFailed();\\n    }\\n\\n    function returnDataSize() private pure returns (uint size) {\\n        /// @solidity memory-safe-assembly\\n        assembly { size := returndatasize() }\\n    }\\n}\\n\",\"keccak256\":\"0x8707b4f152e92b852090c313419c0dc772eebf4428472a0659dd6b13dd6bee31\",\"license\":\"MIT\"},\"lib/filecoin-solidity/contracts/v0.8/SendAPI.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./utils/Misc.sol\\\";\\nimport \\\"./utils/Actor.sol\\\";\\nimport \\\"./types/CommonTypes.sol\\\";\\n\\n/// @title This library is helper method to send funds to some specific address. Calling one of its methods will result in a cross-actor call being performed.\\n/// @author Zondax AG\\nlibrary SendAPI {\\n    /// @notice send token to a specific actor\\n    /// @param target The id address (uint64) you want to send funds to\\n    /// @param value tokens to be transferred to the receiver\\n    function send(CommonTypes.FilActorId target, uint256 value) internal {\\n        bytes memory result = Actor.callByID(target, 0, Misc.NONE_CODEC, new bytes(0), value, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @notice send token to a specific actor\\n    /// @param target The address you want to send funds to\\n    /// @param value tokens to be transferred to the receiver\\n    function send(CommonTypes.FilAddress memory target, uint256 value) internal {\\n        bytes memory result = Actor.callByAddress(target.data, 0, Misc.NONE_CODEC, new bytes(0), value, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69b80c657fa612d0d71464f1ce0d539826c00da27c54018490f440678910d484\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/types/CommonTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\n\\n/// @title Filecoin actors' common types for Solidity.\\n/// @author Zondax AG\\nlibrary CommonTypes {\\n    uint constant UniversalReceiverHookMethodNum = 3726118371;\\n\\n    /// @param idx index for the failure in batch\\n    /// @param code failure code\\n    struct FailCode {\\n        uint32 idx;\\n        uint32 code;\\n    }\\n\\n    /// @param success_count total successes in batch\\n    /// @param fail_codes list of failures code and index for each failure in batch\\n    struct BatchReturn {\\n        uint32 success_count;\\n        FailCode[] fail_codes;\\n    }\\n\\n    /// @param type_ asset type\\n    /// @param payload payload corresponding to asset type\\n    struct UniversalReceiverParams {\\n        uint32 type_;\\n        bytes payload;\\n    }\\n\\n    /// @param val contains the actual arbitrary number written as binary\\n    /// @param neg indicates if val is negative or not\\n    struct BigInt {\\n        bytes val;\\n        bool neg;\\n    }\\n\\n    /// @param data filecoin address in bytes format\\n    struct FilAddress {\\n        bytes data;\\n    }\\n\\n    /// @param data cid in bytes format\\n    struct Cid {\\n        bytes data;\\n    }\\n\\n    /// @param data deal proposal label in bytes format (it can be utf8 string or arbitrary bytes string).\\n    /// @param isString indicates if the data is string or raw bytes\\n    struct DealLabel {\\n        bytes data;\\n        bool isString;\\n    }\\n\\n    type FilActorId is uint64;\\n\\n    type ChainEpoch is int64;\\n}\\n\",\"keccak256\":\"0x1819b8e82cf53f0fadc446d064a380979888b97a0004f1e70c9fa1a6f4f13ed9\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/utils/Actor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Misc.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Call actors utilities library, meant to interact with Filecoin builtin actors\\n/// @author Zondax AG\\nlibrary Actor {\\n    /// @notice precompile address for the call_actor precompile\\n    address constant CALL_ACTOR_ADDRESS = 0xfe00000000000000000000000000000000000003;\\n\\n    /// @notice precompile address for the call_actor_id precompile\\n    address constant CALL_ACTOR_ID = 0xfe00000000000000000000000000000000000005;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a static_call to the desired actor\\n    uint64 constant READ_ONLY_FLAG = 0x00000001;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a call to the desired actor\\n    uint64 constant DEFAULT_FLAG = 0x00000000;\\n\\n    /// @notice the provided address is not valid\\n    error InvalidAddress(bytes addr);\\n\\n    /// @notice the smart contract has no enough balance to transfer\\n    error NotEnoughBalance(uint256 balance, uint256 value);\\n\\n    /// @notice the provided actor id is not valid\\n    error InvalidActorID(CommonTypes.FilActorId actorId);\\n\\n    /// @notice an error happened trying to call the actor\\n    error FailToCallActor();\\n\\n    /// @notice the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\\n    error InvalidResponseLength();\\n\\n    /// @notice the codec received is not valid\\n    error InvalidCodec(uint64);\\n\\n    /// @notice the called actor returned an error as part of its expected behaviour\\n    error ActorError(int256 errorCode);\\n\\n    /// @notice the actor is not found\\n    error ActorNotFound();\\n\\n    /// @notice allows to interact with an specific actor by its address (bytes format)\\n    /// @param actor_address actor address (bytes format) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByAddress(\\n        bytes memory actor_address,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        if (actor_address.length < 2) {\\n            revert InvalidAddress(actor_address);\\n        }\\n\\n        validatePrecompileCall(CALL_ACTOR_ADDRESS, value);\\n\\n        // We have to delegate-call the call-actor precompile because the call-actor precompile will\\n        // call the target actor on our behalf. This will _not_ delegate to the target `actor_address`.\\n        //\\n        // Specifically:\\n        //\\n        // - `static_call == false`: `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(CALL)-> actor_address\\n        // - `static_call == true`:  `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(STATICCALL)-> actor_address\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ADDRESS).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, actor_address)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to interact with an specific actor by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        validatePrecompileCall(CALL_ACTOR_ID, value);\\n\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ID).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, target)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to run some generic validations before calling the precompile actor\\n    /// @param addr precompile actor address to run check to\\n    /// @param value tokens to be transferred to the called actor\\n    function validatePrecompileCall(address addr, uint256 value) internal view {\\n        uint balance = address(this).balance;\\n        if (balance < value) {\\n            revert NotEnoughBalance(balance, value);\\n        }\\n\\n        bool actorExists = Misc.addressExists(addr);\\n        if (!actorExists) {\\n            revert ActorNotFound();\\n        }\\n    }\\n\\n    /// @notice allows to interact with an non-singleton actors by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transfered to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\\n    function callNonSingletonByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\\n            revert InvalidActorID(target);\\n        }\\n\\n        return callByID(target, method_num, codec, raw_request, value, static_call);\\n    }\\n\\n    /// @notice parse the response an actor returned\\n    /// @notice it will validate the return code (success) and the codec (valid one)\\n    /// @param raw_response raw data (bytes) the actor returned\\n    /// @return the actual raw data (payload, in bytes) to be parsed according to the actor and method called\\n    function readRespData(bytes memory raw_response) internal pure returns (bytes memory) {\\n        (int256 exit, uint64 return_codec, bytes memory return_value) = abi.decode(raw_response, (int256, uint64, bytes));\\n\\n        if (return_codec == Misc.NONE_CODEC) {\\n            if (return_value.length != 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else if (return_codec == Misc.CBOR_CODEC || return_codec == Misc.DAG_CBOR_CODEC) {\\n            if (return_value.length == 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else {\\n            revert InvalidCodec(return_codec);\\n        }\\n\\n        if (exit != 0) {\\n            revert ActorError(exit);\\n        }\\n\\n        return return_value;\\n    }\\n}\\n\",\"keccak256\":\"0xa4b9eb4d84491477a3c11336a431c4f3a0796977efb92779bd062f273824c67a\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\nimport \\\"../utils/Leb128.sol\\\";\\nimport \\\"lib/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\\n/// @author Zondax AG\\nlibrary FilAddresses {\\n    using Buffer for Buffer.buffer;\\n\\n    error InvalidAddress();\\n\\n    /// @notice allow to get a FilAddress from an eth address\\n    /// @param addr eth address to convert\\n    /// @return new filecoin address\\n    function fromEthAddress(address addr) internal pure returns (CommonTypes.FilAddress memory) {\\n        return CommonTypes.FilAddress(abi.encodePacked(hex\\\"040a\\\", addr));\\n    }\\n\\n    /// @notice allow to create a Filecoin address from an actorID\\n    /// @param actorID uint64 actorID\\n    /// @return address filecoin address\\n    function fromActorID(uint64 actorID) internal pure returns (CommonTypes.FilAddress memory) {\\n        Buffer.buffer memory result = Leb128.encodeUnsignedLeb128FromUInt64(actorID);\\n        return CommonTypes.FilAddress(abi.encodePacked(hex\\\"00\\\", result.buf));\\n    }\\n\\n    /// @notice allow to create a Filecoin address from bytes\\n    /// @param data address in bytes format\\n    /// @return filecoin address\\n    function fromBytes(bytes memory data) internal pure returns (CommonTypes.FilAddress memory) {\\n        CommonTypes.FilAddress memory newAddr = CommonTypes.FilAddress(data);\\n        if (!validate(newAddr)) {\\n            revert InvalidAddress();\\n        }\\n\\n        return newAddr;\\n    }\\n\\n    /// @notice allow to validate if an address is valid or not\\n    /// @dev we are only validating known address types. If the type is not known, the default value is true\\n    /// @param addr the filecoin address to validate\\n    /// @return whether the address is valid or not\\n    function validate(CommonTypes.FilAddress memory addr) internal pure returns (bool) {\\n        if (addr.data[0] == 0x00) {\\n            return addr.data.length <= 10;\\n        } else if (addr.data[0] == 0x01 || addr.data[0] == 0x02) {\\n            return addr.data.length == 21;\\n        } else if (addr.data[0] == 0x03) {\\n            return addr.data.length == 49;\\n        } else if (addr.data[0] == 0x04) {\\n            return addr.data.length <= 64;\\n        }\\n\\n        return addr.data.length <= 256;\\n    }\\n}\\n\",\"keccak256\":\"0x3ff49ba2824a4bb4313f753dd35a5bf3c8228ed68ddbdc3370957583025d5fb6\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/utils/Leb128.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2023 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"lib/buffer/contracts/Buffer.sol\\\";\\n\\n/// @notice This library implement the leb128\\n/// @author Zondax AG\\nlibrary Leb128 {\\n    using Buffer for Buffer.buffer;\\n\\n    /// @notice encode a unsigned integer 64bits into bytes\\n    /// @param value the actor ID to encode\\n    /// @return result return the value in bytes\\n    function encodeUnsignedLeb128FromUInt64(uint64 value) internal pure returns (Buffer.buffer memory result) {\\n        while (true) {\\n            uint64 byte_ = value & 0x7f;\\n            value >>= 7;\\n            if (value == 0) {\\n                result.appendUint8(uint8(byte_));\\n                return result;\\n            }\\n            result.appendUint8(uint8(byte_ | 0x80));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x14fe61ec09625e9a46caa102921d4036274908f2b71d77ddb7948c2bd8798b05\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/utils/Misc.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Library containing miscellaneous functions used on the project\\n/// @author Zondax AG\\nlibrary Misc {\\n    uint64 constant DAG_CBOR_CODEC = 0x71;\\n    uint64 constant CBOR_CODEC = 0x51;\\n    uint64 constant NONE_CODEC = 0x00;\\n\\n    // Code taken from Openzeppelin repo\\n    // Link: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0320a718e8e07b1d932f5acb8ad9cec9d9eed99b/contracts/utils/math/SignedMath.sol#L37-L42\\n    /// @notice get the abs from a signed number\\n    /// @param n number to get abs from\\n    /// @return unsigned number\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n\\n    /// @notice validate if an address exists or not\\n    /// @dev read this article for more information https://blog.finxter.com/how-to-find-out-if-an-ethereum-address-is-a-contract/\\n    /// @param addr address to check\\n    /// @return whether the address exists or not\\n    function addressExists(address addr) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return codehash != 0x0;\\n    }\\n\\n    /// Returns the data size required by CBOR.writeFixedNumeric\\n    function getPrefixSize(uint256 data_size) internal pure returns (uint256) {\\n        if (data_size <= 23) {\\n            return 1;\\n        } else if (data_size <= 0xFF) {\\n            return 2;\\n        } else if (data_size <= 0xFFFF) {\\n            return 3;\\n        } else if (data_size <= 0xFFFFFFFF) {\\n            return 5;\\n        }\\n        return 9;\\n    }\\n\\n    function getBytesSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(value.length) + value.length;\\n    }\\n\\n    function getCidSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(2) + value.length;\\n    }\\n\\n    function getFilActorIdSize(CommonTypes.FilActorId value) internal pure returns (uint256) {\\n        uint64 val = CommonTypes.FilActorId.unwrap(value);\\n        return getPrefixSize(uint256(val));\\n    }\\n\\n    function getChainEpochSize(CommonTypes.ChainEpoch value) internal pure returns (uint256) {\\n        int64 val = CommonTypes.ChainEpoch.unwrap(value);\\n        if (val >= 0) {\\n            return getPrefixSize(uint256(uint64(val)));\\n        } else {\\n            return getPrefixSize(uint256(uint64(-1 - val)));\\n        }\\n    }\\n\\n    function getBoolSize() internal pure returns (uint256) {\\n        return getPrefixSize(1);\\n    }\\n}\\n\",\"keccak256\":\"0x97b02c3ab9cb11169b0b1a143b513017c6bf0f2cba2fc4f81a77345b5dfe96b4\",\"license\":\"Apache-2.0\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626Upgradeable is IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0xf867351fb48f5c0e3b45f085ce60f374b785417f84370cb2ffb57f421931e7eb\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x4dae161227d332808312ee2caf6384929321b83c16cc89b5642985fbec6b814c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "asset()": {
        "details": "See {IERC4626-asset}. "
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "convertToAssets(uint256)": {
        "details": "See {IERC4626-convertToAssets}. "
      },
      "convertToShares(uint256)": {
        "details": "See {IERC4626-convertToShares}. "
      },
      "decimals()": {
        "details": "Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256,address)": {
        "details": "See {IERC4626-deposit}. "
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,address,uint256)": {
        "details": "Contract initializer function.",
        "params": {
          "_initialDeposit": "Initial deposit to the pool to prevent the inflation attack",
          "_resolver": "Resolver contract address",
          "_wFIL": "WFIL token contract address"
        }
      },
      "maxDeposit(address)": {
        "details": "See {IERC4626-maxDeposit}. "
      },
      "maxMint(address)": {
        "details": "See {IERC4626-maxMint}. "
      },
      "maxRedeem(address)": {
        "details": "See {IERC4626-maxRedeem}. "
      },
      "maxWithdraw(address)": {
        "details": "See {IERC4626-maxWithdraw}. "
      },
      "mint(uint256,address)": {
        "details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "pledge(uint256,uint64)": {
        "params": {
          "_minerId": "Storage Provider Miner ID",
          "amount": "Amount of FIL to pledge from Liquid Staking Pool"
        }
      },
      "previewDeposit(uint256)": {
        "details": "See {IERC4626-previewDeposit}. "
      },
      "previewMint(uint256)": {
        "details": "See {IERC4626-previewMint}. "
      },
      "previewRedeem(uint256)": {
        "details": "See {IERC4626-previewRedeem}. "
      },
      "previewWithdraw(uint256)": {
        "details": "See {IERC4626-previewWithdraw}. "
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeem(uint256,address,address)": {
        "details": "See {IERC4626-redeem}. "
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "repayPledge(uint256)": {
        "params": {
          "amount": "Amount of pledge repayment"
        }
      },
      "restake(uint256,address)": {
        "params": {
          "assets": "Amount of assets to restake",
          "receiver": "f4 address to receive clFIL tokens"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalFees(uint64)": {
        "params": {
          "_ownerId": "Storage Provider owner ID"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "unstake(uint256,address)": {
        "details": "Please note that unstake amount has to be clFIL shares (not FIL assets)",
        "params": {
          "owner": "Receiver of FIL assets",
          "shares": "Total clFIL amount to burn (unstake)"
        }
      },
      "unstakeAssets(uint256,address)": {
        "params": {
          "assets": "Total FIL amount to unstake",
          "owner": "Receiver of FIL assets"
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint256,address,address)": {
        "details": "See {IERC4626-withdraw}. "
      }
    },
    "title": "LiquidStaking contract allows users to stake/unstake FIL to earn Filecoin mining rewards. Staked FIL is allocated to Storage Providers (SPs) that perform filecoin storage mining operations. This contract acts as a beneficiary address for each SP that uses FIL capital for pledges. While staking FIL user would get clFIL token in exchange, the token follows ERC4626 standard and it's price is recalculated once mining rewards are distributed to the liquid staking pool and once new FIL is deposited. Please note that LiquidStaking contract performs wrapping of the native FIL into Wrapped Filecoin (WFIL) token.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ActorError(int256)": [
        {
          "notice": "the called actor returned an error as part of its expected behaviour"
        }
      ],
      "ActorNotFound()": [
        {
          "notice": "the actor is not found"
        }
      ],
      "FailToCallActor()": [
        {
          "notice": "an error happened trying to call the actor"
        }
      ],
      "InvalidCodec(uint64)": [
        {
          "notice": "the codec received is not valid"
        }
      ],
      "InvalidResponseLength()": [
        {
          "notice": "the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none."
        }
      ],
      "NotEnoughBalance(uint256,uint256)": [
        {
          "notice": "the smart contract has no enough balance to transfer"
        }
      ]
    },
    "events": {
      "Pledge(uint64,uint64,uint256)": {
        "notice": "Emitted when storage provider is withdrawing FIL for pledge"
      },
      "PledgeRepayment(uint256)": {
        "notice": "Emitted when storage provider's pledge is returned back to the LSP"
      },
      "Stake(address,address,uint256,uint256)": {
        "notice": "Emitted when user is staked wFIL to the Liquid Staking"
      },
      "Unstaked(address,address,uint256,uint256)": {
        "notice": "Emitted when user is unstaked wFIL from the Liquid Staking"
      }
    },
    "kind": "user",
    "methods": {
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "getUsageRatio()": {
        "notice": "Returns pool usage ratio to determine what percentage of FIL is pledged compared to the total amount of FIL staked."
      },
      "pledge(uint256,uint64)": {
        "notice": "Pledge FIL assets from liquid staking pool to miner pledge for one sector"
      },
      "repayPledge(uint256)": {
        "notice": "Triggered when pledge is repaid on the Reward Collector"
      },
      "restake(uint256,address)": {
        "notice": "Restakes `assets` for a specified `target` address"
      },
      "stake()": {
        "notice": "Stake FIL to the Liquid Staking pool and get clFIL in return native FIL is wrapped into WFIL and deposited into LiquidStakingmsg.value is the amount of FIL to stake"
      },
      "totalAssets()": {
        "notice": "Returns total amount of assets backing clFIL, that includes buffered capital in the pool and pledged capital to the SPs."
      },
      "totalFees(uint64)": {
        "notice": "Returns total amount of fees held by LSP for a specific SP with `_ownerId`"
      },
      "totalFilAvailable()": {
        "notice": "Returns the amount of WFIL available on the liquid staking contract"
      },
      "totalFilPledged()": {
        "notice": "The current total amount of FIL that is allocated to SPs."
      },
      "unstake(uint256,address)": {
        "notice": "Unstake FIL from the Liquid Staking pool and burn clFIL tokens"
      },
      "unstakeAssets(uint256,address)": {
        "notice": "Unstake FIL from the Liquid Staking pool and burn clFIL tokens"
      },
      "version()": {
        "notice": "Returns the version of clFIL token contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16433,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 16436,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18313,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7031,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7037,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7039,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 7041,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 7043,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 7701,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 7731,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "_asset",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20Upgradeable)17505"
      },
      {
        "astId": 7733,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "_underlyingDecimals",
        "offset": 20,
        "slot": "101",
        "type": "t_uint8"
      },
      {
        "astId": 8430,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "WFIL",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IWFIL)8450"
      },
      {
        "astId": 16745,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "_status",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 16814,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 18696,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15392,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "_roles",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)15387_storage)"
      },
      {
        "astId": 15687,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16415,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16730,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 121,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "totalFilPledged",
        "offset": 0,
        "slot": "402",
        "type": "t_uint256"
      },
      {
        "astId": 124,
        "contract": "contracts/LiquidStaking.sol:LiquidStaking",
        "label": "resolver",
        "offset": 0,
        "slot": "403",
        "type": "t_contract(IResolverClient)6057"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)17505": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IResolverClient)6057": {
        "encoding": "inplace",
        "label": "contract IResolverClient",
        "numberOfBytes": "20"
      },
      "t_contract(IWFIL)8450": {
        "encoding": "inplace",
        "label": "contract IWFIL",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)15387_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)15387_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)15387_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 15384,
            "contract": "contracts/LiquidStaking.sol:LiquidStaking",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 15386,
            "contract": "contracts/LiquidStaking.sol:LiquidStaking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}