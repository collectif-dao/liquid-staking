{
  "address": "0xE5222EC4A4B3A64320A04EA81d51D110ca329Df2",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profitShare",
          "type": "uint256"
        }
      ],
      "name": "ProfitShareUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profitShare",
          "type": "uint256"
        }
      ],
      "name": "UpdateBaseProfitShare",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "UpdateLiquidityCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WithdrawalsActivated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activateWithdrawals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseProfitShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "getProfitShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_adminFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseProfitShare",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidityCap",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withdrawalsActivated",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "updateBaseProfitShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidityCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_profitShare",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "updateProfitShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalsActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "715747b106f662a0794fb6bd31843d93",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitShare\",\"type\":\"uint256\"}],\"name\":\"ProfitShareUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitShare\",\"type\":\"uint256\"}],\"name\":\"UpdateBaseProfitShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"UpdateLiquidityCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawalsActivated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseProfitShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getProfitShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseProfitShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawalsActivated\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"updateBaseProfitShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_profitShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"updateProfitShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalsActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activateWithdrawals()\":{\"details\":\"This is a one way transaction that needs to take place after the initial activation period\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(uint256,uint256,address,uint256,bool)\":{\"details\":\"Contract initializer function.\",\"params\":{\"_adminFee\":\"Admin fee percentage\",\"_baseProfitShare\":\"Base profit sharing percentage\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalFees(uint64,address)\":{\"params\":{\"_ownerId\":\"Storage Provider owner ID\",\"_pool\":\"Liquid Staking contract address\"}},\"updateAdminFee(uint256)\":{\"details\":\"Make sure that admin fee is not greater than 20%\",\"params\":{\"fee\":\"New admin fee\"}},\"updateBaseProfitShare(uint256)\":{\"details\":\"Make sure that profit sharing is not greater than 80%\",\"params\":{\"share\":\"New base profit sharing ratio\"}},\"updateLiquidityCap(uint256)\":{\"details\":\"Make sure that new liquidity cap is not equal and higher than the prevous cap\",\"params\":{\"cap\":\"New admin liquidity cap\"}},\"updateProfitShare(uint64,uint256,address)\":{\"details\":\"Updates profit sharing requirements for SP with `_ownerId` by `_profitShare` percentage\",\"params\":{\"_ownerId\":\"Storage provider owner ID\",\"_pool\":\"Address of liquid staking pool\",\"_profitShare\":\"Percentage of profit sharing\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"LiquidStaking Controller allows to manage the parameters of Liquid Staking contract\",\"version\":1},\"userdoc\":{\"events\":{\"ProfitShareUpdate(uint64,uint256,uint256)\":{\"notice\":\"Emitted when profit sharing is update for SP\"},\"UpdateAdminFee(uint256)\":{\"notice\":\"Emitted when admin fee is updated\"},\"UpdateBaseProfitShare(uint256)\":{\"notice\":\"Emitted when base profit sharing is updated\"},\"UpdateLiquidityCap(uint256)\":{\"notice\":\"Emitted when liquidity cap is updated\"},\"WithdrawalsActivated()\":{\"notice\":\"Emitted when withdrawals are activated\"}},\"kind\":\"user\",\"methods\":{\"activateWithdrawals()\":{\"notice\":\"Activates withdrawals for liquid staking protocol\"},\"getImplementation()\":{\"notice\":\"Returns the implementation contract\"},\"getProfitShares(uint64,address)\":{\"notice\":\"Returns the profit share for SP at the specific `_pool` by `_ownerId`\"},\"liquidityCap()\":{\"notice\":\"Returns the liquidity cap for Liquid Staking\"},\"totalFees(uint64,address)\":{\"notice\":\"Returns total amount of fees held by LSP for a specific SP with `_ownerId`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Updates admin fee for the protocol revenue\"},\"updateBaseProfitShare(uint256)\":{\"notice\":\"Updates base profit sharing ratio\"},\"updateLiquidityCap(uint256)\":{\"notice\":\"Updates liquidity cap for liquid staking protocol\"},\"updateProfitShare(uint64,uint256,address)\":{\"notice\":\"Only triggered by Liquid Staking admin or registry contract while registering SP\"},\"version()\":{\"notice\":\"Returns the version of clFIL token contract\"},\"withdrawalsActivated()\":{\"notice\":\"Returns wether witdrawals are activated\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidStakingController.sol\":\"LiquidStakingController\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363838313731363032323733\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"contracts/LiquidStakingController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IResolverClient} from \\\"./interfaces/IResolverClient.sol\\\";\\nimport {ILiquidStakingController} from \\\"./interfaces/ILiquidStakingController.sol\\\";\\nimport {Initializable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/**\\n * @title LiquidStaking Controller allows to manage the parameters of Liquid Staking contract\\n */\\ncontract LiquidStakingController is ILiquidStakingController, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n\\terror InvalidParams();\\n\\terror InvalidAccess();\\n\\n\\tuint256 public adminFee;\\n\\tuint256 public baseProfitShare;\\n\\tuint256 public liquidityCap;\\n\\tbool public withdrawalsActivated;\\n\\n\\tIResolverClient internal resolver;\\n\\n\\tmapping(bytes32 => uint256) private profitShares;\\n\\n\\tbytes32 private constant STAKING_CONTROLLER_ADMIN = keccak256(\\\"STAKING_CONTROLLER_ADMIN\\\");\\n\\n\\tmodifier onlyAdmin() {\\n\\t\\tif (!hasRole(STAKING_CONTROLLER_ADMIN, msg.sender)) revert InvalidAccess();\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Contract initializer function.\\n\\t * @param _adminFee Admin fee percentage\\n\\t * @param _baseProfitShare Base profit sharing percentage\\n\\t */\\n\\tfunction initialize(\\n\\t\\tuint256 _adminFee,\\n\\t\\tuint256 _baseProfitShare,\\n\\t\\taddress _resolver,\\n\\t\\tuint256 _liquidityCap,\\n\\t\\tbool _withdrawalsActivated\\n\\t) public initializer {\\n\\t\\t__AccessControl_init();\\n\\t\\t__UUPSUpgradeable_init();\\n\\n\\t\\tif (_adminFee > 2000 || _baseProfitShare > 8000) revert InvalidParams();\\n\\t\\tadminFee = _adminFee;\\n\\t\\tbaseProfitShare = _baseProfitShare;\\n\\t\\tliquidityCap = _liquidityCap;\\n\\t\\twithdrawalsActivated = _withdrawalsActivated;\\n\\n\\t\\tresolver = IResolverClient(_resolver);\\n\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\tgrantRole(STAKING_CONTROLLER_ADMIN, msg.sender);\\n\\t\\t_setRoleAdmin(STAKING_CONTROLLER_ADMIN, DEFAULT_ADMIN_ROLE);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates profit sharing requirements for SP with `_ownerId` by `_profitShare` percentage\\n\\t * @notice Only triggered by Liquid Staking admin or registry contract while registering SP\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _profitShare Percentage of profit sharing\\n\\t * @param _pool Address of liquid staking pool\\n\\t */\\n\\tfunction updateProfitShare(uint64 _ownerId, uint256 _profitShare, address _pool) external {\\n\\t\\tif (!hasRole(STAKING_CONTROLLER_ADMIN, msg.sender) && msg.sender != resolver.getRegistry())\\n\\t\\t\\trevert InvalidAccess();\\n\\n\\t\\tbytes32 shareHash = keccak256(abi.encodePacked(_ownerId, _pool));\\n\\n\\t\\tif (_profitShare == 0) {\\n\\t\\t\\tprofitShares[shareHash] = baseProfitShare;\\n\\n\\t\\t\\temit ProfitShareUpdate(_ownerId, 0, baseProfitShare);\\n\\t\\t} else {\\n\\t\\t\\tuint256 prevShare = profitShares[shareHash];\\n\\t\\t\\tif (_profitShare > 8000 || _profitShare == prevShare) revert InvalidParams();\\n\\n\\t\\t\\tprofitShares[shareHash] = _profitShare;\\n\\n\\t\\t\\temit ProfitShareUpdate(_ownerId, prevShare, _profitShare);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates admin fee for the protocol revenue\\n\\t * @param fee New admin fee\\n\\t * @dev Make sure that admin fee is not greater than 20%\\n\\t */\\n\\tfunction updateAdminFee(uint256 fee) external onlyAdmin {\\n\\t\\tif (fee > 2000 || fee == adminFee) revert InvalidParams();\\n\\n\\t\\tadminFee = fee;\\n\\n\\t\\temit UpdateAdminFee(fee);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates base profit sharing ratio\\n\\t * @param share New base profit sharing ratio\\n\\t * @dev Make sure that profit sharing is not greater than 80%\\n\\t */\\n\\tfunction updateBaseProfitShare(uint256 share) external onlyAdmin {\\n\\t\\tif (share > 8000 || share == 0 || share == baseProfitShare) revert InvalidParams();\\n\\n\\t\\tbaseProfitShare = share;\\n\\n\\t\\temit UpdateBaseProfitShare(share);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates liquidity cap for liquid staking protocol\\n\\t * @param cap New admin liquidity cap\\n\\t * @dev Make sure that new liquidity cap is not equal and higher than the prevous cap\\n\\t */\\n\\tfunction updateLiquidityCap(uint256 cap) external onlyAdmin {\\n\\t\\tif (cap > 0 && cap <= liquidityCap) revert InvalidParams();\\n\\n\\t\\tliquidityCap = cap;\\n\\n\\t\\temit UpdateLiquidityCap(cap);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Activates withdrawals for liquid staking protocol\\n\\t * @dev This is a one way transaction that needs to take place after the initial activation period\\n\\t */\\n\\tfunction activateWithdrawals() external onlyAdmin {\\n\\t\\tif (withdrawalsActivated) revert InvalidParams();\\n\\n\\t\\twithdrawalsActivated = true;\\n\\n\\t\\temit WithdrawalsActivated();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns total amount of fees held by LSP for a specific SP with `_ownerId`\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _pool Liquid Staking contract address\\n\\t */\\n\\tfunction totalFees(uint64 _ownerId, address _pool) external view virtual override returns (uint256) {\\n\\t\\treturn profitShares[_computeShareHash(_ownerId, _pool)] + adminFee;\\n\\t}\\n\\n\\t/**\\n\\t * @notice UUPS Upgradeable function to update the liquid staking pool implementation\\n\\t * @dev Only triggered by contract admin\\n\\t */\\n\\tfunction _authorizeUpgrade(address newImplementation) internal override onlyAdmin {}\\n\\n\\t/**\\n\\t * @notice Returns the version of clFIL token contract\\n\\t */\\n\\tfunction version() external pure virtual returns (string memory) {\\n\\t\\treturn \\\"v1\\\";\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the implementation contract\\n\\t */\\n\\tfunction getImplementation() external view returns (address) {\\n\\t\\treturn _getImplementation();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the profit share for SP at the specific `_pool` by `_ownerId`\\n\\t */\\n\\tfunction getProfitShares(uint64 _ownerId, address _pool) external view returns (uint256) {\\n\\t\\treturn profitShares[_computeShareHash(_ownerId, _pool)];\\n\\t}\\n\\n\\tfunction _computeShareHash(uint64 _ownerId, address _pool) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(_ownerId, _pool));\\n\\t}\\n}\\n\",\"keccak256\":\"0x55c9a00693fd35866616466822d19854b9c4fd2c5300e4b8867dd3f7c3e79c13\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidStakingController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ILiquidStakingController {\\n\\t/**\\n\\t * @notice Emitted when profit sharing is update for SP\\n\\t * @param ownerId SP owner ID\\n\\t * @param prevShare Previous profit sharing value\\n\\t * @param profitShare New profit share percentage\\n\\t */\\n\\tevent ProfitShareUpdate(uint64 ownerId, uint256 prevShare, uint256 profitShare);\\n\\n\\t/**\\n\\t * @notice Emitted when admin fee is updated\\n\\t * @param adminFee New admin fee\\n\\t */\\n\\tevent UpdateAdminFee(uint256 adminFee);\\n\\n\\t/**\\n\\t * @notice Emitted when base profit sharing is updated\\n\\t * @param profitShare New base profit sharing ratio\\n\\t */\\n\\tevent UpdateBaseProfitShare(uint256 profitShare);\\n\\n\\t/**\\n\\t * @notice Emitted when liquidity cap is updated\\n\\t * @param cap New liquidity cap\\n\\t */\\n\\tevent UpdateLiquidityCap(uint256 cap);\\n\\n\\t/**\\n\\t * @notice Emitted when withdrawals are activated\\n\\t */\\n\\tevent WithdrawalsActivated();\\n\\n\\t/**\\n\\t * @dev Updates profit sharing requirements for SP with `_ownerId` by `_profitShare` percentage at `_pool`\\n\\t * @notice Only triggered by Liquid Staking admin or registry contract while registering SP\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _profitShare Percentage of profit sharing\\n\\t * @param _pool Address of liquid staking pool\\n\\t */\\n\\tfunction updateProfitShare(uint64 _ownerId, uint256 _profitShare, address _pool) external;\\n\\n\\t/**\\n\\t * @notice Updates admin fee for the protocol revenue\\n\\t * @param fee New admin fee\\n\\t * @dev Make sure that admin fee is not greater than 20%\\n\\t */\\n\\tfunction updateAdminFee(uint256 fee) external;\\n\\n\\t/**\\n\\t * @notice Updates base profit sharing ratio\\n\\t * @param share New base profit sharing ratio\\n\\t * @dev Make sure that profit sharing is not greater than 80%\\n\\t */\\n\\tfunction updateBaseProfitShare(uint256 share) external;\\n\\n\\t/**\\n\\t * @notice Returns total amount of fees held by LSP for a specific SP with `_ownerId`\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _pool Liquid Staking contract address\\n\\t */\\n\\tfunction totalFees(uint64 _ownerId, address _pool) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Updates liquidity cap for liquid staking protocol\\n\\t * @param cap New admin liquidity cap\\n\\t * @dev Make sure that new liquidity cap is not equal and higher than the prevous cap\\n\\t */\\n\\tfunction updateLiquidityCap(uint256 cap) external;\\n\\n\\t/**\\n\\t * @notice Activates withdrawals for liquid staking protocol\\n\\t * @dev This is a one way transaction that needs to take place after the initial activation period\\n\\t */\\n\\tfunction activateWithdrawals() external;\\n\\n\\t/**\\n\\t * @notice Returns the liquidity cap for Liquid Staking\\n\\t */\\n\\tfunction liquidityCap() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Returns wether witdrawals are activated\\n\\t */\\n\\tfunction withdrawalsActivated() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9a2c25bd1533cc2fda853eca2d9e34fdc303c8e58e6758af337f28187ebcddb5\",\"license\":\"MIT\"},\"contracts/interfaces/IResolverClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IResolverClient {\\n\\t/**\\n\\t * @notice Returns an address of a Storage Provider Registry contract\\n\\t */\\n\\tfunction getRegistry() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns an address of a Storage Provider Collateral contract\\n\\t */\\n\\tfunction getCollateral() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns an address of a Liquid Staking contract\\n\\t */\\n\\tfunction getLiquidStaking() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns an address of a Liquid Staking Controller contract\\n\\t */\\n\\tfunction getLiquidStakingController() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns an address of a Reward Collector contract\\n\\t */\\n\\tfunction getRewardCollector() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns a Protocol Rewards address\\n\\t */\\n\\tfunction getProtocolRewards() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1d79881a8d747da13f8b2f0d01e1b585530d1da35bbb24eea6093e6081559e20\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051611e5261004c60003960008181610561015281816105a10152818161081c0152818161085c01526108d40152611e526000f3fe60806040526004361061011b5760003560e01c806301ffc9a71461012057806306667cf414610156578063248a9ca3146101785780632f2ff15d146101a55780632f5fe2de146101c557806336568abe146101db5780633659cfe6146101fb57806345d2252b1461021b5780634894f2081461023b5780634f1ef2861461025b57806352d1902d1461026e57806354fd4d501461028357806376687d3d146102b45780637e061252146102ca57806391d14854146102ea578063a0be06f91461030a578063a217fddf14610320578063a41c8db014610335578063aaf10f4214610355578063acae275814610377578063c8c7624314610397578063cff1b6ef146103ac578063d547741f146103cc578063fc8894ce146103ec575b600080fd5b34801561012c57600080fd5b5061014061013b3660046113ac565b610406565b60405161014d91906113d7565b60405180910390f35b34801561016257600080fd5b506101766101713660046113f6565b61043d565b005b34801561018457600080fd5b506101986101933660046113f6565b6104e2565b60405161014d919061141d565b3480156101b157600080fd5b506101766101c0366004611450565b6104f7565b3480156101d157600080fd5b5061019860fc5481565b3480156101e757600080fd5b506101766101f6366004611450565b610518565b34801561020757600080fd5b5061017661021636600461148d565b610557565b34801561022757600080fd5b506101766102363660046114c8565b61061f565b34801561024757600080fd5b50610198610256366004611518565b6107df565b61017661026936600461163f565b610812565b34801561027a57600080fd5b506101986108c7565b34801561028f57600080fd5b506040805180820182526002815261763160f01b6020820152905161014d91906116e4565b3480156102c057600080fd5b5061019860fd5481565b3480156102d657600080fd5b506101986102e5366004611518565b610924565b3480156102f657600080fd5b50610140610305366004611450565b61094b565b34801561031657600080fd5b5061019860fb5481565b34801561032c57600080fd5b50610198600081565b34801561034157600080fd5b506101766103503660046113f6565b610976565b34801561036157600080fd5b5061036a610a18565b60405161014d91906116fe565b34801561038357600080fd5b5061017661039236600461171f565b610a27565b3480156103a357600080fd5b50610176610bb2565b3480156103b857600080fd5b506101766103c73660046113f6565b610c43565b3480156103d857600080fd5b506101766103e7366004611450565b610cdc565b3480156103f857600080fd5b5060fe546101409060ff1681565b60006001600160e01b03198216637965db0b60e01b148061043757506301ffc9a760e01b6001600160e01b03198316145b92915050565b610455600080516020611dfd8339815191523361094b565b61047257604051633006171960e21b815260040160405180910390fd5b600081118015610484575060fd548111155b156104a257604051635435b28960e11b815260040160405180910390fd5b60fd8190556040517f782d45b27db81dc2e649e3b4d218938507eea0ca083723872dd11e849d218a24906104d790839061141d565b60405180910390a150565b60009081526065602052604090206001015490565b610500826104e2565b61050981610cf8565b6105138383610d02565b505050565b6001600160a01b03811633146105495760405162461bcd60e51b8152600401610540906117e6565b60405180910390fd5b6105538282610d88565b5050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361059f5760405162461bcd60e51b81526004016105409061182d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105d1610def565b6001600160a01b0316146105f75760405162461bcd60e51b815260040161054090611874565b61060081610e0b565b6040805160008082526020820190925261061c91839190610e40565b50565b610637600080516020611dfd8339815191523361094b565b1580156106cc575060fe60019054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b6919061188f565b6001600160a01b0316336001600160a01b031614155b156106ea57604051633006171960e21b815260040160405180910390fd5b600083826040516020016106ff9291906118f6565b604051602081830303815290604052805190602001209050826000036107605760fc54600082815260ff602052604080822083905551600080516020611d7683398151915292610753928892909190611943565b60405180910390a16107d9565b600081815260ff6020526040902054611f4084118061077e57508084145b1561079c57604051635435b28960e11b815260040160405180910390fd5b600082815260ff60205260409081902085905551600080516020611d76833981519152906107cf9087908490889061196b565b60405180910390a1505b50505050565b600060fb5460ff60006107f28686610f22565b81526020019081526020016000205461080b919061199c565b9392505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361085a5760405162461bcd60e51b81526004016105409061182d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661088c610def565b6001600160a01b0316146108b25760405162461bcd60e51b815260040161054090611874565b6108bb82610e0b565b61055382826001610e40565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109115760405162461bcd60e51b815260040161054090611a04565b50600080516020611db683398151915290565b600060ff60006109348585610f22565b815260200190815260200160002054905092915050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61098e600080516020611dfd8339815191523361094b565b6109ab57604051633006171960e21b815260040160405180910390fd5b611f408111806109b9575080155b806109c5575060fc5481145b156109e357604051635435b28960e11b815260040160405180910390fd5b60fc8190556040517f58b30063619e1466be35a635d1039964daf50a0007199680346dc2418258988d906104d790839061141d565b6000610a22610def565b905090565b600054610100900460ff1615808015610a475750600054600160ff909116105b80610a685750610a5630610f55565b158015610a68575060005460ff166001145b610a845760405162461bcd60e51b815260040161054090611a5f565b6000805460ff191660011790558015610aa7576000805461ff0019166101001790555b610aaf610f64565b610ab7610f64565b6107d0861180610ac85750611f4085115b15610ae657604051635435b28960e11b815260040160405180910390fd5b60fb86905560fc85905560fd83905560fe80546001600160a81b031916831515610100600160a81b031916176101006001600160a01b03871602179055610b2e600033610f8d565b610b46600080516020611dfd833981519152336104f7565b610b5f600080516020611dfd8339815191526000610f97565b8015610baa576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890610ba190600190611a83565b60405180910390a15b505050505050565b610bca600080516020611dfd8339815191523361094b565b610be757604051633006171960e21b815260040160405180910390fd5b60fe5460ff1615610c0b57604051635435b28960e11b815260040160405180910390fd5b60fe805460ff191660011790556040517f12077f0b1eb3caac626caf716692ef1d49e092fc41004414e4cc428168e0057c90600090a1565b610c5b600080516020611dfd8339815191523361094b565b610c7857604051633006171960e21b815260040160405180910390fd5b6107d0811180610c89575060fb5481145b15610ca757604051635435b28960e11b815260040160405180910390fd5b60fb8190556040517f77d4f2c15f544d8498b315fe67fd998d2b98b72a692adfb0e2eb0eced520a9b7906104d790839061141d565b610ce5826104e2565b610cee81610cf8565b6105138383610d88565b61061c8133610fea565b610d0c828261094b565b6105535760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610d443390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610d92828261094b565b156105535760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020611db6833981519152546001600160a01b031690565b610e23600080516020611dfd8339815191523361094b565b61061c57604051633006171960e21b815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610e735761051383611043565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610ecd575060408051601f3d908101601f19168201909252610eca91810190611a9c565b60015b610ee95760405162461bcd60e51b815260040161054090611b08565b600080516020611db68339815191528114610f165760405162461bcd60e51b815260040161054090611b5e565b50610513838383611097565b60008282604051602001610f379291906118f6565b60405160208183030381529060405280519060200120905092915050565b6001600160a01b03163b151590565b600054610100900460ff16610f8b5760405162461bcd60e51b815260040161054090611bb6565b565b6105538282610d02565b6000610fa2836104e2565b600084815260656020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b610ff4828261094b565b61055357611001816110bc565b61100c8360206110ce565b60405160200161101d929190611be8565b60408051601f198184030181529082905262461bcd60e51b8252610540916004016116e4565b61104c81610f55565b6110685760405162461bcd60e51b815260040161054090611c84565b600080516020611db683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6110a083611239565b6000825111806110ad5750805b15610513576107d98383611279565b60606104376001600160a01b03831660145b606060006110dd836002611c94565b6110e890600261199c565b6001600160401b038111156110ff576110ff611544565b6040519080825280601f01601f191660200182016040528015611129576020820181803683370190505b509050600360fc1b8160008151811061114457611144611cb3565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061117357611173611cb3565b60200101906001600160f81b031916908160001a9053506000611197846002611c94565b6111a290600161199c565b90505b600181111561121a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106111d6576111d6611cb3565b1a60f81b8282815181106111ec576111ec611cb3565b60200101906001600160f81b031916908160001a90535060049490941c9361121381611cc9565b90506111a5565b50831561080b5760405162461bcd60e51b815260040161054090611d15565b61124281611043565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061080b8383604051806060016040528060278152602001611dd6602791396060600080856001600160a01b0316856040516112b69190611d25565b600060405180830381855af49150503d80600081146112f1576040519150601f19603f3d011682016040523d82523d6000602084013e6112f6565b606091505b509150915061130786838387611311565b9695505050505050565b6060831561134e5782516000036113475761132b85610f55565b6113475760405162461bcd60e51b815260040161054090611d65565b5081611358565b6113588383611360565b949350505050565b8151156113705781518083602001fd5b8060405162461bcd60e51b815260040161054091906116e4565b6001600160e01b031981165b811461061c57600080fd5b80356104378161138a565b6000602082840312156113c1576113c1600080fd5b600061135884846113a1565b8015155b82525050565b6020810161043782846113cd565b80611396565b8035610437816113e5565b60006020828403121561140b5761140b600080fd5b600061135884846113eb565b806113d1565b602081016104378284611417565b60006001600160a01b038216610437565b6113968161142b565b80356104378161143c565b6000806040838503121561146657611466600080fd5b600061147285856113eb565b925050602061148385828601611445565b9150509250929050565b6000602082840312156114a2576114a2600080fd5b60006113588484611445565b6001600160401b038116611396565b8035610437816114ae565b6000806000606084860312156114e0576114e0600080fd5b60006114ec86866114bd565b93505060206114fd868287016113eb565b925050604061150e86828701611445565b9150509250925092565b6000806040838503121561152e5761152e600080fd5b600061147285856114bd565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b6115638261153a565b81018181106001600160401b038211171561158057611580611544565b6040525050565b600061159260405190565b905061159e828261155a565b919050565b60006001600160401b038211156115bc576115bc611544565b6115c58261153a565b60200192915050565b82818337506000910152565b60006115ed6115e8846115a3565b611587565b90508281526020810184848401111561160857611608600080fd5b6116138482856115ce565b509392505050565b600082601f83011261162f5761162f600080fd5b81356113588482602086016115da565b6000806040838503121561165557611655600080fd5b60006116618585611445565b92505060208301356001600160401b0381111561168057611680600080fd5b6114838582860161161b565b60005b838110156116a757818101518382015260200161168f565b50506000910152565b60006116ba825190565b8084526020840193506116d181856020860161168c565b6116da8161153a565b9093019392505050565b6020808252810161080b81846116b0565b6113d18161142b565b6020810161043782846116f5565b801515611396565b80356104378161170c565b600080600080600060a0868803121561173a5761173a600080fd5b600061174688886113eb565b9550506020611757888289016113eb565b945050604061176888828901611445565b9350506060611779888289016113eb565b925050608061178a88828901611714565b9150509295509295909350565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b602082015291505b5060400190565b6020808252810161043781611797565b602c8152600060208201600080516020611d9683398151915281526b19195b1959d85d1958d85b1b60a21b602082015291506117df565b60208082528101610437816117f6565b602c8152600060208201600080516020611d9683398151915281526b6163746976652070726f787960a01b602082015291506117df565b602080825281016104378161183d565b80516104378161143c565b6000602082840312156118a4576118a4600080fd5b60006113588484611884565b60006104378260c01b90565b6113d16001600160401b0382166118b0565b60006104378260601b90565b6000610437826118ce565b6113d16118f18261142b565b6118da565b600061190282856118bc565b60088201915061191282846118e5565b5060140192915050565b6001600160401b0381166113d1565b60006104376119378381565b90565b6113d18161192b565b60608101611951828661191c565b61195e602083018561193a565b6113586040830184611417565b60608101611979828661191c565b61195e6020830185611417565b634e487b7160e01b600052601160045260246000fd5b8082018082111561043757610437611986565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b602082015291506117df565b60208082528101610437816119af565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291506117df565b6020808252810161043781611a14565b600060ff8216610437565b6113d181611a6f565b602081016104378284611a7a565b8051610437816113e5565b600060208284031215611ab157611ab1600080fd5b60006113588484611a91565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b602082015291506117df565b6020808252810161043781611abd565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b602082015291506117df565b6020808252810161043781611b18565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b602082015291506117df565b6020808252810161043781611b6e565b6000611bd0825190565b611bde81856020860161168c565b9290920192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526017016000611c148285611bc6565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110191506113588284611bc6565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b602082015291506117df565b6020808252810161043781611c3a565b818102808215838204851417611cac57611cac611986565b5092915050565b634e487b7160e01b600052603260045260246000fd5b600081611cd857611cd8611986565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260005b5060200190565b6020808252810161043781611ce0565b600061080b8284611bc6565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150611d0e565b6020808252810161043781611d3156fe59f0a5f4bb5b24cec88f1c296d6ac8bd6da5d5fd175ea0549d17f43082c470ea46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ebd0e6082671a30155ef8f798e93425787f4f845cb16c2cd963888c943c6d5e5a2646970667358221220627640ea16e100a7cb91621e389c21b577e08067b2850c1d5e11619e23a6798164736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061011b5760003560e01c806301ffc9a71461012057806306667cf414610156578063248a9ca3146101785780632f2ff15d146101a55780632f5fe2de146101c557806336568abe146101db5780633659cfe6146101fb57806345d2252b1461021b5780634894f2081461023b5780634f1ef2861461025b57806352d1902d1461026e57806354fd4d501461028357806376687d3d146102b45780637e061252146102ca57806391d14854146102ea578063a0be06f91461030a578063a217fddf14610320578063a41c8db014610335578063aaf10f4214610355578063acae275814610377578063c8c7624314610397578063cff1b6ef146103ac578063d547741f146103cc578063fc8894ce146103ec575b600080fd5b34801561012c57600080fd5b5061014061013b3660046113ac565b610406565b60405161014d91906113d7565b60405180910390f35b34801561016257600080fd5b506101766101713660046113f6565b61043d565b005b34801561018457600080fd5b506101986101933660046113f6565b6104e2565b60405161014d919061141d565b3480156101b157600080fd5b506101766101c0366004611450565b6104f7565b3480156101d157600080fd5b5061019860fc5481565b3480156101e757600080fd5b506101766101f6366004611450565b610518565b34801561020757600080fd5b5061017661021636600461148d565b610557565b34801561022757600080fd5b506101766102363660046114c8565b61061f565b34801561024757600080fd5b50610198610256366004611518565b6107df565b61017661026936600461163f565b610812565b34801561027a57600080fd5b506101986108c7565b34801561028f57600080fd5b506040805180820182526002815261763160f01b6020820152905161014d91906116e4565b3480156102c057600080fd5b5061019860fd5481565b3480156102d657600080fd5b506101986102e5366004611518565b610924565b3480156102f657600080fd5b50610140610305366004611450565b61094b565b34801561031657600080fd5b5061019860fb5481565b34801561032c57600080fd5b50610198600081565b34801561034157600080fd5b506101766103503660046113f6565b610976565b34801561036157600080fd5b5061036a610a18565b60405161014d91906116fe565b34801561038357600080fd5b5061017661039236600461171f565b610a27565b3480156103a357600080fd5b50610176610bb2565b3480156103b857600080fd5b506101766103c73660046113f6565b610c43565b3480156103d857600080fd5b506101766103e7366004611450565b610cdc565b3480156103f857600080fd5b5060fe546101409060ff1681565b60006001600160e01b03198216637965db0b60e01b148061043757506301ffc9a760e01b6001600160e01b03198316145b92915050565b610455600080516020611dfd8339815191523361094b565b61047257604051633006171960e21b815260040160405180910390fd5b600081118015610484575060fd548111155b156104a257604051635435b28960e11b815260040160405180910390fd5b60fd8190556040517f782d45b27db81dc2e649e3b4d218938507eea0ca083723872dd11e849d218a24906104d790839061141d565b60405180910390a150565b60009081526065602052604090206001015490565b610500826104e2565b61050981610cf8565b6105138383610d02565b505050565b6001600160a01b03811633146105495760405162461bcd60e51b8152600401610540906117e6565b60405180910390fd5b6105538282610d88565b5050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361059f5760405162461bcd60e51b81526004016105409061182d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105d1610def565b6001600160a01b0316146105f75760405162461bcd60e51b815260040161054090611874565b61060081610e0b565b6040805160008082526020820190925261061c91839190610e40565b50565b610637600080516020611dfd8339815191523361094b565b1580156106cc575060fe60019054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b6919061188f565b6001600160a01b0316336001600160a01b031614155b156106ea57604051633006171960e21b815260040160405180910390fd5b600083826040516020016106ff9291906118f6565b604051602081830303815290604052805190602001209050826000036107605760fc54600082815260ff602052604080822083905551600080516020611d7683398151915292610753928892909190611943565b60405180910390a16107d9565b600081815260ff6020526040902054611f4084118061077e57508084145b1561079c57604051635435b28960e11b815260040160405180910390fd5b600082815260ff60205260409081902085905551600080516020611d76833981519152906107cf9087908490889061196b565b60405180910390a1505b50505050565b600060fb5460ff60006107f28686610f22565b81526020019081526020016000205461080b919061199c565b9392505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361085a5760405162461bcd60e51b81526004016105409061182d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661088c610def565b6001600160a01b0316146108b25760405162461bcd60e51b815260040161054090611874565b6108bb82610e0b565b61055382826001610e40565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109115760405162461bcd60e51b815260040161054090611a04565b50600080516020611db683398151915290565b600060ff60006109348585610f22565b815260200190815260200160002054905092915050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61098e600080516020611dfd8339815191523361094b565b6109ab57604051633006171960e21b815260040160405180910390fd5b611f408111806109b9575080155b806109c5575060fc5481145b156109e357604051635435b28960e11b815260040160405180910390fd5b60fc8190556040517f58b30063619e1466be35a635d1039964daf50a0007199680346dc2418258988d906104d790839061141d565b6000610a22610def565b905090565b600054610100900460ff1615808015610a475750600054600160ff909116105b80610a685750610a5630610f55565b158015610a68575060005460ff166001145b610a845760405162461bcd60e51b815260040161054090611a5f565b6000805460ff191660011790558015610aa7576000805461ff0019166101001790555b610aaf610f64565b610ab7610f64565b6107d0861180610ac85750611f4085115b15610ae657604051635435b28960e11b815260040160405180910390fd5b60fb86905560fc85905560fd83905560fe80546001600160a81b031916831515610100600160a81b031916176101006001600160a01b03871602179055610b2e600033610f8d565b610b46600080516020611dfd833981519152336104f7565b610b5f600080516020611dfd8339815191526000610f97565b8015610baa576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890610ba190600190611a83565b60405180910390a15b505050505050565b610bca600080516020611dfd8339815191523361094b565b610be757604051633006171960e21b815260040160405180910390fd5b60fe5460ff1615610c0b57604051635435b28960e11b815260040160405180910390fd5b60fe805460ff191660011790556040517f12077f0b1eb3caac626caf716692ef1d49e092fc41004414e4cc428168e0057c90600090a1565b610c5b600080516020611dfd8339815191523361094b565b610c7857604051633006171960e21b815260040160405180910390fd5b6107d0811180610c89575060fb5481145b15610ca757604051635435b28960e11b815260040160405180910390fd5b60fb8190556040517f77d4f2c15f544d8498b315fe67fd998d2b98b72a692adfb0e2eb0eced520a9b7906104d790839061141d565b610ce5826104e2565b610cee81610cf8565b6105138383610d88565b61061c8133610fea565b610d0c828261094b565b6105535760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610d443390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610d92828261094b565b156105535760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020611db6833981519152546001600160a01b031690565b610e23600080516020611dfd8339815191523361094b565b61061c57604051633006171960e21b815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610e735761051383611043565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610ecd575060408051601f3d908101601f19168201909252610eca91810190611a9c565b60015b610ee95760405162461bcd60e51b815260040161054090611b08565b600080516020611db68339815191528114610f165760405162461bcd60e51b815260040161054090611b5e565b50610513838383611097565b60008282604051602001610f379291906118f6565b60405160208183030381529060405280519060200120905092915050565b6001600160a01b03163b151590565b600054610100900460ff16610f8b5760405162461bcd60e51b815260040161054090611bb6565b565b6105538282610d02565b6000610fa2836104e2565b600084815260656020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b610ff4828261094b565b61055357611001816110bc565b61100c8360206110ce565b60405160200161101d929190611be8565b60408051601f198184030181529082905262461bcd60e51b8252610540916004016116e4565b61104c81610f55565b6110685760405162461bcd60e51b815260040161054090611c84565b600080516020611db683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6110a083611239565b6000825111806110ad5750805b15610513576107d98383611279565b60606104376001600160a01b03831660145b606060006110dd836002611c94565b6110e890600261199c565b6001600160401b038111156110ff576110ff611544565b6040519080825280601f01601f191660200182016040528015611129576020820181803683370190505b509050600360fc1b8160008151811061114457611144611cb3565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061117357611173611cb3565b60200101906001600160f81b031916908160001a9053506000611197846002611c94565b6111a290600161199c565b90505b600181111561121a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106111d6576111d6611cb3565b1a60f81b8282815181106111ec576111ec611cb3565b60200101906001600160f81b031916908160001a90535060049490941c9361121381611cc9565b90506111a5565b50831561080b5760405162461bcd60e51b815260040161054090611d15565b61124281611043565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061080b8383604051806060016040528060278152602001611dd6602791396060600080856001600160a01b0316856040516112b69190611d25565b600060405180830381855af49150503d80600081146112f1576040519150601f19603f3d011682016040523d82523d6000602084013e6112f6565b606091505b509150915061130786838387611311565b9695505050505050565b6060831561134e5782516000036113475761132b85610f55565b6113475760405162461bcd60e51b815260040161054090611d65565b5081611358565b6113588383611360565b949350505050565b8151156113705781518083602001fd5b8060405162461bcd60e51b815260040161054091906116e4565b6001600160e01b031981165b811461061c57600080fd5b80356104378161138a565b6000602082840312156113c1576113c1600080fd5b600061135884846113a1565b8015155b82525050565b6020810161043782846113cd565b80611396565b8035610437816113e5565b60006020828403121561140b5761140b600080fd5b600061135884846113eb565b806113d1565b602081016104378284611417565b60006001600160a01b038216610437565b6113968161142b565b80356104378161143c565b6000806040838503121561146657611466600080fd5b600061147285856113eb565b925050602061148385828601611445565b9150509250929050565b6000602082840312156114a2576114a2600080fd5b60006113588484611445565b6001600160401b038116611396565b8035610437816114ae565b6000806000606084860312156114e0576114e0600080fd5b60006114ec86866114bd565b93505060206114fd868287016113eb565b925050604061150e86828701611445565b9150509250925092565b6000806040838503121561152e5761152e600080fd5b600061147285856114bd565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b6115638261153a565b81018181106001600160401b038211171561158057611580611544565b6040525050565b600061159260405190565b905061159e828261155a565b919050565b60006001600160401b038211156115bc576115bc611544565b6115c58261153a565b60200192915050565b82818337506000910152565b60006115ed6115e8846115a3565b611587565b90508281526020810184848401111561160857611608600080fd5b6116138482856115ce565b509392505050565b600082601f83011261162f5761162f600080fd5b81356113588482602086016115da565b6000806040838503121561165557611655600080fd5b60006116618585611445565b92505060208301356001600160401b0381111561168057611680600080fd5b6114838582860161161b565b60005b838110156116a757818101518382015260200161168f565b50506000910152565b60006116ba825190565b8084526020840193506116d181856020860161168c565b6116da8161153a565b9093019392505050565b6020808252810161080b81846116b0565b6113d18161142b565b6020810161043782846116f5565b801515611396565b80356104378161170c565b600080600080600060a0868803121561173a5761173a600080fd5b600061174688886113eb565b9550506020611757888289016113eb565b945050604061176888828901611445565b9350506060611779888289016113eb565b925050608061178a88828901611714565b9150509295509295909350565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b602082015291505b5060400190565b6020808252810161043781611797565b602c8152600060208201600080516020611d9683398151915281526b19195b1959d85d1958d85b1b60a21b602082015291506117df565b60208082528101610437816117f6565b602c8152600060208201600080516020611d9683398151915281526b6163746976652070726f787960a01b602082015291506117df565b602080825281016104378161183d565b80516104378161143c565b6000602082840312156118a4576118a4600080fd5b60006113588484611884565b60006104378260c01b90565b6113d16001600160401b0382166118b0565b60006104378260601b90565b6000610437826118ce565b6113d16118f18261142b565b6118da565b600061190282856118bc565b60088201915061191282846118e5565b5060140192915050565b6001600160401b0381166113d1565b60006104376119378381565b90565b6113d18161192b565b60608101611951828661191c565b61195e602083018561193a565b6113586040830184611417565b60608101611979828661191c565b61195e6020830185611417565b634e487b7160e01b600052601160045260246000fd5b8082018082111561043757610437611986565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b602082015291506117df565b60208082528101610437816119af565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291506117df565b6020808252810161043781611a14565b600060ff8216610437565b6113d181611a6f565b602081016104378284611a7a565b8051610437816113e5565b600060208284031215611ab157611ab1600080fd5b60006113588484611a91565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b602082015291506117df565b6020808252810161043781611abd565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b602082015291506117df565b6020808252810161043781611b18565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b602082015291506117df565b6020808252810161043781611b6e565b6000611bd0825190565b611bde81856020860161168c565b9290920192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526017016000611c148285611bc6565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110191506113588284611bc6565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b602082015291506117df565b6020808252810161043781611c3a565b818102808215838204851417611cac57611cac611986565b5092915050565b634e487b7160e01b600052603260045260246000fd5b600081611cd857611cd8611986565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260005b5060200190565b6020808252810161043781611ce0565b600061080b8284611bc6565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150611d0e565b6020808252810161043781611d3156fe59f0a5f4bb5b24cec88f1c296d6ac8bd6da5d5fd175ea0549d17f43082c470ea46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ebd0e6082671a30155ef8f798e93425787f4f845cb16c2cd963888c943c6d5e5a2646970667358221220627640ea16e100a7cb91621e389c21b577e08067b2850c1d5e11619e23a6798164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activateWithdrawals()": {
        "details": "This is a one way transaction that needs to take place after the initial activation period"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(uint256,uint256,address,uint256,bool)": {
        "details": "Contract initializer function.",
        "params": {
          "_adminFee": "Admin fee percentage",
          "_baseProfitShare": "Base profit sharing percentage"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalFees(uint64,address)": {
        "params": {
          "_ownerId": "Storage Provider owner ID",
          "_pool": "Liquid Staking contract address"
        }
      },
      "updateAdminFee(uint256)": {
        "details": "Make sure that admin fee is not greater than 20%",
        "params": {
          "fee": "New admin fee"
        }
      },
      "updateBaseProfitShare(uint256)": {
        "details": "Make sure that profit sharing is not greater than 80%",
        "params": {
          "share": "New base profit sharing ratio"
        }
      },
      "updateLiquidityCap(uint256)": {
        "details": "Make sure that new liquidity cap is not equal and higher than the prevous cap",
        "params": {
          "cap": "New admin liquidity cap"
        }
      },
      "updateProfitShare(uint64,uint256,address)": {
        "details": "Updates profit sharing requirements for SP with `_ownerId` by `_profitShare` percentage",
        "params": {
          "_ownerId": "Storage provider owner ID",
          "_pool": "Address of liquid staking pool",
          "_profitShare": "Percentage of profit sharing"
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "LiquidStaking Controller allows to manage the parameters of Liquid Staking contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ProfitShareUpdate(uint64,uint256,uint256)": {
        "notice": "Emitted when profit sharing is update for SP"
      },
      "UpdateAdminFee(uint256)": {
        "notice": "Emitted when admin fee is updated"
      },
      "UpdateBaseProfitShare(uint256)": {
        "notice": "Emitted when base profit sharing is updated"
      },
      "UpdateLiquidityCap(uint256)": {
        "notice": "Emitted when liquidity cap is updated"
      },
      "WithdrawalsActivated()": {
        "notice": "Emitted when withdrawals are activated"
      }
    },
    "kind": "user",
    "methods": {
      "activateWithdrawals()": {
        "notice": "Activates withdrawals for liquid staking protocol"
      },
      "getImplementation()": {
        "notice": "Returns the implementation contract"
      },
      "getProfitShares(uint64,address)": {
        "notice": "Returns the profit share for SP at the specific `_pool` by `_ownerId`"
      },
      "liquidityCap()": {
        "notice": "Returns the liquidity cap for Liquid Staking"
      },
      "totalFees(uint64,address)": {
        "notice": "Returns total amount of fees held by LSP for a specific SP with `_ownerId`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Updates admin fee for the protocol revenue"
      },
      "updateBaseProfitShare(uint256)": {
        "notice": "Updates base profit sharing ratio"
      },
      "updateLiquidityCap(uint256)": {
        "notice": "Updates liquidity cap for liquid staking protocol"
      },
      "updateProfitShare(uint64,uint256,address)": {
        "notice": "Only triggered by Liquid Staking admin or registry contract while registering SP"
      },
      "version()": {
        "notice": "Returns the version of clFIL token contract"
      },
      "withdrawalsActivated()": {
        "notice": "Returns wether witdrawals are activated"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16433,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 16436,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18313,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18696,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15392,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)15387_storage)"
      },
      {
        "astId": 15687,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16415,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16730,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 910,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "adminFee",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 912,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "baseProfitShare",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 914,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "liquidityCap",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 916,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "withdrawalsActivated",
        "offset": 0,
        "slot": "254",
        "type": "t_bool"
      },
      {
        "astId": 919,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "resolver",
        "offset": 1,
        "slot": "254",
        "type": "t_contract(IResolverClient)6057"
      },
      {
        "astId": 923,
        "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
        "label": "profitShares",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IResolverClient)6057": {
        "encoding": "inplace",
        "label": "contract IResolverClient",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)15387_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)15387_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)15387_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 15384,
            "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 15386,
            "contract": "contracts/LiquidStakingController.sol:LiquidStakingController",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}