{
  "address": "0x3D52874772C66466c93E36cc3782946fd0FA7666",
  "abi": [
    {
      "inputs": [],
      "name": "AllocationOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InactiveActor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InactivePool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InactiveSP",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InactiveSlashing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        }
      ],
      "name": "ReportRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashingAmount",
          "type": "uint256"
        }
      ],
      "name": "ReportSlashing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "SetRegistryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StorageProviderCollateralDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "availableCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isUnlock",
          "type": "bool"
        }
      ],
      "name": "StorageProviderCollateralRebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashingAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "StorageProviderCollateralSlash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevRequirements",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requirements",
          "type": "uint256"
        }
      ],
      "name": "StorageProviderCollateralUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StorageProviderCollateralWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseCollateralRequirements",
          "type": "uint256"
        }
      ],
      "name": "UpdateBaseCollateralRequirements",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WFIL",
      "outputs": [
        {
          "internalType": "contract IWFIL",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "activeSlashings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseRequirements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "collateralRequirements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "collaterals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "availableCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedCollateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        }
      ],
      "name": "fit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        }
      ],
      "name": "getAvailableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        }
      ],
      "name": "getCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        }
      ],
      "name": "getCollateralRequirements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        }
      ],
      "name": "getDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        }
      ],
      "name": "getLockedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWFIL",
          "name": "_wFIL",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseRequirements",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_minerId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_allocated",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        }
      ],
      "name": "reportRecovery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_slashingAmt",
          "type": "uint256"
        }
      ],
      "name": "reportSlashing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "slashings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requirements",
          "type": "uint256"
        }
      ],
      "name": "updateBaseCollateralRequirements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "requirements",
          "type": "uint256"
        }
      ],
      "name": "updateCollateralRequirements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "05b76b7a0e8a6fda74467c296a8f93e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AllocationOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InactiveActor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InactivePool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InactiveSP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InactiveSlashing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"}],\"name\":\"ReportRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashingAmount\",\"type\":\"uint256\"}],\"name\":\"ReportSlashing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"SetRegistryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StorageProviderCollateralDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUnlock\",\"type\":\"bool\"}],\"name\":\"StorageProviderCollateralRebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashingAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"StorageProviderCollateralSlash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevRequirements\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requirements\",\"type\":\"uint256\"}],\"name\":\"StorageProviderCollateralUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StorageProviderCollateralWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseCollateralRequirements\",\"type\":\"uint256\"}],\"name\":\"UpdateBaseCollateralRequirements\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WFIL\",\"outputs\":[{\"internalType\":\"contract IWFIL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"activeSlashings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRequirements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"collateralRequirements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"}],\"name\":\"fit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"}],\"name\":\"getAvailableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"}],\"name\":\"getCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"}],\"name\":\"getCollateralRequirements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"}],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"}],\"name\":\"getLockedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWFIL\",\"name\":\"_wFIL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseRequirements\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_minerId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_allocated\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"}],\"name\":\"reportRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_slashingAmt\",\"type\":\"uint256\"}],\"name\":\"reportSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"slashings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requirements\",\"type\":\"uint256\"}],\"name\":\"updateBaseCollateralRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"requirements\",\"type\":\"uint256\"}],\"name\":\"updateCollateralRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit()\":{\"details\":\"Deposit `msg.value` FIL funds by the msg.sender into collateral\"},\"fit(uint64)\":{\"details\":\"Fits collateral amounts based on SP pledge usage, distributed rewards and pledge paybacks\",\"params\":{\"_ownerId\":\"Storage provider owner ID\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256)\":{\"details\":\"Contract initializer function.\",\"params\":{\"_baseRequirements\":\"Base collateral requirements for SPs\",\"_resolver\":\"Resolver contract implementation\",\"_wFIL\":\"WFIL token implementation\"}},\"lock(uint64,uint64,uint256)\":{\"details\":\"Locks required collateral amount based on `_allocated` FIL to pledge\",\"params\":{\"_allocated\":\"FIL amount that is going to be pledged for Storage Provider\",\"_minerId\":\"Storage provider miner ID\",\"_ownerId\":\"Storage provider owner ID\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"reportRecovery(uint64)\":{\"params\":{\"_ownerId\":\"Storage provider owner ID\"}},\"reportSlashing(uint64,uint256)\":{\"details\":\"Please note that slashing amount couldn't exceed the total amount of collateral provided by SP. If sector has been slashed for 42 days and automatically terminated both operations would take place after one another: slashing report and initial pledge withdrawal which is the remaining pledge for a terminated sector.\",\"params\":{\"_ownerId\":\"Storage provider owner ID\",\"_slashingAmt\":\"Slashing amount\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateBaseCollateralRequirements(uint256)\":{\"params\":{\"requirements\":\"New base collateral requirements for SP\"}},\"updateCollateralRequirements(uint64,uint256)\":{\"details\":\"Updates collateral requirements for SP with `_ownerId` by `requirements` percentage\",\"params\":{\"_ownerId\":\"Storage provider owner ID\",\"requirements\":\"Percentage of collateral requirements\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint256)\":{\"details\":\"Withdraw `_amount` of FIL funds by the `msg.sender` from the collateral system\"}},\"title\":\"Storage Provider Collateral stores collateral for covering potential slashing risks by SPs (Storage Providers) in liquid staking protocol. The basis coverage is expected to be around 15% of the total FIL allocation requested by SP. Over time as SPs earn FIL rewards, a locked portion of rewards would be exchanged for the collateral provided upfront. Therefore locked SPs collateral becomes accessible for withdrawals by stakers. This mechanism doesn't create additional slashing risks as SPs are slashed by the locked rewards first, making it a good option for collateralization in the system.\",\"version\":1},\"userdoc\":{\"events\":{\"ReportRecovery(uint64)\":{\"notice\":\"Emitted when storage provider has been reported to recover slashed sectors\"},\"ReportSlashing(uint64,uint256)\":{\"notice\":\"Emitted when storage provider has been reported to accure slashing\"}},\"kind\":\"user\",\"methods\":{\"deposit()\":{\"notice\":\"Wrapps of FIL into WFIL token internally\"},\"fit(uint64)\":{\"notice\":\"Rebalances the total locked and available collateral amounts\"},\"getAvailableCollateral(uint64)\":{\"notice\":\"Return Storage Provider Available Collateral information with `_provider` address\"},\"getCollateral(uint64)\":{\"notice\":\"Return Storage Provider Collateral information with `_provider` address\"},\"getCollateralRequirements(uint64)\":{\"notice\":\"Return Storage Provider Collateral requirements for SP with `_ownerId\"},\"getLockedCollateral(uint64)\":{\"notice\":\"Return Storage Provider Locked Collateral information with `_provider` address\"},\"lock(uint64,uint64,uint256)\":{\"notice\":\"Increases the total amount of locked collateral for storage provider\"},\"reportRecovery(uint64)\":{\"notice\":\"Report recovery of previously slashed sectors for SP with `_ownerId`\"},\"reportSlashing(uint64,uint256)\":{\"notice\":\"Report slashing of SP accured on the Filecoin network This function is triggered when SP get continiously slashed by faulting it's sectors\"},\"updateBaseCollateralRequirements(uint256)\":{\"notice\":\"Updates base collateral requirements amount for Storage Providers\"},\"updateCollateralRequirements(uint64,uint256)\":{\"notice\":\"Only triggered by Collateral admin or registry contract while registering SP\"},\"withdraw(uint256)\":{\"notice\":\"Unwraps of FIL into WFIL token internally and delivers maximum amount of FIL available for withdrawal if `_amount` is bigger.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StorageProviderCollateral.sol\":\"StorageProviderCollateral\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363838313831393830343130\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[]},\"sources\":{\"contracts/StorageProviderCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IStorageProviderCollateral} from \\\"./interfaces/IStorageProviderCollateral.sol\\\";\\nimport {IStorageProviderRegistryClient as IRegistryClient} from \\\"./interfaces/IStorageProviderRegistryClient.sol\\\";\\nimport {IResolverClient} from \\\"./interfaces/IResolverClient.sol\\\";\\nimport {IWFIL} from \\\"./libraries/tokens/IWFIL.sol\\\";\\nimport {SafeTransferLib} from \\\"./libraries/SafeTransferLib.sol\\\";\\nimport {Initializable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\\\";\\nimport {FilAddress} from \\\"lib/fevmate/contracts/utils/FilAddress.sol\\\";\\nimport {FixedPointMathLib} from \\\"lib/solmate/src/utils/FixedPointMathLib.sol\\\";\\n\\n/**\\n * @title Storage Provider Collateral stores collateral for covering potential\\n * slashing risks by SPs (Storage Providers) in liquid staking protocol.\\n *\\n * The basis coverage is expected to be around 15% of the total FIL allocation\\n * requested by SP. Over time as SPs earn FIL rewards, a locked portion of rewards\\n * would be exchanged for the collateral provided upfront. Therefore locked SPs\\n * collateral becomes accessible for withdrawals by stakers. This mechanism doesn't\\n * create additional slashing risks as SPs are slashed by the locked rewards first,\\n * making it a good option for collateralization in the system.\\n *\\n */\\ncontract StorageProviderCollateral is\\n\\tIStorageProviderCollateral,\\n\\tInitializable,\\n\\tAccessControlUpgradeable,\\n\\tReentrancyGuardUpgradeable,\\n\\tUUPSUpgradeable\\n{\\n\\tusing SafeTransferLib for address;\\n\\tusing FixedPointMathLib for uint256;\\n\\tusing FilAddress for address;\\n\\n\\terror AllocationOverflow();\\n\\terror InvalidParams();\\n\\terror InactiveActor();\\n\\terror InactiveSP();\\n\\terror InactivePool();\\n\\terror InvalidAccess();\\n\\terror InvalidOwner();\\n\\terror InsufficientFunds();\\n\\terror InsufficientCollateral();\\n\\terror InactiveSlashing();\\n\\n\\t// Mapping of storage provider collateral information to their owner ID\\n\\tmapping(uint64 => SPCollateral) public collaterals;\\n\\n\\t// Mapping of storage provider total slashing amounts to their owner ID\\n\\tmapping(uint64 => uint256) public slashings;\\n\\n\\tmapping(uint64 => uint256) public collateralRequirements;\\n\\n\\t// Mapping of storage providers slashing flags to owner ID\\n\\tmapping(uint64 => bool) public activeSlashings;\\n\\n\\tbytes32 private constant COLLATERAL_ADMIN = keccak256(\\\"COLLATERAL_ADMIN\\\");\\n\\tbytes32 private constant SLASHING_AGENT = keccak256(\\\"SLASHING_AGENT\\\");\\n\\n\\tuint256 public baseRequirements; // Number in basis points (10000 = 100%)\\n\\tuint256 private constant BASIS_POINTS = 10000;\\n\\n\\tIResolverClient internal resolver;\\n\\tIWFIL public WFIL; // WFIL implementation\\n\\n\\t// Storage Provider parameters\\n\\tstruct SPCollateral {\\n\\t\\tuint256 availableCollateral;\\n\\t\\tuint256 lockedCollateral;\\n\\t}\\n\\n\\tmodifier activeStorageProvider(uint64 _minerId) {\\n\\t\\tif (!IRegistryClient(resolver.getRegistry()).isActiveProvider(_minerId)) revert InactiveSP();\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyAdmin() {\\n\\t\\tif (!hasRole(COLLATERAL_ADMIN, msg.sender)) revert InvalidAccess();\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Contract initializer function.\\n\\t * @param _wFIL WFIL token implementation\\n\\t * @param _resolver Resolver contract implementation\\n\\t * @param _baseRequirements Base collateral requirements for SPs\\n\\t */\\n\\tfunction initialize(IWFIL _wFIL, address _resolver, uint256 _baseRequirements) public virtual initializer {\\n\\t\\t__AccessControl_init();\\n\\t\\t__ReentrancyGuard_init();\\n\\t\\t__UUPSUpgradeable_init();\\n\\n\\t\\tWFIL = _wFIL;\\n\\t\\tresolver = IResolverClient(_resolver);\\n\\n\\t\\tif (_baseRequirements == 0 || _baseRequirements > 10000) revert InvalidParams();\\n\\t\\tbaseRequirements = _baseRequirements;\\n\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\t_setRoleAdmin(COLLATERAL_ADMIN, DEFAULT_ADMIN_ROLE);\\n\\t\\tgrantRole(COLLATERAL_ADMIN, msg.sender);\\n\\t\\tgrantRole(SLASHING_AGENT, msg.sender);\\n\\t\\t_setRoleAdmin(SLASHING_AGENT, DEFAULT_ADMIN_ROLE);\\n\\t}\\n\\n\\treceive() external payable virtual {}\\n\\n\\tfallback() external payable virtual {}\\n\\n\\t/**\\n\\t * @dev Deposit `msg.value` FIL funds by the msg.sender into collateral\\n\\t * @notice Wrapps of FIL into WFIL token internally\\n\\t */\\n\\tfunction deposit() public payable nonReentrant {\\n\\t\\tuint256 amount = msg.value;\\n\\t\\tif (amount == 0) revert InvalidParams();\\n\\n\\t\\taddress ownerAddr = msg.sender.normalize();\\n\\t\\t(bool isID, uint64 ownerId) = ownerAddr.getActorID();\\n\\t\\tif (!isID) revert InactiveActor();\\n\\n\\t\\tSPCollateral storage collateral = collaterals[ownerId];\\n\\t\\tcollateral.availableCollateral = collateral.availableCollateral + amount;\\n\\n\\t\\tWFIL.deposit{value: amount}();\\n\\n\\t\\temit StorageProviderCollateralDeposit(ownerId, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraw `_amount` of FIL funds by the `msg.sender` from the collateral system\\n\\t * @notice Unwraps of FIL into WFIL token internally and\\n\\t * delivers maximum amount of FIL available for withdrawal if `_amount` is bigger.\\n\\t */\\n\\tfunction withdraw(uint256 _amount) public nonReentrant {\\n\\t\\tif (_amount == 0) revert InvalidParams();\\n\\n\\t\\taddress ownerAddr = msg.sender.normalize();\\n\\t\\t(bool isID, uint64 ownerId) = ownerAddr.getActorID();\\n\\t\\tif (!isID) revert InactiveActor();\\n\\n\\t\\t(uint256 lockedWithdraw, uint256 availableWithdraw, bool isUnlock) = calcMaximumWithdrawAndRebalance(ownerId);\\n\\n\\t\\tuint256 maxWithdraw = lockedWithdraw + availableWithdraw;\\n\\t\\tuint256 finalAmount = _amount > maxWithdraw ? maxWithdraw : _amount;\\n\\t\\tuint256 delta;\\n\\n\\t\\tif (isUnlock) {\\n\\t\\t\\tdelta = finalAmount - lockedWithdraw;\\n\\t\\t\\tcollaterals[ownerId].lockedCollateral = collaterals[ownerId].lockedCollateral - lockedWithdraw;\\n\\t\\t\\tcollaterals[ownerId].availableCollateral = collaterals[ownerId].availableCollateral - delta;\\n\\t\\t} else {\\n\\t\\t\\tcollaterals[ownerId].availableCollateral = collaterals[ownerId].availableCollateral - finalAmount;\\n\\t\\t}\\n\\n\\t\\t_unwrapWFIL(msg.sender, finalAmount);\\n\\n\\t\\temit StorageProviderCollateralWithdraw(ownerId, finalAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Locks required collateral amount based on `_allocated` FIL to pledge\\n\\t * @notice Increases the total amount of locked collateral for storage provider\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _minerId Storage provider miner ID\\n\\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\\n\\t */\\n\\tfunction lock(uint64 _ownerId, uint64 _minerId, uint256 _allocated) external activeStorageProvider(_minerId) {\\n\\t\\tIRegistryClient registry = IRegistryClient(resolver.getRegistry());\\n\\t\\tif (!registry.isActivePool(msg.sender)) revert InvalidAccess();\\n\\t\\tif (_allocated == 0) revert InvalidParams();\\n\\n\\t\\t_rebalance(_ownerId, _allocated);\\n\\t\\tregistry.increaseUsedAllocation(_minerId, _allocated, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Fits collateral amounts based on SP pledge usage, distributed rewards and pledge paybacks\\n\\t * @notice Rebalances the total locked and available collateral amounts\\n\\t * @param _ownerId Storage provider owner ID\\n\\t */\\n\\tfunction fit(uint64 _ownerId) external {\\n\\t\\tif (msg.sender != resolver.getRewardCollector()) revert InvalidAccess();\\n\\n\\t\\t_rebalance(_ownerId, 0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Report slashing of SP accured on the Filecoin network\\n\\t * This function is triggered when SP get continiously slashed by faulting it's sectors\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _slashingAmt Slashing amount\\n\\t *\\n\\t * @dev Please note that slashing amount couldn't exceed the total amount of collateral provided by SP.\\n\\t * If sector has been slashed for 42 days and automatically terminated both operations\\n\\t * would take place after one another: slashing report and initial pledge withdrawal\\n\\t * which is the remaining pledge for a terminated sector.\\n\\t */\\n\\tfunction reportSlashing(uint64 _ownerId, uint256 _slashingAmt) external virtual nonReentrant {\\n\\t\\tif (!hasRole(SLASHING_AGENT, msg.sender)) revert InvalidAccess();\\n\\t\\tif (_slashingAmt == 0) revert InvalidParams();\\n\\t\\tif (!IRegistryClient(resolver.getRegistry()).isActiveOwner(_ownerId)) revert InvalidOwner();\\n\\n\\t\\t_slash(_ownerId, _slashingAmt, resolver.getLiquidStaking());\\n\\n\\t\\tactiveSlashings[_ownerId] = true;\\n\\n\\t\\temit ReportSlashing(_ownerId, _slashingAmt);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Report recovery of previously slashed sectors for SP with `_ownerId`\\n\\t * @param _ownerId Storage provider owner ID\\n\\t */\\n\\tfunction reportRecovery(uint64 _ownerId) external virtual {\\n\\t\\tif (!hasRole(SLASHING_AGENT, msg.sender)) revert InvalidAccess();\\n\\t\\tif (!activeSlashings[_ownerId]) revert InactiveSlashing();\\n\\t\\tif (!IRegistryClient(resolver.getRegistry()).isActiveOwner(_ownerId)) revert InvalidOwner();\\n\\n\\t\\tactiveSlashings[_ownerId] = false;\\n\\n\\t\\temit ReportRecovery(_ownerId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Slashes SP for a `_slashingAmt` and delivers WFIL amount to the `msg.sender` LSP\\n\\t * @notice Doesn't perform a rebalancing checks\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _slashingAmt Slashing amount for SP\\n\\t * @param _pool Liquid staking pool address\\n\\t */\\n\\tfunction _slash(uint64 _ownerId, uint256 _slashingAmt, address _pool) internal {\\n\\t\\tif (!IRegistryClient(resolver.getRegistry()).isActivePool(_pool)) revert InactivePool();\\n\\n\\t\\tSPCollateral memory collateral = collaterals[_ownerId];\\n\\t\\tif (_slashingAmt <= collateral.lockedCollateral) {\\n\\t\\t\\tcollateral.lockedCollateral = collateral.lockedCollateral - _slashingAmt;\\n\\t\\t} else {\\n\\t\\t\\tuint256 totalCollateral = collateral.lockedCollateral + collateral.availableCollateral;\\n\\t\\t\\tif (_slashingAmt > totalCollateral) revert InsufficientCollateral(); // TODO: introduce debt for SP to cover worst case scenario\\n\\t\\t\\tuint256 delta = _slashingAmt - collateral.lockedCollateral;\\n\\n\\t\\t\\tcollateral.lockedCollateral = 0;\\n\\t\\t\\tcollateral.availableCollateral = collateral.availableCollateral - delta;\\n\\t\\t}\\n\\n\\t\\tcollaterals[_ownerId] = collateral;\\n\\t\\tslashings[_ownerId] += _slashingAmt;\\n\\n\\t\\tWFIL.transfer(_pool, _slashingAmt);\\n\\n\\t\\temit StorageProviderCollateralSlash(_ownerId, _slashingAmt, _pool);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return Storage Provider Collateral information with `_provider` address\\n\\t */\\n\\tfunction getCollateral(uint64 _ownerId) public view returns (uint256, uint256) {\\n\\t\\tSPCollateral memory collateral = collaterals[_ownerId];\\n\\t\\treturn (collateral.availableCollateral, collateral.lockedCollateral);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return Storage Provider Collateral requirements for SP with `_ownerId\\n\\t */\\n\\tfunction getCollateralRequirements(uint64 _ownerId) public view returns (uint256) {\\n\\t\\treturn collateralRequirements[_ownerId];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return Storage Provider Available Collateral information with `_provider` address\\n\\t */\\n\\tfunction getAvailableCollateral(uint64 _ownerId) public view returns (uint256) {\\n\\t\\treturn collaterals[_ownerId].availableCollateral;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return Storage Provider Locked Collateral information with `_provider` address\\n\\t */\\n\\tfunction getLockedCollateral(uint64 _ownerId) public view returns (uint256) {\\n\\t\\treturn collaterals[_ownerId].lockedCollateral;\\n\\t}\\n\\n\\tfunction getDebt(uint64 _ownerId) public returns (uint256) {\\n\\t\\t(uint256 usedAllocation, uint256 repaidPledge) = IRegistryClient(resolver.getRegistry()).getAllocations(\\n\\t\\t\\t_ownerId\\n\\t\\t);\\n\\n\\t\\tuint256 _collateralRequirements = collateralRequirements[_ownerId];\\n\\t\\tuint256 requirements = calcCollateralRequirements(usedAllocation, repaidPledge, 0, _collateralRequirements);\\n\\t\\tSPCollateral memory collateral = collaterals[_ownerId];\\n\\n\\t\\t(uint256 adjAmt, bool isUnlock) = calcCollateralAdjustment(collateral.lockedCollateral, requirements);\\n\\n\\t\\tif (!isUnlock) {\\n\\t\\t\\treturn adjAmt;\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates max collateral withdrawal amount for SP depending on the\\n\\t * total used FIL allocation and locked rewards.\\n\\t * @param _ownerId Storage Provider owner address\\n\\t */\\n\\tfunction calcMaximumWithdrawAndRebalance(uint64 _ownerId) internal returns (uint256, uint256, bool) {\\n\\t\\t(uint256 usedAllocation, uint256 repaidPledge) = IRegistryClient(resolver.getRegistry()).getAllocations(\\n\\t\\t\\t_ownerId\\n\\t\\t);\\n\\n\\t\\tuint256 _collateralRequirements = collateralRequirements[_ownerId];\\n\\t\\tuint256 requirements = calcCollateralRequirements(usedAllocation, repaidPledge, 0, _collateralRequirements);\\n\\t\\tSPCollateral memory collateral = collaterals[_ownerId];\\n\\n\\t\\t(uint256 adjAmt, bool isUnlock) = calcCollateralAdjustment(collateral.lockedCollateral, requirements);\\n\\n\\t\\tif (!isUnlock) {\\n\\t\\t\\tuint256 maxWithdraw = collateral.availableCollateral - adjAmt;\\n\\n\\t\\t\\tcollaterals[_ownerId].lockedCollateral = collateral.lockedCollateral + adjAmt;\\n\\t\\t\\tcollaterals[_ownerId].availableCollateral = collateral.availableCollateral - adjAmt;\\n\\n\\t\\t\\treturn (0, maxWithdraw, isUnlock);\\n\\t\\t} else {\\n\\t\\t\\treturn (adjAmt, collateral.availableCollateral, isUnlock);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Rebalances collateral for a specified `_ownerId` with `_allocated` in mind\\n\\t * @param _ownerId Storage Provider owner address\\n\\t * @param _allocated Hypothetical allocation for SP\\n\\t */\\n\\tfunction _rebalance(uint64 _ownerId, uint256 _allocated) internal {\\n\\t\\t(uint256 usedAllocation, uint256 repaidPledge) = IRegistryClient(resolver.getRegistry()).getAllocations(\\n\\t\\t\\t_ownerId\\n\\t\\t);\\n\\n\\t\\tuint256 _collateralRequirements = collateralRequirements[_ownerId];\\n\\t\\tuint256 totalRequirements = calcCollateralRequirements(\\n\\t\\t\\tusedAllocation,\\n\\t\\t\\trepaidPledge,\\n\\t\\t\\t_allocated,\\n\\t\\t\\t_collateralRequirements\\n\\t\\t);\\n\\n\\t\\tSPCollateral memory collateral = collaterals[_ownerId];\\n\\t\\tif (totalRequirements > collateral.lockedCollateral + collateral.availableCollateral)\\n\\t\\t\\trevert InsufficientCollateral();\\n\\n\\t\\t(uint256 adjAmt, bool isUnlock) = calcCollateralAdjustment(collateral.lockedCollateral, totalRequirements);\\n\\n\\t\\tif (adjAmt > 0) {\\n\\t\\t\\tif (!isUnlock) {\\n\\t\\t\\t\\tcollateral.lockedCollateral = collateral.lockedCollateral + adjAmt;\\n\\t\\t\\t\\tcollateral.availableCollateral = collateral.availableCollateral - adjAmt;\\n\\n\\t\\t\\t\\temit StorageProviderCollateralRebalance(_ownerId, adjAmt, 0, isUnlock);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcollateral.lockedCollateral = collateral.lockedCollateral - adjAmt;\\n\\t\\t\\t\\tcollateral.availableCollateral = collateral.availableCollateral + adjAmt;\\n\\n\\t\\t\\t\\temit StorageProviderCollateralRebalance(_ownerId, 0, adjAmt, isUnlock);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tcollaterals[_ownerId] = collateral;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates total collateral requirements for SP depending on the\\n\\t * total used FIL allocation and locked rewards.\\n\\t * @param _usedAllocation Already used FIL allocation by Storage Provider\\n\\t * @param _repaidPledge Repaid pledge by SP\\n\\t * @param _allocationToUse Allocation to be used by SP\\n\\t * @param _collateralRequirements Percentage of collateral coverage\\n\\t */\\n\\tfunction calcCollateralRequirements(\\n\\t\\tuint256 _usedAllocation,\\n\\t\\tuint256 _repaidPledge,\\n\\t\\tuint256 _allocationToUse,\\n\\t\\tuint256 _collateralRequirements\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 usedAllocation = _usedAllocation + _allocationToUse;\\n\\t\\tuint256 req = usedAllocation > _repaidPledge ? usedAllocation - _repaidPledge : 0;\\n\\n\\t\\tif (req > 0) {\\n\\t\\t\\treturn req.mulDivDown(_collateralRequirements, BASIS_POINTS);\\n\\t\\t} else {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates collateral adjustment for SP depending on the\\n\\t * total locked collateral and overall collateral requirements.\\n\\t * @param _lockedCollateral Locked collateral amount for Storage Provider\\n\\t * @param _collateralRequirements Collateral requirements for SP\\n\\t */\\n\\tfunction calcCollateralAdjustment(\\n\\t\\tuint256 _lockedCollateral,\\n\\t\\tuint256 _collateralRequirements\\n\\t) internal pure returns (uint256, bool) {\\n\\t\\tif (_lockedCollateral > 0 && _collateralRequirements > 0) {\\n\\t\\t\\tif (_lockedCollateral > _collateralRequirements) {\\n\\t\\t\\t\\treturn (_lockedCollateral - _collateralRequirements, true);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn (_collateralRequirements - _lockedCollateral, false);\\n\\t\\t\\t}\\n\\t\\t} else if (_lockedCollateral > 0 && _collateralRequirements == 0) {\\n\\t\\t\\treturn (_lockedCollateral, true);\\n\\t\\t} else if (_lockedCollateral == 0 && _collateralRequirements > 0) {\\n\\t\\t\\treturn (_collateralRequirements, false);\\n\\t\\t} else {\\n\\t\\t\\treturn (0, true);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates collateral requirements for SP with `_ownerId` by `requirements` percentage\\n\\t * @notice Only triggered by Collateral admin or registry contract while registering SP\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param requirements Percentage of collateral requirements\\n\\t */\\n\\tfunction updateCollateralRequirements(uint64 _ownerId, uint256 requirements) external {\\n\\t\\tif (msg.sender != resolver.getRegistry() && !hasRole(COLLATERAL_ADMIN, msg.sender)) revert InvalidAccess();\\n\\n\\t\\tif (requirements == 0) {\\n\\t\\t\\tcollateralRequirements[_ownerId] = baseRequirements;\\n\\n\\t\\t\\temit StorageProviderCollateralUpdate(_ownerId, 0, baseRequirements);\\n\\t\\t} else {\\n\\t\\t\\tuint256 prevRequirements = collateralRequirements[_ownerId];\\n\\t\\t\\tif (requirements > 10000 || requirements == prevRequirements) revert InvalidParams();\\n\\n\\t\\t\\tcollateralRequirements[_ownerId] = requirements;\\n\\n\\t\\t\\temit StorageProviderCollateralUpdate(_ownerId, prevRequirements, requirements);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unwraps `_amount` of WFIL into FIL and transfers it to the `_recipient` address\\n\\t * @param _recipient WFIL recipient address\\n\\t */\\n\\tfunction _unwrapWFIL(address _recipient, uint256 _amount) internal {\\n\\t\\tuint256 balanceWETH9 = WFIL.balanceOf(address(this));\\n\\t\\tif (balanceWETH9 < _amount) revert InsufficientFunds();\\n\\n\\t\\tif (balanceWETH9 > 0) {\\n\\t\\t\\tWFIL.withdraw(_amount);\\n\\t\\t\\t_recipient.safeTransferETH(_amount);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates base collateral requirements amount for Storage Providers\\n\\t * @param requirements New base collateral requirements for SP\\n\\t */\\n\\tfunction updateBaseCollateralRequirements(uint256 requirements) public onlyAdmin {\\n\\t\\tif (requirements == 0 || requirements == baseRequirements) revert InvalidParams();\\n\\n\\t\\tbaseRequirements = requirements;\\n\\n\\t\\temit UpdateBaseCollateralRequirements(requirements);\\n\\t}\\n\\n\\tfunction _authorizeUpgrade(address newImplementation) internal override onlyAdmin {}\\n\\n\\tfunction version() external pure virtual returns (string memory) {\\n\\t\\treturn \\\"v1\\\";\\n\\t}\\n\\n\\tfunction getImplementation() external view returns (address) {\\n\\t\\treturn _getImplementation();\\n\\t}\\n}\\n\",\"keccak256\":\"0x4d7ad358b7e8a6e3511df7a8a9b0dc275ec67a7858850e7435efb2de6a029fe5\",\"license\":\"MIT\"},\"contracts/interfaces/IResolverClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IResolverClient {\\n\\t/**\\n\\t * @notice Returns an address of a Storage Provider Registry contract\\n\\t */\\n\\tfunction getRegistry() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns an address of a Storage Provider Collateral contract\\n\\t */\\n\\tfunction getCollateral() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns an address of a Liquid Staking contract\\n\\t */\\n\\tfunction getLiquidStaking() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns an address of a Liquid Staking Controller contract\\n\\t */\\n\\tfunction getLiquidStakingController() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns an address of a Reward Collector contract\\n\\t */\\n\\tfunction getRewardCollector() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Returns a Protocol Rewards address\\n\\t */\\n\\tfunction getProtocolRewards() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1d79881a8d747da13f8b2f0d01e1b585530d1da35bbb24eea6093e6081559e20\",\"license\":\"MIT\"},\"contracts/interfaces/IStorageProviderCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IStorageProviderCollateral {\\n\\tevent StorageProviderCollateralDeposit(uint64 _ownerId, uint256 amount);\\n\\tevent StorageProviderCollateralWithdraw(uint64 _ownerId, uint256 amount);\\n\\tevent StorageProviderCollateralRebalance(\\n\\t\\tuint64 _ownerId,\\n\\t\\tuint256 lockedCollateral,\\n\\t\\tuint256 availableCollateral,\\n\\t\\tbool isUnlock\\n\\t);\\n\\tevent StorageProviderCollateralSlash(uint64 _ownerId, uint256 slashingAmt, address pool);\\n\\tevent StorageProviderCollateralUpdate(uint64 _ownerId, uint256 prevRequirements, uint256 requirements);\\n\\tevent UpdateBaseCollateralRequirements(uint256 baseCollateralRequirements);\\n\\tevent SetRegistryAddress(address registry);\\n\\n\\t/**\\n\\t * @notice Emitted when storage provider has been reported to accure slashing\\n\\t * @param ownerId Storage Provider's owner ID\\n\\t * @param slashingAmount Slashing amount\\n\\t */\\n\\tevent ReportSlashing(uint64 ownerId, uint256 slashingAmount);\\n\\n\\t/**\\n\\t * @notice Emitted when storage provider has been reported to recover slashed sectors\\n\\t * @param ownerId Storage Provider's owner ID\\n\\t */\\n\\tevent ReportRecovery(uint64 ownerId);\\n\\n\\t/**\\n\\t * @dev Deposit `msg.value` FIL funds by the msg.sender into collateral\\n\\t * @notice Wrapps of FIL into WFIL token internally\\n\\t */\\n\\tfunction deposit() external payable;\\n\\n\\t/**\\n\\t * @dev Withdraw `_amount` of FIL funds by the `msg.sender` from the collateral system\\n\\t * @notice Unwraps of FIL into WFIL token internally and\\n\\t * delivers maximum amount of FIL available for withdrawal if `_amount` is bigger.\\n\\t */\\n\\tfunction withdraw(uint256 _amount) external;\\n\\n\\t/**\\n\\t * @dev Locks required collateral amount based on `_allocated` FIL to pledge\\n\\t * @notice Increases the total amount of locked collateral for storage provider\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _minerId Storage provider miner ID\\n\\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\\n\\t */\\n\\tfunction lock(uint64 _ownerId, uint64 _minerId, uint256 _allocated) external;\\n\\n\\t/**\\n\\t * @dev Fits collateral amounts based on SP pledge usage, distributed rewards and pledge paybacks\\n\\t * @notice Rebalances the total locked and available collateral amounts\\n\\t * @param _ownerId Storage provider owner ID\\n\\t */\\n\\tfunction fit(uint64 _ownerId) external;\\n\\n\\t/**\\n\\t * @notice Report slashing of SP accured on the Filecoin network\\n\\t * This function is triggered when SP get continiously slashed by faulting it's sectors\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _slashingAmt Slashing amount\\n\\t *\\n\\t * @dev Please note that slashing amount couldn't exceed the total amount of collateral provided by SP.\\n\\t * If sector has been slashed for 42 days and automatically terminated both operations\\n\\t * would take place after one another: slashing report and initial pledge withdrawal\\n\\t * which is the remaining pledge for a terminated sector.\\n\\t */\\n\\tfunction reportSlashing(uint64 _ownerId, uint256 _slashingAmt) external;\\n\\n\\t/**\\n\\t * @notice Report recovery of previously slashed sectors for SP with `_ownerId`\\n\\t * @param _ownerId Storage provider owner ID\\n\\t */\\n\\tfunction reportRecovery(uint64 _ownerId) external;\\n\\n\\t/**\\n\\t * @notice Return Storage Provider Collateral information with `_provider` address\\n\\t */\\n\\tfunction getCollateral(uint64 _ownerId) external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @notice Return Storage Provider Available Collateral information with `_provider` address\\n\\t */\\n\\tfunction getAvailableCollateral(uint64 _ownerId) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Return Storage Provider Locked Collateral information with `_provider` address\\n\\t */\\n\\tfunction getLockedCollateral(uint64 _ownerId) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Updates collateral requirements for SP with `_ownerId` by `requirements` percentage\\n\\t * @notice Only triggered by Collateral admin or registry contract while registering SP\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param requirements Percentage of collateral requirements\\n\\t */\\n\\tfunction updateCollateralRequirements(uint64 _ownerId, uint256 requirements) external;\\n\\n\\t/**\\n\\t * @notice Updates base collateral requirements amount for Storage Providers\\n\\t * @param requirements New base collateral requirements for SP\\n\\t */\\n\\tfunction updateBaseCollateralRequirements(uint256 requirements) external;\\n}\\n\",\"keccak256\":\"0x5a2423cb9a482587c795d29abc1335f2e7d85a71a81f78c949efd6a3d98f4f90\",\"license\":\"MIT\"},\"contracts/interfaces/IStorageProviderRegistryClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IStorageProviderRegistryClient {\\n\\t/**\\n\\t * @notice Return Storage Provider information with `_ownerId`\\n\\t */\\n\\tfunction getStorageProvider(uint64 _ownerId) external view returns (bool, address, uint64, int64);\\n\\n\\t/**\\n\\t * @notice Increase collected rewards by Storage Provider\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _accuredRewards Withdrawn rewards from SP's miner actor\\n\\t */\\n\\tfunction increaseRewards(uint64 _ownerId, uint256 _accuredRewards) external;\\n\\n\\t/**\\n\\t * @notice Increase repaid pledge by Storage Provider\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _repaidPledge Withdrawn initial pledge after sector termination\\n\\t */\\n\\tfunction increasePledgeRepayment(uint64 _ownerId, uint256 _repaidPledge) external;\\n\\n\\t/**\\n\\t * @notice Increase used allocation for Storage Provider\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\\n\\t * @param _timestamp Transaction timestamp\\n\\t */\\n\\tfunction increaseUsedAllocation(uint64 _ownerId, uint256 _allocated, uint256 _timestamp) external;\\n\\n\\t/**\\n\\t * @notice Return a boolean flag of Storage Provider activity\\n\\t */\\n\\tfunction isActiveProvider(uint64 _ownerId) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Return a boolean flag if `_ownerId` has registered any miner ids\\n\\t */\\n\\tfunction isActiveOwner(uint64 _ownerId) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Return a boolean flag if `_ownerId` owns the specific `_minerId`\\n\\t */\\n\\tfunction isActualOwner(uint64 _ownerId, uint64 _minerId) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Return a boolean flag whether `_pool` is active or not\\n\\t */\\n\\tfunction isActivePool(address _pool) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Return a restaking information for a storage provider\\n\\t */\\n\\tfunction restakings(uint64 ownerId) external view returns (uint256, address);\\n\\n\\t/**\\n\\t * @notice Return allocation information for a storage provider\\n\\t */\\n\\tfunction allocations(uint64 ownerId) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n\\n\\tfunction getAllocations(uint64 _ownerId) external returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @notice Return a repayment amount for Storage Provider\\n\\t */\\n\\tfunction getRepayment(uint64 ownerId) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Return a repayment amount for Storage Provider\\n\\t */\\n\\tfunction storageProviders(uint64 ownerId) external view returns (bool, bool, address, uint64, int64);\\n}\\n\",\"keccak256\":\"0xcf841470d3b2ea3a3086a90fd715b66f7988d75d59b6d67f8cfc566c8c4af23f\",\"license\":\"MIT\"},\"contracts/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * Slightly modified Solmate SafeTransferLib library for safe transfers of tokens\\n * original ERC20 token has been replaced by Filecoin-safe ERC20. Updated token version performs\\n * address normalization and allows to send tokens to f0/f1/f3/f4 addresses. In FVM no\\n * tokens could be sent to the native actors.\\n */\\n\\nimport {ERC20Upgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n\\t/*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction safeTransferETH(address to, uint256 amount) internal {\\n\\t\\tbool success;\\n\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Transfer the ETH and store if it succeeded or not.\\n\\t\\t\\tsuccess := call(gas(), to, amount, 0, 0, 0, 0)\\n\\t\\t}\\n\\n\\t\\trequire(success, \\\"ETH_TRANSFER_FAILED\\\");\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction safeTransferFrom(ERC20Upgradeable token, address from, address to, uint256 amount) internal {\\n\\t\\tbool success;\\n\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Get a pointer to some free memory.\\n\\t\\t\\tlet freeMemoryPointer := mload(0x40)\\n\\n\\t\\t\\t// Write the abi-encoded calldata into memory, beginning with the function selector.\\n\\t\\t\\tmstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n\\t\\t\\tmstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n\\t\\t\\tmstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n\\t\\t\\tmstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n\\t\\t\\tsuccess := and(\\n\\t\\t\\t\\t// Set success to whether the call reverted, if not we check it either\\n\\t\\t\\t\\t// returned exactly 1 (can't just be non-zero data), or had no return data.\\n\\t\\t\\t\\tor(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n\\t\\t\\t\\t// We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n\\t\\t\\t\\t// We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n\\t\\t\\t\\t// Counterintuitively, this call must be positioned second to the or() call in the\\n\\t\\t\\t\\t// surrounding and() call or else returndatasize() will be zero during the computation.\\n\\t\\t\\t\\tcall(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n\\t\\t\\t)\\n\\t\\t}\\n\\n\\t\\trequire(success, \\\"TRANSFER_FROM_FAILED\\\");\\n\\t}\\n\\n\\tfunction safeTransfer(ERC20Upgradeable token, address to, uint256 amount) internal {\\n\\t\\tbool success;\\n\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Get a pointer to some free memory.\\n\\t\\t\\tlet freeMemoryPointer := mload(0x40)\\n\\n\\t\\t\\t// Write the abi-encoded calldata into memory, beginning with the function selector.\\n\\t\\t\\tmstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n\\t\\t\\tmstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n\\t\\t\\tmstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n\\t\\t\\tsuccess := and(\\n\\t\\t\\t\\t// Set success to whether the call reverted, if not we check it either\\n\\t\\t\\t\\t// returned exactly 1 (can't just be non-zero data), or had no return data.\\n\\t\\t\\t\\tor(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n\\t\\t\\t\\t// We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n\\t\\t\\t\\t// We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n\\t\\t\\t\\t// Counterintuitively, this call must be positioned second to the or() call in the\\n\\t\\t\\t\\t// surrounding and() call or else returndatasize() will be zero during the computation.\\n\\t\\t\\t\\tcall(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n\\t\\t\\t)\\n\\t\\t}\\n\\n\\t\\trequire(success, \\\"TRANSFER_FAILED\\\");\\n\\t}\\n\\n\\tfunction safeApprove(ERC20Upgradeable token, address to, uint256 amount) internal {\\n\\t\\tbool success;\\n\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Get a pointer to some free memory.\\n\\t\\t\\tlet freeMemoryPointer := mload(0x40)\\n\\n\\t\\t\\t// Write the abi-encoded calldata into memory, beginning with the function selector.\\n\\t\\t\\tmstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n\\t\\t\\tmstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n\\t\\t\\tmstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n\\t\\t\\tsuccess := and(\\n\\t\\t\\t\\t// Set success to whether the call reverted, if not we check it either\\n\\t\\t\\t\\t// returned exactly 1 (can't just be non-zero data), or had no return data.\\n\\t\\t\\t\\tor(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n\\t\\t\\t\\t// We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n\\t\\t\\t\\t// We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n\\t\\t\\t\\t// Counterintuitively, this call must be positioned second to the or() call in the\\n\\t\\t\\t\\t// surrounding and() call or else returndatasize() will be zero during the computation.\\n\\t\\t\\t\\tcall(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n\\t\\t\\t)\\n\\t\\t}\\n\\n\\t\\trequire(success, \\\"APPROVE_FAILED\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xdc98c057cc45028ba9a18071f61f205118f219295ffe9ecfe927cdbb928b2c16\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/tokens/IWFIL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IERC20Upgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {WFIL} from \\\"lib/fevmate/contracts/token/WFIL.sol\\\";\\n\\ninterface IWFIL is IERC20Upgradeable {\\n\\t/**\\n\\t * @notice Deposit Fil into the contract, and mint WFIL 1:1.\\n\\t */\\n\\tfunction deposit() external payable;\\n\\n\\t/**\\n\\t * @notice Burns _amount WFIL from caller's balance, and transfers them\\n\\t * the unwrapped Fil 1:1.\\n\\t *\\n\\t * Note: The fund transfer used here is address.call{value: _amount}(\\\"\\\"),\\n\\t * which does NOT work with the FVM's builtin Multisig actor. This is\\n\\t * because, under the hood, address.call acts like a message to an actor's\\n\\t * InvokeEVM method. The Multisig actor does not implement this method.\\n\\t *\\n\\t * This is a known issue, but we've decided to keep the method as-is,\\n\\t * because it's likely that the Multisig actor is eventually upgraded to\\n\\t * support this method. Even though a Multisig actor cannot directly\\n\\t * withdraw, it is still possible for Multisigs to deposit, transfer,\\n\\t * etc WFIL. So, if your Multisig actor needs to withdraw, you can\\n\\t * transfer your WFIL to another contract, which can perform the\\n\\t * withdrawal for you.\\n\\t *\\n\\t * (Though Multisig actors are not supported, BLS/SECPK/EthAccounts\\n\\t * and EVM contracts can use this method normally)\\n\\t */\\n\\tfunction withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x41653085647d47d4909a304ac982d350b6fe20762db5b6574779ab6a06ad6bea\",\"license\":\"MIT\"},\"lib/fevmate/contracts/access/OwnedClaimable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/FilAddress.sol\\\";\\n\\n/**\\n * @author fevmate (https://github.com/wadealexc/fevmate)\\n * @notice Two-step owner transferrance mixin. Unlike many fevmate contracts,\\n * no methods here normalize address inputs - so it is possible to transfer\\n * ownership to an ID address. However, the acceptOwnership method enforces\\n * that the pending owner address can actually be the msg.sender.\\n *\\n * This should mean it's possible for other Filecoin actor types to hold the\\n * owner role - like BLS/SECP account actors.\\n */\\nabstract contract OwnedClaimable {    \\n    \\n    using FilAddress for *;\\n\\n    error Unauthorized();\\n    error InvalidAddress();\\n\\n    /*//////////////////////////////////////\\n                  OWNER INFO\\n    //////////////////////////////////////*/\\n\\n    address public owner;\\n    address pendingOwner;\\n\\n    /*//////////////////////////////////////\\n                    EVENTS\\n    //////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n    event OwnershipPending(address indexed currentOwner, address indexed pendingOwner);\\n\\n    /*//////////////////////////////////////\\n                  CONSTRUCTOR\\n    //////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        if (_owner == address(0)) revert InvalidAddress();\\n        // normalize _owner to avoid setting an EVM actor's ID address as owner\\n        owner = _owner.normalize();\\n\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /*//////////////////////////////////////\\n                OWNABLE METHODS\\n    //////////////////////////////////////*/\\n\\n    modifier onlyOwner() virtual {\\n        if (msg.sender != owner) revert Unauthorized();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Allows the current owner to revoke the owner role, locking\\n     * any onlyOwner functions.\\n     *\\n     * Note: this method requires that there is not currently a pending\\n     * owner. To revoke ownership while there is a pending owner, the\\n     * current owner must first set a new pending owner to address(0).\\n     * Alternatively, the pending owner can claim ownership and then\\n     * revoke it.\\n     */\\n    function revokeOwnership() public virtual onlyOwner {\\n        if (pendingOwner != address(0)) revert Unauthorized();\\n        owner = address(0);\\n\\n        emit OwnershipTransferred(msg.sender, address(0));\\n    }\\n\\n    /**\\n     * @notice Works like most 2-step ownership transfer methods. The current\\n     * owner can call this to set a new pending owner.\\n     * \\n     * Note: the new owner address is NOT normalized - it is stored as-is.\\n     * This is safe, because the acceptOwnership method enforces that the\\n     * new owner can make a transaction as msg.sender.\\n     */\\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\\n        pendingOwner = _newOwner;\\n\\n        emit OwnershipPending(msg.sender, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Used by the pending owner to accept the ownership transfer.\\n     *\\n     * Note: If this fails unexpectedly, check that the pendingOwner is not\\n     * an ID address. The pending owner address should match the pending\\n     * owner's msg.sender address.         \\n     */\\n    function acceptOwnership() public virtual {\\n        if (msg.sender != pendingOwner) revert Unauthorized();\\n\\n        // Transfer ownership and set pendingOwner to 0\\n        address oldOwner = owner;\\n        owner = msg.sender;\\n        delete pendingOwner;\\n\\n        emit OwnershipTransferred(oldOwner, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x123a5b03dad2077ef62890a048a2220cc2637e0ea331e30fac2fe3a4d4638955\",\"license\":\"MIT\"},\"lib/fevmate/contracts/token/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/FilAddress.sol\\\";\\n\\n/**\\n * @author fevmate (https://github.com/wadealexc/fevmate)\\n * @notice ERC20 mixin for the FEVM. This contract implements the ERC20\\n * standard, with additional safety features for the FEVM.\\n *\\n * All methods attempt to normalize address input. This means that if\\n * they are provided ID addresses as input, they will attempt to convert\\n * these addresses to standard Eth addresses. \\n * \\n * This is an important consideration when developing on the FEVM, and\\n * you can read about it more in the README.\\n */\\nabstract contract ERC20 {\\n\\n    using FilAddress for *;\\n\\n    /*//////////////////////////////////////\\n                  TOKEN INFO\\n    //////////////////////////////////////*/\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    /*//////////////////////////////////////\\n                 ERC-20 STORAGE\\n    //////////////////////////////////////*/\\n\\n    uint public totalSupply;\\n\\n    mapping(address => uint) balances;\\n    mapping(address => mapping(address => uint)) allowances;\\n\\n    /*//////////////////////////////////////\\n                    EVENTS\\n    //////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////\\n                  CONSTRUCTOR\\n    //////////////////////////////////////*/\\n\\n    constructor (\\n        string memory _name, \\n        string memory _symbol, \\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    /*//////////////////////////////////////\\n                 ERC-20 METHODS\\n    //////////////////////////////////////*/\\n\\n    function transfer(address _to, uint _amount) public virtual returns (bool) {\\n        // Attempt to convert destination to Eth address\\n        _to = _to.normalize();\\n        \\n        balances[msg.sender] -= _amount;\\n        balances[_to] += _amount;\\n\\n        emit Transfer(msg.sender, _to, _amount);\\n        return true;\\n    }\\n    \\n    function transferFrom(address _owner, address _to, uint _amount) public virtual returns (bool) {\\n        // Attempt to convert owner and destination to Eth addresses\\n        _owner = _owner.normalize();\\n        _to = _to.normalize();\\n\\n        // Reduce allowance for spender. If allowance is set to the\\n        // max value, we leave it alone.\\n        uint allowed = allowances[_owner][msg.sender];\\n        if (allowed != type(uint).max)\\n            allowances[_owner][msg.sender] = allowed - _amount;\\n        \\n        balances[_owner] -= _amount;\\n        balances[_to] += _amount;\\n\\n        emit Transfer(_owner, _to, _amount);\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint _amount) public virtual returns (bool) {\\n        // Attempt to convert spender to Eth address\\n        _spender = _spender.normalize();\\n\\n        allowances[msg.sender][_spender] = _amount;\\n\\n        emit Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////\\n                 ERC-20 GETTERS\\n    //////////////////////////////////////*/\\n\\n    function balanceOf(address _a) public virtual view returns (uint) {\\n        return balances[_a.normalize()];\\n    }\\n\\n    function allowance(address _owner, address _spender) public virtual view returns (uint) {\\n        return allowances[_owner.normalize()][_spender.normalize()];\\n    }\\n\\n    /*//////////////////////////////////////\\n           MINT/BURN INTERNAL METHODS\\n    //////////////////////////////////////*/\\n\\n    function _mint(address _to, uint _amount) internal virtual {\\n        // Attempt to convert to Eth address\\n        _to = _to.normalize();\\n\\n        totalSupply += _amount;\\n        balances[_to] += _amount;\\n\\n        emit Transfer(address(0), _to, _amount);\\n    }\\n\\n    function _burn(address _from, uint _amount) internal virtual {\\n        // Attempt to convert to Eth address\\n        _from = _from.normalize();\\n\\n        balances[_from] -= _amount;\\n        totalSupply -= _amount;\\n\\n        emit Transfer(_from, address(0), _amount);\\n    }\\n}\",\"keccak256\":\"0x2f5d552af1558ee014802a268681037b3b5f7dde65bc28a8400ab21470fd1263\",\"license\":\"MIT\"},\"lib/fevmate/contracts/token/WFIL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../utils/FilAddress.sol\\\";\\nimport \\\"../access/OwnedClaimable.sol\\\";\\n\\n/**\\n * @author fevmate (https://github.com/wadealexc/fevmate)\\n * @notice Wrapped filecoin implementation, using ERC20-FEVM mixin.\\n */\\ncontract WFIL is ERC20(\\\"Wrapped FIL\\\", \\\"WFIL\\\", 18), OwnedClaimable {\\n\\n    using FilAddress for *;\\n\\n    error TimelockActive();\\n\\n    /*//////////////////////////////////////\\n                 WFIL STORAGE\\n    //////////////////////////////////////*/\\n\\n    // Timelock for 6 months after contract is deployed\\n    // Applies only to recoverDeposit. See comments there for info\\n    uint public immutable recoveryTimelock = block.timestamp + 24 weeks;\\n\\n    /*//////////////////////////////////////\\n                    EVENTS\\n    //////////////////////////////////////*/\\n\\n    event Deposit(address indexed from, uint amount);\\n    event Withdrawal(address indexed to, uint amount);\\n    \\n    /*//////////////////////////////////////\\n                  CONSTRUCTOR\\n    //////////////////////////////////////*/\\n    \\n    constructor(address _owner) OwnedClaimable(_owner) {}\\n\\n    /*//////////////////////////////////////\\n                  WFIL METHODS\\n    //////////////////////////////////////*/\\n\\n    /**\\n     * @notice Fallback function - Fil transfers via standard address.call\\n     * will end up here and trigger the deposit function, minting the caller\\n     * with WFIL 1:1.\\n     *\\n     * Note that transfers of value via the FVM's METHOD_SEND bypass bytecode,\\n     * and will not credit the sender with WFIL in return. Please ensure you\\n     * do NOT send the contract Fil via METHOD_SEND - always use InvokeEVM.\\n     *\\n     * For more information on METHOD_SEND, see recoverDeposit below.\\n     */\\n    receive() external payable virtual {\\n        deposit();\\n    }\\n\\n    /**\\n     * @notice Deposit Fil into the contract, and mint WFIL 1:1.\\n     */\\n    function deposit() public payable virtual {\\n        _mint(msg.sender, msg.value);\\n\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @notice Burns _amount WFIL from caller's balance, and transfers them\\n     * the unwrapped Fil 1:1.\\n     *\\n     * Note: The fund transfer used here is address.call{value: _amount}(\\\"\\\"),\\n     * which does NOT work with the FVM's builtin Multisig actor. This is\\n     * because, under the hood, address.call acts like a message to an actor's\\n     * InvokeEVM method. The Multisig actor does not implement this method.\\n     * \\n     * This is a known issue, but we've decided to keep the method as-is,\\n     * because it's likely that the Multisig actor is eventually upgraded to\\n     * support this method. Even though a Multisig actor cannot directly\\n     * withdraw, it is still possible for Multisigs to deposit, transfer,\\n     * etc WFIL. So, if your Multisig actor needs to withdraw, you can\\n     * transfer your WFIL to another contract, which can perform the\\n     * withdrawal for you.\\n     *\\n     * (Though Multisig actors are not supported, BLS/SECPK/EthAccounts\\n     * and EVM contracts can use this method normally)\\n     */\\n    function withdraw(uint _amount) public virtual {\\n        _burn(msg.sender, _amount);\\n\\n        emit Withdrawal(msg.sender, _amount);\\n\\n        payable(msg.sender).sendValue(_amount);\\n    }\\n\\n    /**\\n     * @notice Used by owner to unstick Fil that was directly transferred\\n     * to the contract without triggering the deposit/receive functions.\\n     * When called, _amount stuck Fil is converted to WFIL on behalf of\\n     * the passed-in _depositor.\\n     *\\n     * This method ONLY converts Fil that would otherwise be permanently\\n     * lost.\\n     *\\n     * --- About ---\\n     *\\n     * In the event someone accidentally sends Fil to this contract via\\n     * FVM method METHOD_SEND (or via selfdestruct), the Fil will be\\n     * lost rather than being converted to WFIL. This is because METHOD_SEND \\n     * transfers value without invoking the recipient's code.\\n     *\\n     * If this occurs, the contract's Fil balance will go up, but no WFIL\\n     * will be minted. Luckily, this means we can calculate the number of  \\n     * stuck tokens as the contract's Fil balance minus WFIL totalSupply, \\n     * and ensure we're only touching stuck tokens with this method.\\n     *\\n     * Please ensure you only ever send funds to this contract using the\\n     * FVM method InvokeEVM! This method is not a get-out-of-jail free card,\\n     * and comes with no guarantees.\\n     *\\n     * (If you're a lost EVM dev, address.call uses InvokeEVM under the\\n     * hood. So in a purely contract-contract context, you don't need\\n     * to do anything special - use address.call, or call the WFIL.deposit\\n     * method as you would normally.)\\n     */\\n    function recoverDeposit(address _depositor, uint _amount) public virtual onlyOwner {\\n        // This method is locked for 6 months after contract deployment.\\n        // This is to give the deployers time to sort out the best/most\\n        // equitable way to recover and distribute accidentally-locked\\n        // tokens.\\n        if (block.timestamp < recoveryTimelock) revert TimelockActive();\\n\\n        // Calculate number of locked tokens\\n        uint lockedTokens = address(this).balance - totalSupply;\\n        require(_amount <= lockedTokens);\\n\\n        // Normalize depositor. _mint also does this, but we want to\\n        // emit the normalized address in the Deposit event below.\\n        _depositor = _depositor.normalize();\\n\\n        _mint(_depositor, _amount);\\n        emit Deposit(_depositor, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6a1938a82207a89956168faadad6bc93941ac3bad2dd9c3507f3e4e29c791576\",\"license\":\"MIT\"},\"lib/fevmate/contracts/utils/FilAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @author fevmate (https://github.com/wadealexc/fevmate)\\n * @notice Utility functions for converting between id and\\n * eth addresses. Helps implement address normalization.\\n *\\n * See README for more details about how to use this when\\n * developing for the FEVM.\\n */\\nlibrary FilAddress {\\n    \\n    // Custom errors\\n    error CallFailed();\\n    error InvalidAddress();\\n    error InsufficientFunds();\\n\\n    // Builtin Actor addresses (singletons)\\n    address constant SYSTEM_ACTOR = 0xfF00000000000000000000000000000000000000;\\n    address constant INIT_ACTOR = 0xff00000000000000000000000000000000000001;\\n    address constant REWARD_ACTOR = 0xff00000000000000000000000000000000000002;\\n    address constant CRON_ACTOR = 0xFF00000000000000000000000000000000000003;\\n    address constant POWER_ACTOR = 0xFf00000000000000000000000000000000000004;\\n    address constant MARKET_ACTOR = 0xff00000000000000000000000000000000000005;\\n    address constant VERIFIED_REGISTRY_ACTOR = 0xFF00000000000000000000000000000000000006;\\n    address constant DATACAP_TOKEN_ACTOR = 0xfF00000000000000000000000000000000000007;\\n    address constant EAM_ACTOR = 0xfF0000000000000000000000000000000000000a;\\n\\n    // FEVM precompile addresses\\n    address constant RESOLVE_ADDRESS = 0xFE00000000000000000000000000000000000001;\\n    address constant LOOKUP_DELEGATED_ADDRESS = 0xfE00000000000000000000000000000000000002;\\n    address constant CALL_ACTOR = 0xfe00000000000000000000000000000000000003;\\n    // address constant GET_ACTOR_TYPE = 0xFe00000000000000000000000000000000000004; // (deprecated)\\n    address constant CALL_ACTOR_BY_ID = 0xfe00000000000000000000000000000000000005;\\n\\n    // An ID address with id == 0. It's also equivalent to the system actor address\\n    // This is useful for bitwise operations\\n    address constant ZERO_ID_ADDRESS = SYSTEM_ACTOR;\\n    \\n    /**\\n     * @notice Convert ID to Eth address. Returns input if conversion fails.\\n     *\\n     * Attempt to convert address _a from an ID address to an Eth address\\n     * If _a is NOT an ID address, this returns _a\\n     * If _a does NOT have a corresponding Eth address, this returns _a\\n     * \\n     * NOTE: It is possible this returns an ID address! If you want a method\\n     *       that will NEVER return an ID address, see mustNormalize below.\\n     */\\n    function normalize(address _a) internal view returns (address) {\\n        // First, check if we have an ID address. If we don't, return as-is\\n        (bool isID, uint64 id) = isIDAddress(_a);\\n        if (!isID) {\\n            return _a;\\n        }\\n\\n        // We have an ID address -- attempt the conversion\\n        // If there is no corresponding Eth address, return _a\\n        (bool success, address eth) = getEthAddress(id);\\n        if (!success) {\\n            return _a;\\n        } else {\\n            return eth;\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert ID to Eth address. Reverts if conversion fails.\\n     *\\n     * Attempt to convert address _a from an ID address to an Eth address\\n     * If _a is NOT an ID address, this returns _a unchanged\\n     * If _a does NOT have a corresponding Eth address, this method reverts\\n     *\\n     * This method can be used when you want a guarantee that an ID address is not\\n     * returned. Note, though, that rejecting ID addresses may mean you don't support\\n     * other Filecoin-native actors.\\n     */\\n    function mustNormalize(address _a) internal view returns (address) {\\n        // First, check if we have an ID address. If we don't, return as-is\\n        (bool isID, uint64 id) = isIDAddress(_a);\\n        if (!isID) {\\n            return _a;\\n        }\\n\\n        // We have an ID address -- attempt the conversion\\n        // If there is no corresponding Eth address, revert\\n        (bool success, address eth) = getEthAddress(id);\\n        if (!success) revert InvalidAddress();\\n        return eth;\\n    }\\n\\n    // Used to clear the last 8 bytes of an address    (addr & U64_MASK)\\n    address constant U64_MASK = 0xFffFfFffffFfFFffffFFFffF0000000000000000;\\n    // Used to retrieve the last 8 bytes of an address (addr & MAX_U64)\\n    address constant MAX_U64 = 0x000000000000000000000000fFFFFFffFFFFfffF;\\n\\n    /**\\n     * @notice Checks whether _a matches the ID address format.\\n     * If it does, returns true and the id\\n     * \\n     * The ID address format is:\\n     * 0xFF | bytes11(0) | uint64(id)\\n     */\\n    function isIDAddress(address _a) internal pure returns (bool isID, uint64 id) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Zeroes out the last 8 bytes of _a\\n            let a_mask := and(_a, U64_MASK)\\n\\n            // If the result is equal to the ZERO_ID_ADDRESS,\\n            // _a is an ID address.\\n            if eq(a_mask, ZERO_ID_ADDRESS) {\\n                isID := true\\n                id := and(_a, MAX_U64)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Given an Actor ID, converts it to an EVM-compatible address.\\n     * \\n     * If _id has a corresponding Eth address, we return that\\n     * Otherwise, _id is returned as a 20-byte ID address\\n     */\\n    function toAddress(uint64 _id) internal view returns (address) {\\n        (bool success, address eth) = getEthAddress(_id);\\n        if (success) {\\n            return eth;\\n        } else {\\n            return toIDAddress(_id);\\n        }\\n    }\\n\\n    /**\\n     * @notice Given an Actor ID, converts it to a 20-byte ID address\\n     * \\n     * Note that this method does NOT check if the _id has a corresponding\\n     * Eth address. If you want that, try toAddress above.\\n     */\\n    function toIDAddress(uint64 _id) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly { addr := or(ZERO_ID_ADDRESS, _id) }\\n    }\\n\\n    // An address with all bits set. Used to clean higher-order bits\\n    address constant ADDRESS_MASK = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\\n\\n    /**\\n     * @notice Convert ID to Eth address by querying the lookup_delegated_address\\n     * precompile.\\n     *\\n     * If the actor ID corresponds to an Eth address, this will return (true, addr)\\n     * If the actor ID does NOT correspond to an Eth address, this will return (false, 0)\\n     * \\n     * --- About ---\\n     * \\n     * The lookup_delegated_address precompile retrieves the actor state corresponding\\n     * to the id. If the actor has a delegated address, it is returned using fil\\n     * address encoding (see below).\\n     *\\n     * f4, or delegated addresses, have a namespace as well as a subaddress that can\\n     * be up to 54 bytes long. This is to support future address formats. Currently,\\n     * though, the f4 format is only used to support Eth addresses.\\n     *\\n     * Consequently, the only addresses lookup_delegated_address should return have:\\n     * - Prefix:     \\\"f4\\\" address      - 1 byte   - (0x04)\\n     * - Namespace:  EAM actor id 10   - 1 byte   - (0x0A)\\n     * - Subaddress: EVM-style address - 20 bytes - (EVM address)\\n     * \\n     * This method checks that the precompile output exactly matches this format:\\n     * 22 bytes, starting with 0x040A.\\n     * \\n     * If we get anything else, we return (false, 0x00).\\n     */\\n    function getEthAddress(uint64 _id) internal view returns (bool success, address eth) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Call LOOKUP_DELEGATED_ADDRESS precompile\\n            //\\n            // Input: uint64 id, in standard EVM format (left-padded to 32 bytes)\\n            //\\n            // Output: LOOKUP_DELEGATED_ADDRESS returns an f4-encoded address. \\n            // For Eth addresses, the format is a 20-byte address, prefixed with\\n            // 0x040A. So, we expect exactly 22 bytes of returndata.\\n            // \\n            // Since we want to read an address from the returndata, we place the\\n            // output at memory offset 10, which means the address is already\\n            // word-aligned (10 + 22 == 32)\\n            //\\n            // NOTE: success and returndatasize checked at the end of the function\\n            mstore(0, _id)\\n            success := staticcall(gas(), LOOKUP_DELEGATED_ADDRESS, 0, 32, 10, 22)\\n\\n            // Read result. LOOKUP_DELEGATED_ADDRESS returns raw, unpadded\\n            // bytes. Assuming we succeeded, we can extract the eth address\\n            // by reading from offset 0 and cleaning any higher-order bits:\\n            let result := mload(0)\\n            eth := and(ADDRESS_MASK, result)\\n\\n            // Check that the returned address has the expected prefix. The\\n            // prefix is the first 2 bytes of returndata, located at memory \\n            // offset 10. \\n            // \\n            // To isolate it, shift right by the # of bits in an address (160),\\n            // and clean all but the last 2 bytes.\\n            let prefix := and(0xFFFF, shr(160, result))\\n            if iszero(eq(prefix, 0x040A)) {\\n                success := false\\n                eth := 0\\n            }\\n        }\\n        // Checking these here because internal functions don't have\\n        // a good way to return from inline assembly.\\n        //\\n        // But, it's very important we do check these. If the output\\n        // wasn't exactly what we expected, we assume there's no eth\\n        // address and return (false, 0).\\n        if (!success || returnDataSize() != 22) {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert Eth address to ID by querying the resolve_address precompile.\\n     *\\n     * If the passed-in address is already in ID form, returns (true, id)\\n     * If the Eth address has no corresponding ID address, returns (false, 0)\\n     * Otherwise, the lookup succeeds and this returns (true, id)\\n     * \\n     * --- About ---\\n     *\\n     * The resolve_address precompile can resolve any fil-encoded address to its\\n     * corresponding actor ID, if there is one. This means resolve_address handles\\n     * all address protocols: f0, f1, f2, f3, and f4. \\n     * \\n     * An address might not have an actor ID if it does not exist in state yet. A \\n     * typical example of this is a public-key-type address, which can exist even \\n     * if it hasn't been used on-chain yet.\\n     *\\n     * This method is only meant to look up ids for Eth addresses, so it contains\\n     * very specific logic to correctly encode an Eth address into its f4 format.\\n     * \\n     * Note: This is essentially just the reverse of getEthAddress above, so check\\n     * the comments there for more details on f4 encoding.\\n     */\\n    function getActorID(address _eth) internal view returns (bool success, uint64 id) {\\n        // First - if we already have an ID address, we can just return that\\n        (success, id) = isIDAddress(_eth);\\n        if (success) {\\n            return (success, id);\\n        }\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert Eth address to f4 format: 22 bytes, with prefix 0x040A.\\n            // (see getEthAddress above for more details on this format)\\n            //\\n            // We're going to pass the 22 bytes to the precompile without any\\n            // padding or length, so everything will be left-aligned. Since \\n            // addresses are right-aligned, we need to shift everything left:\\n            // - 0x040A prefix - shifted left 240 bits (30 bytes * 8 bits)\\n            // - Eth address   - shifted left 80 bits  (10 bytes * 8 bits)\\n            let input := or(\\n                shl(240, 0x040A),\\n                shl(80, _eth)\\n            )\\n            // Call RESOLVE_ADDRESS precompile\\n            //\\n            // Input: Eth address in f4 format. 22 bytes, no padding or length\\n            //\\n            // Output: RESOLVE_ADDRESS returns a uint64 actor ID in standard EVM\\n            // format (left-padded to 32 bytes).\\n            // \\n            // NOTE: success and returndatasize checked at the end of the function\\n            mstore(0, input)\\n            success := staticcall(gas(), RESOLVE_ADDRESS, 0, 22, 0, 32)\\n\\n            // Read result and clean higher-order bits, just in case.\\n            // If successful, this will be the actor id.\\n            id := and(MAX_U64, mload(0))\\n        }\\n        // Checking these here because internal functions don't have\\n        // a good way to return from inline assembly.\\n        //\\n        // But, it's very important we do check these. If the output\\n        // wasn't exactly what we expected, we assume there's no ID\\n        // address and return (false, 0).\\n        if (!success || returnDataSize() != 32) {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Replacement for Solidity's address.send and address.transfer\\n     * This sends _amount to _recipient, forwarding all available gas and\\n     * reverting if there are any errors.\\n     *\\n     * If _recpient is an Eth address, this works the way you'd\\n     * expect the EVM to work.\\n     *\\n     * If _recpient is an ID address, this works if:\\n     * 1. The ID corresponds to an Eth EOA address      (EthAccount actor)\\n     * 2. The ID corresponds to an Eth contract address (EVM actor)\\n     * 3. The ID corresponds to a BLS/SECPK address     (Account actor)\\n     *\\n     * If _recpient is some other Filecoin-native actor, this will revert.\\n     */\\n    function sendValue(address payable _recipient, uint _amount) internal {\\n        if (address(this).balance < _amount) revert InsufficientFunds();\\n\\n        (bool success, ) = _recipient.call{value: _amount}(\\\"\\\");\\n        if (!success) revert CallFailed();\\n    }\\n\\n    function returnDataSize() private pure returns (uint size) {\\n        /// @solidity memory-safe-assembly\\n        assembly { size := returndatasize() }\\n    }\\n}\\n\",\"keccak256\":\"0x8707b4f152e92b852090c313419c0dc772eebf4428472a0659dd6b13dd6bee31\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"lib/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b62af9baf5b8e991ed7531bc87f45550ba9d61e8dbff5caf237ccaf3a3fd843\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161371c61004c6000396000818161107f015281816110bf015281816111440152818161118401526111fc015261371c6000f3fe6080604052600436106101745760003560e01c806301ffc9a71461017d57806309448a86146101b35780631794bb3c146101e15780631917a6a714610201578063241c054a14610221578063248a9ca3146102415780632e1a7d4d1461026e5780632f2ff15d1461028e578063335f1839146102ae57806336568abe146102ce5780633659cfe6146102ee5780634184acd51461030e57806344324a791461033c5780634eaf14a61461036d5780634f1ef286146103cf57806352d1902d146103e257806354fd4d50146103f75780636ef2dafc14610428578063717e9d26146104625780637efedebe146104995780638199b668146104ce57806391d14854146104e5578063a217fddf14610505578063aaf10f421461051a578063bea914e51461053c578063c7d3ebf81461055c578063c8025dda1461057c578063ce0961101461059c578063d0e30db0146105ca578063d547741f146105d2578063e460512e146105f2578063eeb77ba81461062957005b3661017b57005b005b34801561018957600080fd5b5061019d610198366004612a9c565b610649565b6040516101aa9190612ac7565b60405180910390f35b3480156101bf57600080fd5b50610133546101d4906001600160a01b031681565b6040516101aa9190612b19565b3480156101ed57600080fd5b5061017b6101fc366004612b76565b610680565b34801561020d57600080fd5b5061017b61021c366004612be0565b610843565b34801561022d57600080fd5b5061017b61023c366004612c01565b610a0f565b34801561024d57600080fd5b5061026161025c366004612c36565b610c96565b6040516101aa9190612c5d565b34801561027a57600080fd5b5061017b610289366004612c36565b610cab565b34801561029a57600080fd5b5061017b6102a9366004612c6b565b610e6f565b3480156102ba57600080fd5b5061017b6102c9366004612ca8565b610e90565b3480156102da57600080fd5b5061017b6102e9366004612c6b565b611043565b3480156102fa57600080fd5b5061017b610309366004612cdb565b611075565b34801561031a57600080fd5b50610261610329366004612be0565b61012e6020526000908152604090205481565b34801561034857600080fd5b5061019d610357366004612be0565b6101306020526000908152604090205460ff1681565b34801561037957600080fd5b506103c1610388366004612be0565b6001600160401b0316600090815261012d6020908152604091829020825180840190935280548084526001909101549290910182905291565b6040516101aa929190612cfc565b61017b6103dd366004612e1c565b61113a565b3480156103ee57600080fd5b506102616111ef565b34801561040357600080fd5b506040805180820182526002815261763160f01b602082015290516101aa9190612ec1565b34801561043457600080fd5b50610261610443366004612be0565b6001600160401b0316600090815261012d602052604090206001015490565b34801561046e57600080fd5b5061026161047d366004612be0565b6001600160401b0316600090815261012f602052604090205490565b3480156104a557600080fd5b506103c16104b4366004612be0565b61012d602052600090815260409020805460019091015482565b3480156104da57600080fd5b506102616101315481565b3480156104f157600080fd5b5061019d610500366004612c6b565b61124c565b34801561051157600080fd5b50610261600081565b34801561052657600080fd5b5061052f611277565b6040516101aa9190612edb565b34801561054857600080fd5b5061017b610557366004612be0565b611286565b34801561056857600080fd5b5061017b610577366004612c36565b61133a565b34801561058857600080fd5b50610261610597366004612be0565b6113d2565b3480156105a857600080fd5b506102616105b7366004612be0565b61012f6020526000908152604090205481565b61017b61154d565b3480156105de57600080fd5b5061017b6105ed366004612c6b565b61168e565b3480156105fe57600080fd5b5061026161060d366004612be0565b6001600160401b0316600090815261012d602052604090205490565b34801561063557600080fd5b5061017b610644366004612ca8565b6116aa565b60006001600160e01b03198216637965db0b60e01b148061067a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600054610100900460ff16158080156106a05750600054600160ff909116105b806106c157506106af306118f3565b1580156106c1575060005460ff166001145b6106e65760405162461bcd60e51b81526004016106dd90612f37565b60405180910390fd5b6000805460ff191660011790558015610709576000805461ff0019166101001790555b610711611902565b610719611929565b610721611902565b61013380546001600160a01b038087166001600160a01b031992831617909255610132805492861692909116919091179055811580610761575061271082115b1561077f57604051635435b28960e11b815260040160405180910390fd5b610131829055610790600033611958565b6107a96000805160206136008339815191526000611962565b6107c160008051602061360083398151915233610e6f565b6107d96000805160206136a783398151915233610e6f565b6107f26000805160206136a78339815191526000611962565b801561083d576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061083490600190612f5b565b60405180910390a15b50505050565b61085b6000805160206136a78339815191523361124c565b61087857604051633006171960e21b815260040160405180910390fd5b6001600160401b0381166000908152610130602052604090205460ff166108b2576040516322f0076960e21b815260040160405180910390fd5b61013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a9190612f74565b6001600160a01b03166315b2f22f826040518263ffffffff1660e01b81526004016109559190612fa4565b602060405180830381865afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109969190612fc5565b6109b3576040516349e27cff60e01b815260040160405180910390fd5b6001600160401b0381166000908152610130602052604090819020805460ff19169055517f4ae1ac1eeb2bb87a829856665535c45f6381998822857dde5d4573a1b4a4a9c190610a04908390612fa4565b60405180910390a150565b6101325460408051635ab1bd5360e01b8152905184926001600160a01b031691635ab1bd539160048083019260209291908290030181865afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190612f74565b6001600160a01b031663154caabb826040518263ffffffff1660e01b8152600401610aa89190612fa4565b602060405180830381865afa158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae99190612fc5565b610b06576040516363b397b960e01b815260040160405180910390fd5b6101325460408051635ab1bd5360e01b815290516000926001600160a01b031691635ab1bd539160048083019260209291908290030181865afa158015610b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b759190612f74565b604051638097354f60e01b81529091506001600160a01b03821690638097354f90610ba4903390600401612edb565b602060405180830381865afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190612fc5565b610c0257604051633006171960e21b815260040160405180910390fd5b82600003610c2357604051635435b28960e11b815260040160405180910390fd5b610c2d85846119b5565b604051634978e4b760e01b81526001600160a01b03821690634978e4b790610c5d90879087904290600401612fe6565b600060405180830381600087803b158015610c7757600080fd5b505af1158015610c8b573d6000803e3d6000fd5b505050505050505050565b60009081526065602052604090206001015490565b610cb3611c2c565b80600003610cd457604051635435b28960e11b815260040160405180910390fd5b6000610cdf33611c55565b9050600080610cf6836001600160a01b0316611c9c565b9150915081610d175760405162f08f6760e71b815260040160405180910390fd5b6000806000610d2584611d0d565b919450925090506000610d388385613024565b90506000818911610d495788610d4b565b815b905060008315610dd657610d5f8683613037565b6001600160401b038816600090815261012d6020526040902060010154909150610d8a908790613037565b6001600160401b038816600090815261012d60205260409020600181019190915554610db7908290613037565b6001600160401b038816600090815261012d6020526040902055610e16565b6001600160401b038716600090815261012d6020526040902054610dfb908390613037565b6001600160401b038816600090815261012d60205260409020555b610e203383611f05565b7fe4b3039f013ad4f4d16ea3537d0ee0ae75dad7fb7c97f1ff24fd9f10bd85b89b8783604051610e5192919061304a565b60405180910390a1505050505050505050610e6c6001609755565b50565b610e7882610c96565b610e818161201f565b610e8b8383612029565b505050565b61013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f089190612f74565b6001600160a01b0316336001600160a01b031614158015610f3e5750610f3c6000805160206136008339815191523361124c565b155b15610f5c57604051633006171960e21b815260040160405180910390fd5b80600003610fb057610131546001600160401b038316600090815261012f6020526040808220839055516000805160206136c783398151915292610fa492869290919061306d565b60405180910390a15050565b6001600160401b038216600090815261012f6020526040902054612710821180610fd957508082145b15610ff757604051635435b28960e11b815260040160405180910390fd5b6001600160401b038316600090815261012f602052604090819020839055516000805160206136c78339815191529061103590859084908690612fe6565b60405180910390a1505b5050565b6001600160a01b038116331461106b5760405162461bcd60e51b81526004016106dd906130d4565b61103f82826120af565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036110bd5760405162461bcd60e51b81526004016106dd9061311b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110ef612116565b6001600160a01b0316146111155760405162461bcd60e51b81526004016106dd90613162565b61111e81612132565b60408051600080825260208201909252610e6c91839190612167565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111825760405162461bcd60e51b81526004016106dd9061311b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111b4612116565b6001600160a01b0316146111da5760405162461bcd60e51b81526004016106dd90613162565b6111e382612132565b61103f82826001612167565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112395760405162461bcd60e51b81526004016106dd906131c7565b5060008051602061364083398151915290565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000611281612116565b905090565b61013260009054906101000a90046001600160a01b03166001600160a01b031663e1dda2a96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fe9190612f74565b6001600160a01b0316336001600160a01b03161461132f57604051633006171960e21b815260040160405180910390fd5b610e6c8160006119b5565b6113526000805160206136008339815191523361124c565b61136f57604051633006171960e21b815260040160405180910390fd5b80158061137e57506101315481145b1561139c57604051635435b28960e11b815260040160405180910390fd5b6101318190556040517fe49b6558d30d6f2b9c3bb53bb6bedb636cf1dd53419057f0ab65812a7739639e90610a04908390612c5d565b600080600061013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa15801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f9190612f74565b6001600160a01b03166316e71d49856040518263ffffffff1660e01b815260040161147a9190612fa4565b60408051808303816000875af1158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc91906131e2565b6001600160401b038616600090815261012f60205260408120549294509092506114e884848385612249565b6001600160401b038716600090815261012d60209081526040808320815180830190925280548252600101549181018290529293508190611529908561229f565b915091508061153e5750979650505050505050565b50600098975050505050505050565b611555611c2c565b34600081900361157857604051635435b28960e11b815260040160405180910390fd5b600061158333611c55565b905060008061159a836001600160a01b0316611c9c565b91509150816115bb5760405162f08f6760e71b815260040160405180910390fd5b6001600160401b038116600090815261012d6020526040902080546115e1908690613024565b81556101335460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918891600480830192600092919082900301818588803b15801561162b57600080fd5b505af115801561163f573d6000803e3d6000fd5b50505050507f73dee9c602a838e7139b8ea81aab0fa49d1da28733bb0481f9ea4b512bdfda7d828660405161167592919061304a565b60405180910390a1505050505061168c6001609755565b565b61169782610c96565b6116a08161201f565b610e8b83836120af565b6116b2611c2c565b6116ca6000805160206136a78339815191523361124c565b6116e757604051633006171960e21b815260040160405180910390fd5b8060000361170857604051635435b28960e11b815260040160405180910390fd5b61013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa15801561175c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117809190612f74565b6001600160a01b03166315b2f22f836040518263ffffffff1660e01b81526004016117ab9190612fa4565b602060405180830381865afa1580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec9190612fc5565b611809576040516349e27cff60e01b815260040160405180910390fd5b61188b828261013260009054906101000a90046001600160a01b03166001600160a01b0316630ee0deba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118869190612f74565b612334565b6001600160401b0382166000908152610130602052604090819020805460ff19166001179055517fe920a3bd2d05623539eb004a3d191cb43a32f41b4dce001e9c4d9ee2e7a443e3906118e1908490849061304a565b60405180910390a161103f6001609755565b6001600160a01b03163b151590565b600054610100900460ff1661168c5760405162461bcd60e51b81526004016106dd9061325d565b600054610100900460ff166119505760405162461bcd60e51b81526004016106dd9061325d565b61168c6125dd565b61103f8282612029565b600061196d83610c96565b600084815260656020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a309190612f74565b6001600160a01b03166316e71d49856040518263ffffffff1660e01b8152600401611a5b9190612fa4565b60408051808303816000875af1158015611a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9d91906131e2565b6001600160401b038616600090815261012f6020526040812054929450909250611ac984848785612249565b6001600160401b038716600090815261012d6020908152604091829020825180840190935280548084526001909101549183018290529293509091611b0d91613024565b821115611b2d57604051633a23d82560e01b815260040160405180910390fd5b600080611b3e83602001518561229f565b90925090508115611bf65780611ba457818360200151611b5e9190613024565b60208401528251611b70908390613037565b835260405160008051602061366083398151915290611b97908b908590600090869061326d565b60405180910390a1611bf6565b818360200151611bb49190613037565b60208401528251611bc6908390613024565b835260405160008051602061366083398151915290611bed908b90600090869086906132a2565b60405180910390a15b50506001600160401b03909616600090815261012d60209081526040909120875181559601516001909601959095555050505050565b600260975403611c4e5760405162461bcd60e51b81526004016106dd90613301565b6002609755565b6000806000611c6384612604565b9150915081611c7457509192915050565b600080611c8083612636565b9150915081611c93575093949350505050565b95945050505050565b600080611ca883612604565b90925090508115611cb857915091565b8260501b61040a60f01b178060005260206000601660006001607f60991b015afa92506000516001600160401b0316915050811580611cf857503d602014155b15611d0857506000928392509050565b915091565b600080600080600061013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8d9190612f74565b6001600160a01b03166316e71d49876040518263ffffffff1660e01b8152600401611db89190612fa4565b60408051808303816000875af1158015611dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfa91906131e2565b6001600160401b038816600090815261012f6020526040812054929450909250611e2684848385612249565b6001600160401b038916600090815261012d60209081526040808320815180830190925280548252600101549181018290529293508190611e67908561229f565b9150915080611eeb578251600090611e80908490613037565b9050828460200151611e929190613024565b6001600160401b038d16600090815261012d60205260409020600101558351611ebc908490613037565b6001600160401b038d16600090815261012d60205260408120919091559a5098509650611efe95505050505050565b915190985096509450611efe9350505050565b9193909250565b610133546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611f37903090600401612edb565b602060405180830381865afa158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f789190613311565b905081811015611f9b5760405163356680b760e01b815260040160405180910390fd5b8015610e8b5761013354604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90611fd2908590600401612c5d565b600060405180830381600087803b158015611fec57600080fd5b505af1158015612000573d6000803e3d6000fd5b50610e8b925050506001600160a01b03841683612697565b6001609755565b610e6c81336126c2565b612033828261124c565b61103f5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561206b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6120b9828261124c565b1561103f5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020613640833981519152546001600160a01b031690565b61214a6000805160206136008339815191523361124c565b610e6c57604051633006171960e21b815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561219a57610e8b8361271b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156121f4575060408051601f3d908101601f191682019092526121f191810190613311565b60015b6122105760405162461bcd60e51b81526004016106dd9061337d565b600080516020613640833981519152811461223d5760405162461bcd60e51b81526004016106dd906133d3565b50610e8b83838361276f565b6000806122568487613024565b90506000858211612268576000612272565b6122728683613037565b90508015612290576122878185612710612794565b92505050612297565b6000925050505b949350505050565b6000806000841180156122b25750600083115b156122e957828411156122d4576122c98385613037565b60019150915061232d565b6122de8484613037565b60009150915061232d565b6000841180156122f7575082155b156123075750829050600161232d565b831580156123155750600083115b156123255750819050600061232d565b506000905060015b9250929050565b61013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015612388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ac9190612f74565b6001600160a01b0316638097354f826040518263ffffffff1660e01b81526004016123d79190612edb565b602060405180830381865afa1580156123f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124189190612fc5565b6124355760405163037f91e960e61b815260040160405180910390fd5b6001600160401b038316600090815261012d60209081526040918290208251808401909352805483526001015490820181905283116124885782816020015161247e9190613037565b60208201526124ec565b8051602082015160009161249b91613024565b9050808411156124be57604051633a23d82560e01b815260040160405180910390fd5b60008260200151856124d09190613037565b6000602085015283519091506124e7908290613037565b835250505b6001600160401b038416600090815261012d60209081526040808320845181558285015160019091015561012e9091528120805485929061252e908490613024565b90915550506101335460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061256690859087906004016133e3565b6020604051808303816000875af1158015612585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a99190612fc5565b507f243212650e99fb205ebebf8fcde07325988e08f3f0501f252c2dc0aaef6f39cb848484604051610834939291906133f1565b600054610100900460ff166120185760405162461bcd60e51b81526004016106dd9061325d565b600080600160401b600160a01b03831660ff60981b810361263057600192506001600160401b03841691505b50915091565b600080826000526016600a602060006002607f60991b015afa9150600051806001600160a01b031691508060a01c61ffff1661040a811461267a5760009350600092505b5050811580611cf857503d601614611d0857506000928392509050565b600080600080600085875af1905080610e8b5760405162461bcd60e51b81526004016106dd90613443565b6126cc828261124c565b61103f576126d9816127b2565b6126e48360206127c4565b6040516020016126f5929190613475565b60408051601f198184030181529082905262461bcd60e51b82526106dd91600401612ec1565b612724816118f3565b6127405760405162461bcd60e51b81526004016106dd90613511565b60008051602061364083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61277883612936565b6000825111806127855750805b15610e8b5761083d8383612976565b60008260001904841183021582026127ab57600080fd5b5091020490565b606061067a6001600160a01b03831660145b606060006127d3836002613521565b6127de906002613024565b6001600160401b038111156127f5576127f5612d21565b6040519080825280601f01601f19166020018201604052801561281f576020820181803683370190505b509050600360fc1b8160008151811061283a5761283a613540565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061286957612869613540565b60200101906001600160f81b031916908160001a905350600061288d846002613521565b612898906001613024565b90505b6001811115612910576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106128cc576128cc613540565b1a60f81b8282815181106128e2576128e2613540565b60200101906001600160f81b031916908160001a90535060049490941c9361290981613556565b905061289b565b50831561292f5760405162461bcd60e51b81526004016106dd9061359f565b9392505050565b61293f8161271b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061292f8383604051806060016040528060278152602001613680602791396060600080856001600160a01b0316856040516129b391906135af565b600060405180830381855af49150503d80600081146129ee576040519150601f19603f3d011682016040523d82523d6000602084013e6129f3565b606091505b5091509150612a0486838387612a0e565b9695505050505050565b60608315612a4b578251600003612a4457612a28856118f3565b612a445760405162461bcd60e51b81526004016106dd906135ef565b5081612297565b6122978383815115612a605781518083602001fd5b8060405162461bcd60e51b81526004016106dd9190612ec1565b6001600160e01b031981165b8114610e6c57600080fd5b803561067a81612a7a565b600060208284031215612ab157612ab1600080fd5b60006122978484612a91565b8015155b82525050565b6020810161067a8284612abd565b6001600160a01b031690565b600061067a612af5612af284612ad5565b90565b612ad5565b600061067a82612ae1565b600061067a82612afa565b612ac181612b05565b6020810161067a8284612b10565b600061067a82612ad5565b600061067a82612b27565b612a8681612b32565b803561067a81612b3d565b612a8681612b27565b803561067a81612b51565b80612a86565b803561067a81612b65565b600080600060608486031215612b8e57612b8e600080fd5b6000612b9a8686612b46565b9350506020612bab86828701612b5a565b9250506040612bbc86828701612b6b565b9150509250925092565b6001600160401b038116612a86565b803561067a81612bc6565b600060208284031215612bf557612bf5600080fd5b60006122978484612bd5565b600080600060608486031215612c1957612c19600080fd5b6000612c258686612bd5565b9350506020612bab86828701612bd5565b600060208284031215612c4b57612c4b600080fd5b60006122978484612b6b565b80612ac1565b6020810161067a8284612c57565b60008060408385031215612c8157612c81600080fd5b6000612c8d8585612b6b565b9250506020612c9e85828601612b5a565b9150509250929050565b60008060408385031215612cbe57612cbe600080fd5b6000612cca8585612bd5565b9250506020612c9e85828601612b6b565b600060208284031215612cf057612cf0600080fd5b60006122978484612b5a565b60408101612d0a8285612c57565b61292f6020830184612c57565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b612d4082612d17565b81018181106001600160401b0382111715612d5d57612d5d612d21565b6040525050565b6000612d6f60405190565b9050612d7b8282612d37565b919050565b60006001600160401b03821115612d9957612d99612d21565b612da282612d17565b60200192915050565b82818337506000910152565b6000612dca612dc584612d80565b612d64565b905082815260208101848484011115612de557612de5600080fd5b612df0848285612dab565b509392505050565b600082601f830112612e0c57612e0c600080fd5b8135612297848260208601612db7565b60008060408385031215612e3257612e32600080fd5b6000612e3e8585612b5a565b92505060208301356001600160401b03811115612e5d57612e5d600080fd5b612c9e85828601612df8565b60005b83811015612e84578181015183820152602001612e6c565b50506000910152565b6000612e97825190565b808452602084019350612eae818560208601612e69565b612eb781612d17565b9093019392505050565b6020808252810161292f8184612e8d565b612ac181612b27565b6020810161067a8284612ed2565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b6020808252810161067a81612ee9565b600060ff821661067a565b612ac181612f47565b6020810161067a8284612f52565b805161067a81612b51565b600060208284031215612f8957612f89600080fd5b60006122978484612f69565b6001600160401b038116612ac1565b6020810161067a8284612f95565b801515612a86565b805161067a81612fb2565b600060208284031215612fda57612fda600080fd5b60006122978484612fba565b60608101612ff48286612f95565b6130016020830185612c57565b6122976040830184612c57565b634e487b7160e01b600052601160045260246000fd5b8082018082111561067a5761067a61300e565b8181038181111561067a5761067a61300e565b60408101612d0a8285612f95565b600061067a612af28381565b612ac181613058565b6060810161307b8286612f95565b6130016020830185613064565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150612f30565b6020808252810161067a81613088565b602c815260006020820160008051602061362083398151915281526b19195b1959d85d1958d85b1b60a21b60208201529150612f30565b6020808252810161067a816130e4565b602c815260006020820160008051602061362083398151915281526b6163746976652070726f787960a01b60208201529150612f30565b6020808252810161067a8161312b565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150612f30565b6020808252810161067a81613172565b805161067a81612b65565b600080604083850312156131f8576131f8600080fd5b600061320485856131d7565b9250506020612c9e858286016131d7565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612f30565b6020808252810161067a81613215565b6080810161327b8287612f95565b6132886020830186612c57565b6132956040830185613064565b611c936060830184612abd565b608081016132b08287612f95565b6132bd6020830186613064565b6132956040830185612c57565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291505b5060200190565b6020808252810161067a816132ca565b60006020828403121561332657613326600080fd5b600061229784846131d7565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150612f30565b6020808252810161067a81613332565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150612f30565b6020808252810161067a8161338d565b60408101612d0a8285612ed2565b606081016133ff8286612f95565b61340c6020830185612c57565b6122976040830184612ed2565b601381526000602082017211551217d514905394d1915497d19052531151606a1b815291506132fa565b6020808252810161067a81613419565b600061345d825190565b61346b818560208601612e69565b9290920192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170160006134a18285613453565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110191506122978284613453565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150612f30565b6020808252810161067a816134c7565b8181028082158382048514176135395761353961300e565b5092915050565b634e487b7160e01b600052603260045260246000fd5b6000816135655761356561300e565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260006132fa565b6020808252810161067a8161356d565b600061292f8284613453565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506132fa565b6020808252810161067a816135bb56febd162f0ed5d9ba0d62460e28548c2d494e547f6a13b10c140ac720c9196c50f946756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc772d8d1c74df48b2a983c30ed06fb65bb4819c7e61c7d97766a825bbee5a596f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656499dec1e9e5d1a31584b10bc1a98110b3c09aa0bfae64dbe2f6188550308bf84391147ad9b4ecd1955cddf8d3a9c61eb67a1b97c9411912f17865e356b304bd6da26469706673582212202eec4d5955659485996a219927b51b6326f25972ddb7786032dd17e605a0f24c64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101745760003560e01c806301ffc9a71461017d57806309448a86146101b35780631794bb3c146101e15780631917a6a714610201578063241c054a14610221578063248a9ca3146102415780632e1a7d4d1461026e5780632f2ff15d1461028e578063335f1839146102ae57806336568abe146102ce5780633659cfe6146102ee5780634184acd51461030e57806344324a791461033c5780634eaf14a61461036d5780634f1ef286146103cf57806352d1902d146103e257806354fd4d50146103f75780636ef2dafc14610428578063717e9d26146104625780637efedebe146104995780638199b668146104ce57806391d14854146104e5578063a217fddf14610505578063aaf10f421461051a578063bea914e51461053c578063c7d3ebf81461055c578063c8025dda1461057c578063ce0961101461059c578063d0e30db0146105ca578063d547741f146105d2578063e460512e146105f2578063eeb77ba81461062957005b3661017b57005b005b34801561018957600080fd5b5061019d610198366004612a9c565b610649565b6040516101aa9190612ac7565b60405180910390f35b3480156101bf57600080fd5b50610133546101d4906001600160a01b031681565b6040516101aa9190612b19565b3480156101ed57600080fd5b5061017b6101fc366004612b76565b610680565b34801561020d57600080fd5b5061017b61021c366004612be0565b610843565b34801561022d57600080fd5b5061017b61023c366004612c01565b610a0f565b34801561024d57600080fd5b5061026161025c366004612c36565b610c96565b6040516101aa9190612c5d565b34801561027a57600080fd5b5061017b610289366004612c36565b610cab565b34801561029a57600080fd5b5061017b6102a9366004612c6b565b610e6f565b3480156102ba57600080fd5b5061017b6102c9366004612ca8565b610e90565b3480156102da57600080fd5b5061017b6102e9366004612c6b565b611043565b3480156102fa57600080fd5b5061017b610309366004612cdb565b611075565b34801561031a57600080fd5b50610261610329366004612be0565b61012e6020526000908152604090205481565b34801561034857600080fd5b5061019d610357366004612be0565b6101306020526000908152604090205460ff1681565b34801561037957600080fd5b506103c1610388366004612be0565b6001600160401b0316600090815261012d6020908152604091829020825180840190935280548084526001909101549290910182905291565b6040516101aa929190612cfc565b61017b6103dd366004612e1c565b61113a565b3480156103ee57600080fd5b506102616111ef565b34801561040357600080fd5b506040805180820182526002815261763160f01b602082015290516101aa9190612ec1565b34801561043457600080fd5b50610261610443366004612be0565b6001600160401b0316600090815261012d602052604090206001015490565b34801561046e57600080fd5b5061026161047d366004612be0565b6001600160401b0316600090815261012f602052604090205490565b3480156104a557600080fd5b506103c16104b4366004612be0565b61012d602052600090815260409020805460019091015482565b3480156104da57600080fd5b506102616101315481565b3480156104f157600080fd5b5061019d610500366004612c6b565b61124c565b34801561051157600080fd5b50610261600081565b34801561052657600080fd5b5061052f611277565b6040516101aa9190612edb565b34801561054857600080fd5b5061017b610557366004612be0565b611286565b34801561056857600080fd5b5061017b610577366004612c36565b61133a565b34801561058857600080fd5b50610261610597366004612be0565b6113d2565b3480156105a857600080fd5b506102616105b7366004612be0565b61012f6020526000908152604090205481565b61017b61154d565b3480156105de57600080fd5b5061017b6105ed366004612c6b565b61168e565b3480156105fe57600080fd5b5061026161060d366004612be0565b6001600160401b0316600090815261012d602052604090205490565b34801561063557600080fd5b5061017b610644366004612ca8565b6116aa565b60006001600160e01b03198216637965db0b60e01b148061067a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600054610100900460ff16158080156106a05750600054600160ff909116105b806106c157506106af306118f3565b1580156106c1575060005460ff166001145b6106e65760405162461bcd60e51b81526004016106dd90612f37565b60405180910390fd5b6000805460ff191660011790558015610709576000805461ff0019166101001790555b610711611902565b610719611929565b610721611902565b61013380546001600160a01b038087166001600160a01b031992831617909255610132805492861692909116919091179055811580610761575061271082115b1561077f57604051635435b28960e11b815260040160405180910390fd5b610131829055610790600033611958565b6107a96000805160206136008339815191526000611962565b6107c160008051602061360083398151915233610e6f565b6107d96000805160206136a783398151915233610e6f565b6107f26000805160206136a78339815191526000611962565b801561083d576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061083490600190612f5b565b60405180910390a15b50505050565b61085b6000805160206136a78339815191523361124c565b61087857604051633006171960e21b815260040160405180910390fd5b6001600160401b0381166000908152610130602052604090205460ff166108b2576040516322f0076960e21b815260040160405180910390fd5b61013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a9190612f74565b6001600160a01b03166315b2f22f826040518263ffffffff1660e01b81526004016109559190612fa4565b602060405180830381865afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109969190612fc5565b6109b3576040516349e27cff60e01b815260040160405180910390fd5b6001600160401b0381166000908152610130602052604090819020805460ff19169055517f4ae1ac1eeb2bb87a829856665535c45f6381998822857dde5d4573a1b4a4a9c190610a04908390612fa4565b60405180910390a150565b6101325460408051635ab1bd5360e01b8152905184926001600160a01b031691635ab1bd539160048083019260209291908290030181865afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190612f74565b6001600160a01b031663154caabb826040518263ffffffff1660e01b8152600401610aa89190612fa4565b602060405180830381865afa158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae99190612fc5565b610b06576040516363b397b960e01b815260040160405180910390fd5b6101325460408051635ab1bd5360e01b815290516000926001600160a01b031691635ab1bd539160048083019260209291908290030181865afa158015610b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b759190612f74565b604051638097354f60e01b81529091506001600160a01b03821690638097354f90610ba4903390600401612edb565b602060405180830381865afa158015610bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be59190612fc5565b610c0257604051633006171960e21b815260040160405180910390fd5b82600003610c2357604051635435b28960e11b815260040160405180910390fd5b610c2d85846119b5565b604051634978e4b760e01b81526001600160a01b03821690634978e4b790610c5d90879087904290600401612fe6565b600060405180830381600087803b158015610c7757600080fd5b505af1158015610c8b573d6000803e3d6000fd5b505050505050505050565b60009081526065602052604090206001015490565b610cb3611c2c565b80600003610cd457604051635435b28960e11b815260040160405180910390fd5b6000610cdf33611c55565b9050600080610cf6836001600160a01b0316611c9c565b9150915081610d175760405162f08f6760e71b815260040160405180910390fd5b6000806000610d2584611d0d565b919450925090506000610d388385613024565b90506000818911610d495788610d4b565b815b905060008315610dd657610d5f8683613037565b6001600160401b038816600090815261012d6020526040902060010154909150610d8a908790613037565b6001600160401b038816600090815261012d60205260409020600181019190915554610db7908290613037565b6001600160401b038816600090815261012d6020526040902055610e16565b6001600160401b038716600090815261012d6020526040902054610dfb908390613037565b6001600160401b038816600090815261012d60205260409020555b610e203383611f05565b7fe4b3039f013ad4f4d16ea3537d0ee0ae75dad7fb7c97f1ff24fd9f10bd85b89b8783604051610e5192919061304a565b60405180910390a1505050505050505050610e6c6001609755565b50565b610e7882610c96565b610e818161201f565b610e8b8383612029565b505050565b61013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f089190612f74565b6001600160a01b0316336001600160a01b031614158015610f3e5750610f3c6000805160206136008339815191523361124c565b155b15610f5c57604051633006171960e21b815260040160405180910390fd5b80600003610fb057610131546001600160401b038316600090815261012f6020526040808220839055516000805160206136c783398151915292610fa492869290919061306d565b60405180910390a15050565b6001600160401b038216600090815261012f6020526040902054612710821180610fd957508082145b15610ff757604051635435b28960e11b815260040160405180910390fd5b6001600160401b038316600090815261012f602052604090819020839055516000805160206136c78339815191529061103590859084908690612fe6565b60405180910390a1505b5050565b6001600160a01b038116331461106b5760405162461bcd60e51b81526004016106dd906130d4565b61103f82826120af565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036110bd5760405162461bcd60e51b81526004016106dd9061311b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110ef612116565b6001600160a01b0316146111155760405162461bcd60e51b81526004016106dd90613162565b61111e81612132565b60408051600080825260208201909252610e6c91839190612167565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111825760405162461bcd60e51b81526004016106dd9061311b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111b4612116565b6001600160a01b0316146111da5760405162461bcd60e51b81526004016106dd90613162565b6111e382612132565b61103f82826001612167565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112395760405162461bcd60e51b81526004016106dd906131c7565b5060008051602061364083398151915290565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000611281612116565b905090565b61013260009054906101000a90046001600160a01b03166001600160a01b031663e1dda2a96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fe9190612f74565b6001600160a01b0316336001600160a01b03161461132f57604051633006171960e21b815260040160405180910390fd5b610e6c8160006119b5565b6113526000805160206136008339815191523361124c565b61136f57604051633006171960e21b815260040160405180910390fd5b80158061137e57506101315481145b1561139c57604051635435b28960e11b815260040160405180910390fd5b6101318190556040517fe49b6558d30d6f2b9c3bb53bb6bedb636cf1dd53419057f0ab65812a7739639e90610a04908390612c5d565b600080600061013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa15801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f9190612f74565b6001600160a01b03166316e71d49856040518263ffffffff1660e01b815260040161147a9190612fa4565b60408051808303816000875af1158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc91906131e2565b6001600160401b038616600090815261012f60205260408120549294509092506114e884848385612249565b6001600160401b038716600090815261012d60209081526040808320815180830190925280548252600101549181018290529293508190611529908561229f565b915091508061153e5750979650505050505050565b50600098975050505050505050565b611555611c2c565b34600081900361157857604051635435b28960e11b815260040160405180910390fd5b600061158333611c55565b905060008061159a836001600160a01b0316611c9c565b91509150816115bb5760405162f08f6760e71b815260040160405180910390fd5b6001600160401b038116600090815261012d6020526040902080546115e1908690613024565b81556101335460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918891600480830192600092919082900301818588803b15801561162b57600080fd5b505af115801561163f573d6000803e3d6000fd5b50505050507f73dee9c602a838e7139b8ea81aab0fa49d1da28733bb0481f9ea4b512bdfda7d828660405161167592919061304a565b60405180910390a1505050505061168c6001609755565b565b61169782610c96565b6116a08161201f565b610e8b83836120af565b6116b2611c2c565b6116ca6000805160206136a78339815191523361124c565b6116e757604051633006171960e21b815260040160405180910390fd5b8060000361170857604051635435b28960e11b815260040160405180910390fd5b61013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa15801561175c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117809190612f74565b6001600160a01b03166315b2f22f836040518263ffffffff1660e01b81526004016117ab9190612fa4565b602060405180830381865afa1580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec9190612fc5565b611809576040516349e27cff60e01b815260040160405180910390fd5b61188b828261013260009054906101000a90046001600160a01b03166001600160a01b0316630ee0deba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118869190612f74565b612334565b6001600160401b0382166000908152610130602052604090819020805460ff19166001179055517fe920a3bd2d05623539eb004a3d191cb43a32f41b4dce001e9c4d9ee2e7a443e3906118e1908490849061304a565b60405180910390a161103f6001609755565b6001600160a01b03163b151590565b600054610100900460ff1661168c5760405162461bcd60e51b81526004016106dd9061325d565b600054610100900460ff166119505760405162461bcd60e51b81526004016106dd9061325d565b61168c6125dd565b61103f8282612029565b600061196d83610c96565b600084815260656020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008061013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a309190612f74565b6001600160a01b03166316e71d49856040518263ffffffff1660e01b8152600401611a5b9190612fa4565b60408051808303816000875af1158015611a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9d91906131e2565b6001600160401b038616600090815261012f6020526040812054929450909250611ac984848785612249565b6001600160401b038716600090815261012d6020908152604091829020825180840190935280548084526001909101549183018290529293509091611b0d91613024565b821115611b2d57604051633a23d82560e01b815260040160405180910390fd5b600080611b3e83602001518561229f565b90925090508115611bf65780611ba457818360200151611b5e9190613024565b60208401528251611b70908390613037565b835260405160008051602061366083398151915290611b97908b908590600090869061326d565b60405180910390a1611bf6565b818360200151611bb49190613037565b60208401528251611bc6908390613024565b835260405160008051602061366083398151915290611bed908b90600090869086906132a2565b60405180910390a15b50506001600160401b03909616600090815261012d60209081526040909120875181559601516001909601959095555050505050565b600260975403611c4e5760405162461bcd60e51b81526004016106dd90613301565b6002609755565b6000806000611c6384612604565b9150915081611c7457509192915050565b600080611c8083612636565b9150915081611c93575093949350505050565b95945050505050565b600080611ca883612604565b90925090508115611cb857915091565b8260501b61040a60f01b178060005260206000601660006001607f60991b015afa92506000516001600160401b0316915050811580611cf857503d602014155b15611d0857506000928392509050565b915091565b600080600080600061013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8d9190612f74565b6001600160a01b03166316e71d49876040518263ffffffff1660e01b8152600401611db89190612fa4565b60408051808303816000875af1158015611dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfa91906131e2565b6001600160401b038816600090815261012f6020526040812054929450909250611e2684848385612249565b6001600160401b038916600090815261012d60209081526040808320815180830190925280548252600101549181018290529293508190611e67908561229f565b9150915080611eeb578251600090611e80908490613037565b9050828460200151611e929190613024565b6001600160401b038d16600090815261012d60205260409020600101558351611ebc908490613037565b6001600160401b038d16600090815261012d60205260408120919091559a5098509650611efe95505050505050565b915190985096509450611efe9350505050565b9193909250565b610133546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611f37903090600401612edb565b602060405180830381865afa158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f789190613311565b905081811015611f9b5760405163356680b760e01b815260040160405180910390fd5b8015610e8b5761013354604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90611fd2908590600401612c5d565b600060405180830381600087803b158015611fec57600080fd5b505af1158015612000573d6000803e3d6000fd5b50610e8b925050506001600160a01b03841683612697565b6001609755565b610e6c81336126c2565b612033828261124c565b61103f5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561206b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6120b9828261124c565b1561103f5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020613640833981519152546001600160a01b031690565b61214a6000805160206136008339815191523361124c565b610e6c57604051633006171960e21b815260040160405180910390fd5b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561219a57610e8b8361271b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156121f4575060408051601f3d908101601f191682019092526121f191810190613311565b60015b6122105760405162461bcd60e51b81526004016106dd9061337d565b600080516020613640833981519152811461223d5760405162461bcd60e51b81526004016106dd906133d3565b50610e8b83838361276f565b6000806122568487613024565b90506000858211612268576000612272565b6122728683613037565b90508015612290576122878185612710612794565b92505050612297565b6000925050505b949350505050565b6000806000841180156122b25750600083115b156122e957828411156122d4576122c98385613037565b60019150915061232d565b6122de8484613037565b60009150915061232d565b6000841180156122f7575082155b156123075750829050600161232d565b831580156123155750600083115b156123255750819050600061232d565b506000905060015b9250929050565b61013260009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015612388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ac9190612f74565b6001600160a01b0316638097354f826040518263ffffffff1660e01b81526004016123d79190612edb565b602060405180830381865afa1580156123f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124189190612fc5565b6124355760405163037f91e960e61b815260040160405180910390fd5b6001600160401b038316600090815261012d60209081526040918290208251808401909352805483526001015490820181905283116124885782816020015161247e9190613037565b60208201526124ec565b8051602082015160009161249b91613024565b9050808411156124be57604051633a23d82560e01b815260040160405180910390fd5b60008260200151856124d09190613037565b6000602085015283519091506124e7908290613037565b835250505b6001600160401b038416600090815261012d60209081526040808320845181558285015160019091015561012e9091528120805485929061252e908490613024565b90915550506101335460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061256690859087906004016133e3565b6020604051808303816000875af1158015612585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a99190612fc5565b507f243212650e99fb205ebebf8fcde07325988e08f3f0501f252c2dc0aaef6f39cb848484604051610834939291906133f1565b600054610100900460ff166120185760405162461bcd60e51b81526004016106dd9061325d565b600080600160401b600160a01b03831660ff60981b810361263057600192506001600160401b03841691505b50915091565b600080826000526016600a602060006002607f60991b015afa9150600051806001600160a01b031691508060a01c61ffff1661040a811461267a5760009350600092505b5050811580611cf857503d601614611d0857506000928392509050565b600080600080600085875af1905080610e8b5760405162461bcd60e51b81526004016106dd90613443565b6126cc828261124c565b61103f576126d9816127b2565b6126e48360206127c4565b6040516020016126f5929190613475565b60408051601f198184030181529082905262461bcd60e51b82526106dd91600401612ec1565b612724816118f3565b6127405760405162461bcd60e51b81526004016106dd90613511565b60008051602061364083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61277883612936565b6000825111806127855750805b15610e8b5761083d8383612976565b60008260001904841183021582026127ab57600080fd5b5091020490565b606061067a6001600160a01b03831660145b606060006127d3836002613521565b6127de906002613024565b6001600160401b038111156127f5576127f5612d21565b6040519080825280601f01601f19166020018201604052801561281f576020820181803683370190505b509050600360fc1b8160008151811061283a5761283a613540565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061286957612869613540565b60200101906001600160f81b031916908160001a905350600061288d846002613521565b612898906001613024565b90505b6001811115612910576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106128cc576128cc613540565b1a60f81b8282815181106128e2576128e2613540565b60200101906001600160f81b031916908160001a90535060049490941c9361290981613556565b905061289b565b50831561292f5760405162461bcd60e51b81526004016106dd9061359f565b9392505050565b61293f8161271b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061292f8383604051806060016040528060278152602001613680602791396060600080856001600160a01b0316856040516129b391906135af565b600060405180830381855af49150503d80600081146129ee576040519150601f19603f3d011682016040523d82523d6000602084013e6129f3565b606091505b5091509150612a0486838387612a0e565b9695505050505050565b60608315612a4b578251600003612a4457612a28856118f3565b612a445760405162461bcd60e51b81526004016106dd906135ef565b5081612297565b6122978383815115612a605781518083602001fd5b8060405162461bcd60e51b81526004016106dd9190612ec1565b6001600160e01b031981165b8114610e6c57600080fd5b803561067a81612a7a565b600060208284031215612ab157612ab1600080fd5b60006122978484612a91565b8015155b82525050565b6020810161067a8284612abd565b6001600160a01b031690565b600061067a612af5612af284612ad5565b90565b612ad5565b600061067a82612ae1565b600061067a82612afa565b612ac181612b05565b6020810161067a8284612b10565b600061067a82612ad5565b600061067a82612b27565b612a8681612b32565b803561067a81612b3d565b612a8681612b27565b803561067a81612b51565b80612a86565b803561067a81612b65565b600080600060608486031215612b8e57612b8e600080fd5b6000612b9a8686612b46565b9350506020612bab86828701612b5a565b9250506040612bbc86828701612b6b565b9150509250925092565b6001600160401b038116612a86565b803561067a81612bc6565b600060208284031215612bf557612bf5600080fd5b60006122978484612bd5565b600080600060608486031215612c1957612c19600080fd5b6000612c258686612bd5565b9350506020612bab86828701612bd5565b600060208284031215612c4b57612c4b600080fd5b60006122978484612b6b565b80612ac1565b6020810161067a8284612c57565b60008060408385031215612c8157612c81600080fd5b6000612c8d8585612b6b565b9250506020612c9e85828601612b5a565b9150509250929050565b60008060408385031215612cbe57612cbe600080fd5b6000612cca8585612bd5565b9250506020612c9e85828601612b6b565b600060208284031215612cf057612cf0600080fd5b60006122978484612b5a565b60408101612d0a8285612c57565b61292f6020830184612c57565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b612d4082612d17565b81018181106001600160401b0382111715612d5d57612d5d612d21565b6040525050565b6000612d6f60405190565b9050612d7b8282612d37565b919050565b60006001600160401b03821115612d9957612d99612d21565b612da282612d17565b60200192915050565b82818337506000910152565b6000612dca612dc584612d80565b612d64565b905082815260208101848484011115612de557612de5600080fd5b612df0848285612dab565b509392505050565b600082601f830112612e0c57612e0c600080fd5b8135612297848260208601612db7565b60008060408385031215612e3257612e32600080fd5b6000612e3e8585612b5a565b92505060208301356001600160401b03811115612e5d57612e5d600080fd5b612c9e85828601612df8565b60005b83811015612e84578181015183820152602001612e6c565b50506000910152565b6000612e97825190565b808452602084019350612eae818560208601612e69565b612eb781612d17565b9093019392505050565b6020808252810161292f8184612e8d565b612ac181612b27565b6020810161067a8284612ed2565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b6020808252810161067a81612ee9565b600060ff821661067a565b612ac181612f47565b6020810161067a8284612f52565b805161067a81612b51565b600060208284031215612f8957612f89600080fd5b60006122978484612f69565b6001600160401b038116612ac1565b6020810161067a8284612f95565b801515612a86565b805161067a81612fb2565b600060208284031215612fda57612fda600080fd5b60006122978484612fba565b60608101612ff48286612f95565b6130016020830185612c57565b6122976040830184612c57565b634e487b7160e01b600052601160045260246000fd5b8082018082111561067a5761067a61300e565b8181038181111561067a5761067a61300e565b60408101612d0a8285612f95565b600061067a612af28381565b612ac181613058565b6060810161307b8286612f95565b6130016020830185613064565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150612f30565b6020808252810161067a81613088565b602c815260006020820160008051602061362083398151915281526b19195b1959d85d1958d85b1b60a21b60208201529150612f30565b6020808252810161067a816130e4565b602c815260006020820160008051602061362083398151915281526b6163746976652070726f787960a01b60208201529150612f30565b6020808252810161067a8161312b565b603881526000602082017f555550535570677261646561626c653a206d757374206e6f742062652063616c8152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60208201529150612f30565b6020808252810161067a81613172565b805161067a81612b65565b600080604083850312156131f8576131f8600080fd5b600061320485856131d7565b9250506020612c9e858286016131d7565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612f30565b6020808252810161067a81613215565b6080810161327b8287612f95565b6132886020830186612c57565b6132956040830185613064565b611c936060830184612abd565b608081016132b08287612f95565b6132bd6020830186613064565b6132956040830185612c57565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291505b5060200190565b6020808252810161067a816132ca565b60006020828403121561332657613326600080fd5b600061229784846131d7565b602e81526000602082017f45524331393637557067726164653a206e657720696d706c656d656e7461746981526d6f6e206973206e6f74205555505360901b60208201529150612f30565b6020808252810161067a81613332565b602981526000602082017f45524331393637557067726164653a20756e737570706f727465642070726f788152681a58589b195555525160ba1b60208201529150612f30565b6020808252810161067a8161338d565b60408101612d0a8285612ed2565b606081016133ff8286612f95565b61340c6020830185612c57565b6122976040830184612ed2565b601381526000602082017211551217d514905394d1915497d19052531151606a1b815291506132fa565b6020808252810161067a81613419565b600061345d825190565b61346b818560208601612e69565b9290920192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170160006134a18285613453565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110191506122978284613453565b602d81526000602082017f455243313936373a206e657720696d706c656d656e746174696f6e206973206e81526c1bdd08184818dbdb9d1c9858dd609a1b60208201529150612f30565b6020808252810161067a816134c7565b8181028082158382048514176135395761353961300e565b5092915050565b634e487b7160e01b600052603260045260246000fd5b6000816135655761356561300e565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260006132fa565b6020808252810161067a8161356d565b600061292f8284613453565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506132fa565b6020808252810161067a816135bb56febd162f0ed5d9ba0d62460e28548c2d494e547f6a13b10c140ac720c9196c50f946756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc772d8d1c74df48b2a983c30ed06fb65bb4819c7e61c7d97766a825bbee5a596f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c656499dec1e9e5d1a31584b10bc1a98110b3c09aa0bfae64dbe2f6188550308bf84391147ad9b4ecd1955cddf8d3a9c61eb67a1b97c9411912f17865e356b304bd6da26469706673582212202eec4d5955659485996a219927b51b6326f25972ddb7786032dd17e605a0f24c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit()": {
        "details": "Deposit `msg.value` FIL funds by the msg.sender into collateral"
      },
      "fit(uint64)": {
        "details": "Fits collateral amounts based on SP pledge usage, distributed rewards and pledge paybacks",
        "params": {
          "_ownerId": "Storage provider owner ID"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256)": {
        "details": "Contract initializer function.",
        "params": {
          "_baseRequirements": "Base collateral requirements for SPs",
          "_resolver": "Resolver contract implementation",
          "_wFIL": "WFIL token implementation"
        }
      },
      "lock(uint64,uint64,uint256)": {
        "details": "Locks required collateral amount based on `_allocated` FIL to pledge",
        "params": {
          "_allocated": "FIL amount that is going to be pledged for Storage Provider",
          "_minerId": "Storage provider miner ID",
          "_ownerId": "Storage provider owner ID"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "reportRecovery(uint64)": {
        "params": {
          "_ownerId": "Storage provider owner ID"
        }
      },
      "reportSlashing(uint64,uint256)": {
        "details": "Please note that slashing amount couldn't exceed the total amount of collateral provided by SP. If sector has been slashed for 42 days and automatically terminated both operations would take place after one another: slashing report and initial pledge withdrawal which is the remaining pledge for a terminated sector.",
        "params": {
          "_ownerId": "Storage provider owner ID",
          "_slashingAmt": "Slashing amount"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateBaseCollateralRequirements(uint256)": {
        "params": {
          "requirements": "New base collateral requirements for SP"
        }
      },
      "updateCollateralRequirements(uint64,uint256)": {
        "details": "Updates collateral requirements for SP with `_ownerId` by `requirements` percentage",
        "params": {
          "_ownerId": "Storage provider owner ID",
          "requirements": "Percentage of collateral requirements"
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint256)": {
        "details": "Withdraw `_amount` of FIL funds by the `msg.sender` from the collateral system"
      }
    },
    "title": "Storage Provider Collateral stores collateral for covering potential slashing risks by SPs (Storage Providers) in liquid staking protocol. The basis coverage is expected to be around 15% of the total FIL allocation requested by SP. Over time as SPs earn FIL rewards, a locked portion of rewards would be exchanged for the collateral provided upfront. Therefore locked SPs collateral becomes accessible for withdrawals by stakers. This mechanism doesn't create additional slashing risks as SPs are slashed by the locked rewards first, making it a good option for collateralization in the system.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ReportRecovery(uint64)": {
        "notice": "Emitted when storage provider has been reported to recover slashed sectors"
      },
      "ReportSlashing(uint64,uint256)": {
        "notice": "Emitted when storage provider has been reported to accure slashing"
      }
    },
    "kind": "user",
    "methods": {
      "deposit()": {
        "notice": "Wrapps of FIL into WFIL token internally"
      },
      "fit(uint64)": {
        "notice": "Rebalances the total locked and available collateral amounts"
      },
      "getAvailableCollateral(uint64)": {
        "notice": "Return Storage Provider Available Collateral information with `_provider` address"
      },
      "getCollateral(uint64)": {
        "notice": "Return Storage Provider Collateral information with `_provider` address"
      },
      "getCollateralRequirements(uint64)": {
        "notice": "Return Storage Provider Collateral requirements for SP with `_ownerId"
      },
      "getLockedCollateral(uint64)": {
        "notice": "Return Storage Provider Locked Collateral information with `_provider` address"
      },
      "lock(uint64,uint64,uint256)": {
        "notice": "Increases the total amount of locked collateral for storage provider"
      },
      "reportRecovery(uint64)": {
        "notice": "Report recovery of previously slashed sectors for SP with `_ownerId`"
      },
      "reportSlashing(uint64,uint256)": {
        "notice": "Report slashing of SP accured on the Filecoin network This function is triggered when SP get continiously slashed by faulting it's sectors"
      },
      "updateBaseCollateralRequirements(uint256)": {
        "notice": "Updates base collateral requirements amount for Storage Providers"
      },
      "updateCollateralRequirements(uint64,uint256)": {
        "notice": "Only triggered by Collateral admin or registry contract while registering SP"
      },
      "withdraw(uint256)": {
        "notice": "Unwraps of FIL into WFIL token internally and delivers maximum amount of FIL available for withdrawal if `_amount` is bigger."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16433,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 16436,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18313,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18696,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15392,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)15387_storage)"
      },
      {
        "astId": 15687,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16745,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 16814,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16415,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16730,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2457,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "collaterals",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_uint64,t_struct(SPCollateral)2495_storage)"
      },
      {
        "astId": 2461,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "slashings",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_uint64,t_uint256)"
      },
      {
        "astId": 2465,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "collateralRequirements",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_uint64,t_uint256)"
      },
      {
        "astId": 2469,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "activeSlashings",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 2481,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "baseRequirements",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 2487,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "resolver",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IResolverClient)6057"
      },
      {
        "astId": 2490,
        "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
        "label": "WFIL",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IWFIL)8450"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IResolverClient)6057": {
        "encoding": "inplace",
        "label": "contract IResolverClient",
        "numberOfBytes": "20"
      },
      "t_contract(IWFIL)8450": {
        "encoding": "inplace",
        "label": "contract IWFIL",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)15387_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)15387_storage"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_struct(SPCollateral)2495_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct StorageProviderCollateral.SPCollateral)",
        "numberOfBytes": "32",
        "value": "t_struct(SPCollateral)2495_storage"
      },
      "t_mapping(t_uint64,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)15387_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 15384,
            "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 15386,
            "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SPCollateral)2495_storage": {
        "encoding": "inplace",
        "label": "struct StorageProviderCollateral.SPCollateral",
        "members": [
          {
            "astId": 2492,
            "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
            "label": "availableCollateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2494,
            "contract": "contracts/StorageProviderCollateral.sol:StorageProviderCollateral",
            "label": "lockedCollateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}