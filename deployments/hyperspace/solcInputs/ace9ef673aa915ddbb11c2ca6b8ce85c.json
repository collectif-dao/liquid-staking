{
  "language": "Solidity",
  "sources": {
    "contracts/ClFIL.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {ERC4626} from \"./libraries/tokens/ERC4626.sol\";\nimport {ERC20} from \"./libraries/tokens/ERC20.sol\";\nimport {IWFIL} from \"./libraries/tokens/IWFIL.sol\";\n\n/**\n * @title clFIL token contract is the main wrapper over staked FIL in the liquid staking system\n *\n * Staking strategies could include the following:\n *     - Liquid Staking Pool\n *     - Direct OTC under-collateralized loans\n *     - Self-stake by Storage Providers\n *\n * @notice The clFIL token vault works with wrapped version of Filecoin (FIL)\n * as it's an ultimate requirement of the ERC4626 standard.\n */\ncontract ClFILToken is ERC4626 {\n\tIWFIL public immutable WFIL; // WFIL implementation\n\n\tconstructor(address _wFIL) ERC4626(ERC20(_wFIL), \"Collective Staked FIL\", \"clFIL\") {\n\t\tWFIL = IWFIL(_wFIL);\n\t}\n\n\t/**\n\t * @notice Returns total amount of assets backing clFIL, that includes\n\t * buffered capital in the pool and pledged capital to the SPs.\n\t */\n\tfunction totalAssets() public view virtual override returns (uint256) {}\n}\n"
    },
    "contracts/interfaces/ILiquidStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface ILiquidStaking {\n\t/**\n\t * @notice Emitted when user is staked wFIL to the Liquid Staking\n\t * @param user User's address\n\t * @param owner Original owner of clFIL tokens\n\t * @param assets Total wFIL amount unstaked\n\t * @param shares Total clFIL amount unstaked\n\t */\n\tevent Unstaked(address indexed user, address indexed owner, uint256 assets, uint256 shares);\n\n\t/**\n\t * @notice Emitted when storage provider is withdrawing FIL for pledge\n\t * @param ownerId Storage Provider's owner ID\n\t * @param minerId Storage Provider's miner actor ID\n\t * @param amount Total FIL amount to pledge\n\t */\n\tevent Pledge(uint64 ownerId, uint64 minerId, uint256 amount);\n\n\t/**\n\t * @notice Emitted when storage provider's pledge is returned back to the LSP\n\t * @param ownerId Storage Provider's owner ID\n\t * @param minerId Storage Provider's miner actor ID\n\t * @param amount Total FIL amount of repayment\n\t */\n\tevent PledgeRepayment(uint64 ownerId, uint64 minerId, uint256 amount);\n\n\t/**\n\t * @notice Emitted when storage provider has been reported to accure slashing\n\t * @param ownerId Storage Provider's owner ID\n\t * @param minerId Storage Provider's miner actor ID\n\t * @param slashingAmount Slashing amount\n\t */\n\tevent ReportSlashing(uint64 ownerId, uint64 minerId, uint256 slashingAmount);\n\n\t/**\n\t * @notice Emitted when storage provider has been reported to recover slashed sectors\n\t * @param ownerId Storage Provider's owner ID\n\t * @param minerId Storage Provider's miner actor ID\n\t */\n\tevent ReportRecovery(uint64 ownerId, uint64 minerId);\n\n\t/**\n\t * @notice Emitted when collateral address is updated\n\t * @param collateral StorageProviderCollateral contract address\n\t */\n\tevent SetCollateralAddress(address indexed collateral);\n\n\t/**\n\t * @notice Emitted when registry address is updated\n\t * @param registry StorageProviderRegistry contract address\n\t */\n\tevent SetRegistryAddress(address indexed registry);\n\n\t/**\n\t * @notice Emitted when profit sharing is update for SP\n\t * @param ownerId SP owner ID\n\t * @param prevShare Previous profit sharing value\n\t * @param profitShare New profit share percentage\n\t */\n\tevent ProfitShareUpdate(uint64 ownerId, uint256 prevShare, uint256 profitShare);\n\n\t/**\n\t * @notice Emitted when admin fee is updated\n\t * @param adminFee New admin fee\n\t */\n\tevent UpdateAdminFee(uint256 adminFee);\n\n\t/**\n\t * @notice Emitted when base profit sharing is updated\n\t * @param profitShare New base profit sharing ratio\n\t */\n\tevent UpdateBaseProfitShare(uint256 profitShare);\n\n\t/**\n\t * @notice Emitted when reward collector address is updated\n\t * @param rewardsCollector New rewards collector address\n\t */\n\tevent UpdateRewardCollector(address rewardsCollector);\n\n\t/**\n\t * @notice Stake FIL to the Liquid Staking pool and get clFIL in return\n\t * native FIL is wrapped into WFIL and deposited into LiquidStaking\n\t *\n\t * @notice msg.value is the amount of FIL to stake\n\t */\n\tfunction stake() external payable returns (uint256 shares);\n\n\t/**\n\t * @notice Unstake wFIL from the Liquid Staking pool and burn clFIL tokens\n\t * @param shares Total clFIL amount to burn (unstake)\n\t * @param owner Original owner of clFIL tokens\n\t * @dev Please note that unstake amount has to be clFIL shares (not wFIL assets)\n\t */\n\tfunction unstake(uint256 shares, address owner) external returns (uint256 assets);\n\n\t/**\n\t * @notice Unstake wFIL from the Liquid Staking pool and burn clFIL tokens\n\t * @param assets Total FIL amount to unstake\n\t * @param owner Original owner of clFIL tokens\n\t */\n\tfunction unstakeAssets(uint256 assets, address owner) external returns (uint256 shares);\n\n\t/**\n\t * @notice Pledge FIL assets from liquid staking pool to miner pledge for one or multiple sectors\n\t * @param amount Amount of FIL to pledge from Liquid Staking Pool\n\t */\n\tfunction pledge(uint256 amount) external;\n\n\t/**\n\t * @notice Withdraw initial pledge from Storage Provider's Miner Actor by `ownerId`\n\t * This function is triggered when sector is not extended by miner actor and initial pledge unlocked\n\t * @param ownerId Storage provider owner ID\n\t * @param amount Initial pledge amount\n\t */\n\tfunction withdrawPledge(uint64 ownerId, uint256 amount) external;\n\n\t/**\n\t * @notice Report slashing of SP accured on the Filecoin network\n\t * This function is triggered when SP get continiously slashed by faulting it's sectors\n\t * @param _ownerId Storage provider owner ID\n\t * @param _slashingAmt Slashing amount\n\t *\n\t * @dev Please note that slashing amount couldn't exceed the total amount of collateral provided by SP.\n\t * If sector has been slashed for 42 days and automatically terminated both operations\n\t * would take place after one another: slashing report and initial pledge withdrawal\n\t * which is the remaining pledge for a terminated sector.\n\t */\n\tfunction reportSlashing(uint64 _ownerId, uint256 _slashingAmt) external;\n\n\t/**\n\t * @notice Report recovery of previously slashed sectors for SP with `_ownerId`\n\t * @param _ownerId Storage provider owner ID\n\t */\n\tfunction reportRecovery(uint64 _ownerId) external;\n\n\t/**\n\t * @dev Updates profit sharing requirements for SP with `_ownerId` by `_profitShare` percentage\n\t * @notice Only triggered by Liquid Staking admin or registry contract while registering SP\n\t * @param _ownerId Storage provider owner ID\n\t * @param _profitShare Percentage of profit sharing\n\t */\n\tfunction updateProfitShare(uint64 _ownerId, uint256 _profitShare) external;\n\n\t/**\n\t * @notice Returns pool usage ratio to determine what percentage of FIL\n\t * is pledged compared to the total amount of FIL staked.\n\t */\n\tfunction getUsageRatio() external view returns (uint256);\n\n\t/**\n\t * @notice Updates StorageProviderCollateral contract address\n\t * @param newAddr StorageProviderCollateral contract address\n\t */\n\tfunction setCollateralAddress(address newAddr) external;\n\n\t/**\n\t * @notice Returns the amount of WFIL available on the liquid staking contract\n\t */\n\tfunction totalFilAvailable() external view returns (uint256);\n\n\t/**\n\t * @notice Returns total amount of fees held by LSP for a specific SP with `_ownerId`\n\t * @param _ownerId Storage Provider owner ID\n\t */\n\tfunction totalFees(uint64 _ownerId) external view returns (uint256);\n\n\t/**\n\t * @notice Updates StorageProviderRegistry contract address\n\t * @param newAddr StorageProviderRegistry contract address\n\t */\n\tfunction setRegistryAddress(address newAddr) external;\n\n\t/**\n\t * @notice Updates admin fee for the protocol revenue\n\t * @param fee New admin fee\n\t * @dev Make sure that admin fee is not greater than 20%\n\t */\n\tfunction updateAdminFee(uint256 fee) external;\n\n\t/**\n\t * @notice Updates base profit sharing ratio\n\t * @param share New base profit sharing ratio\n\t * @dev Make sure that profit sharing is not greater than 80%\n\t */\n\tfunction updateBaseProfitShare(uint256 share) external;\n\n\t/**\n\t * @notice Updates reward collector address of the protocol revenue\n\t * @param collector New rewards collector address\n\t */\n\tfunction updateRewardsCollector(address collector) external;\n\n\t/**\n\t * @notice Triggers changeBeneficiary Miner actor call\n\t * @param minerId Miner actor ID\n\t * @param targetPool LSP smart contract address\n\t * @param quota Total beneficiary quota\n\t * @param expiration Expiration epoch\n\t */\n\tfunction forwardChangeBeneficiary(uint64 minerId, address targetPool, uint256 quota, int64 expiration) external;\n}\n"
    },
    "contracts/interfaces/ILiquidStakingClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface ILiquidStakingClient {\n\t/**\n\t * @notice Returns total amount of fees held by LSP for a specific SP with `_ownerId`\n\t * @param _ownerId Storage Provider owner ID\n\t */\n\tfunction totalFees(uint64 _ownerId) external view returns (uint256);\n\n\t/**\n\t * @dev Updates profit sharing requirements for SP with `_ownerId` by `_profitShare` percentage\n\t * @notice Only triggered by Liquid Staking admin or registry contract while registering SP\n\t * @param _ownerId Storage provider owner ID\n\t * @param _profitShare Percentage of profit sharing\n\t */\n\tfunction updateProfitShare(uint64 _ownerId, uint256 _profitShare) external;\n\n\t/**\n\t * @notice Triggers changeBeneficiary Miner actor call\n\t * @param minerId Miner actor ID\n\t * @param targetPool LSP smart contract address\n\t * @param quota Total beneficiary quota\n\t * @param expiration Expiration epoch\n\t */\n\tfunction forwardChangeBeneficiary(uint64 minerId, address targetPool, uint256 quota, int64 expiration) external;\n}\n"
    },
    "contracts/interfaces/IPledgeOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IPledgeOracle {\n\t/**\n\t * @notice Emitted new record with fees is reported on the PledgeOracle\n\t * @param epoch Filecoin network Epoch number\n\t * @param preCommitDeposit PreCommitDeposit fee\n\t * @param initialPledge Initial pledge fee\n\t */\n\tevent RecordUpdated(uint256 epoch, uint256 preCommitDeposit, uint256 initialPledge);\n\n\t/**\n\t * @notice Returns last reported epoch for PledgeOracle\n\t */\n\tfunction lastEpochReport() external view returns (uint256);\n\n\t/**\n\t * @notice Returns genesis epoch for PledgeOracle\n\t */\n\tfunction genesisEpoch() external view returns (uint256);\n\n\t/**\n\t * @notice Updates record with `epoch` and fees\n\t * @param epoch Filecoin network Epoch number\n\t * @param preCommitDeposit PreCommitDeposit fee\n\t * @param initialPledge Initial pledge fee\n\t *\n\t * @notice Only triggered by address with `ORACLE_REPORTER` role\n\t */\n\tfunction updateRecord(uint256 epoch, uint256 preCommitDeposit, uint256 initialPledge) external;\n\n\t/**\n\t * @notice Return total amount of fees for PreCommitDeposit and Initial Pledge\n\t */\n\tfunction getPledgeFees() external view returns (uint256);\n\n\t/**\n\t * @notice Returns record information with PreCommitDeposit and Initial Pledge fees\n\t */\n\tfunction getLastRecord() external view returns (uint256, uint256);\n\n\t/**\n\t * @notice Returns historical record PreCommitDeposit and Initial Pledge fees for specific `epoch`\n\t * @param epoch Filecoin network Epoch number\n\t */\n\tfunction getHistoricalRecord(uint256 epoch) external view returns (uint256, uint256);\n\n\t/**\n\t * @notice Returns last record for PreCommitDeposit fee\n\t */\n\tfunction getLastPreCommitDeposit() external view returns (uint256);\n\n\t/**\n\t * @notice Returns historical record for PreCommitDeposit fee with specified `epoch`\n\t * @param epoch Filecoin network Epoch number\n\t */\n\tfunction getHistoricalPreCommitDeposit(uint256 epoch) external view returns (uint256);\n\n\t/**\n\t * @notice Returns last record for Initial Pledge fee\n\t */\n\tfunction getLastInitialPledge() external view returns (uint256);\n\n\t/**\n\t * @notice Returns historical record for Initial Pledge fee with specified `epoch`\n\t * @param epoch Filecoin network Epoch number\n\t */\n\tfunction getHistoricalInitialPledge(uint256 epoch) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IPledgeOracleClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IPledgeOracleClient {\n\tfunction getPledgeFees() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IStakingRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport {IERC4626} from \"lib/ERC4626/src//interfaces/IERC4626.sol\";\n\ninterface IStakingRouter {\n\t/**\n\t * @notice Deposits staker's WFIL into a selected vault (strategy)\n\t * @param vault ERC4626 vault implementation\n\t * @param to Receiver of assets deposit (either a liquid staking or direct OTC deal)\n\t * @param minSharesOut Minimal amount of shares expected to be minted for the user, reverts if actual amount less\n\t */\n\tfunction depositToVault(\n\t\tIERC4626 vault,\n\t\taddress to,\n\t\tuint256 amount,\n\t\tuint256 minSharesOut\n\t) external payable returns (uint256 sharesOut);\n\n\t/**\n\t * @notice Redeems the maximum amount of shares for staker\n\t * @param vault ERC4626 vault implementation\n\t * @param to Receiver of withdrawn shares (converted into assets)\n\t * @param minAmountOut Minimal amount of assets expected to be received by the user, reverts if actual amount less\n\t */\n\tfunction redeemMax(IERC4626 vault, address to, uint256 minAmountOut) external payable returns (uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/IStorageProviderCollateral.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IStorageProviderCollateral {\n\tevent StorageProviderCollateralDeposit(uint64 _ownerId, uint256 amount);\n\tevent StorageProviderCollateralWithdraw(uint64 _ownerId, uint256 amount);\n\tevent StorageProviderCollateralRebalance(\n\t\tuint64 _ownerId,\n\t\tuint256 lockedCollateral,\n\t\tuint256 availableCollateral,\n\t\tbool isUnlock\n\t);\n\tevent StorageProviderCollateralSlash(uint64 _ownerId, uint256 slashingAmt, address pool);\n\tevent StorageProviderCollateralUpdate(uint64 _ownerId, uint256 prevRequirements, uint256 requirements);\n\tevent UpdateBaseCollateralRequirements(uint256 baseCollateralRequirements);\n\tevent SetRegistryAddress(address registry);\n\n\t/**\n\t * @dev Deposit `msg.value` FIL funds by the msg.sender into collateral\n\t * @notice Wrapps of FIL into WFIL token internally\n\t */\n\tfunction deposit() external payable;\n\n\t/**\n\t * @dev Withdraw `_amount` of FIL funds by the `msg.sender` from the collateral system\n\t * @notice Unwraps of FIL into WFIL token internally and\n\t * delivers maximum amount of FIL available for withdrawal if `_amount` is bigger.\n\t */\n\tfunction withdraw(uint256 _amount) external;\n\n\t/**\n\t * @dev Locks required collateral amount based on `_allocated` FIL to pledge\n\t * @notice Increases the total amount of locked collateral for storage provider\n\t * @param _ownerId Storage provider owner ID\n\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\n\t */\n\tfunction lock(uint64 _ownerId, uint256 _allocated) external;\n\n\t/**\n\t * @dev Fits collateral amounts based on SP pledge usage, distributed rewards and pledge paybacks\n\t * @notice Rebalances the total locked and available collateral amounts\n\t * @param _ownerId Storage provider owner ID\n\t */\n\tfunction fit(uint64 _ownerId) external;\n\n\t/**\n\t * @dev Slashes SP for a `_slashingAmt` and delivers WFIL amount to the `msg.sender` LSP\n\t * @notice Doesn't perform a rebalancing checks\n\t * @param _ownerId Storage provider owner ID\n\t * @param _slashingAmt Slashing amount for SP\n\t */\n\tfunction slash(uint64 _ownerId, uint256 _slashingAmt) external;\n\n\t/**\n\t * @notice Return Storage Provider Collateral information with `_provider` address\n\t */\n\tfunction getCollateral(uint64 _ownerId) external view returns (uint256, uint256);\n\n\t/**\n\t * @notice Return Storage Provider Available Collateral information with `_provider` address\n\t */\n\tfunction getAvailableCollateral(uint64 _ownerId) external view returns (uint256);\n\n\t/**\n\t * @notice Return Storage Provider Locked Collateral information with `_provider` address\n\t */\n\tfunction getLockedCollateral(uint64 _ownerId) external view returns (uint256);\n\n\t/**\n\t * @dev Updates collateral requirements for SP with `_ownerId` by `requirements` percentage\n\t * @notice Only triggered by Collateral admin or registry contract while registering SP\n\t * @param _ownerId Storage provider owner ID\n\t * @param requirements Percentage of collateral requirements\n\t */\n\tfunction updateCollateralRequirements(uint64 _ownerId, uint256 requirements) external;\n\n\t/**\n\t * @notice Updates base collateral requirements amount for Storage Providers\n\t * @param requirements New base collateral requirements for SP\n\t */\n\tfunction updateBaseCollateralRequirements(uint256 requirements) external;\n\n\t/**\n\t * @notice Updates StorageProviderRegistry contract address\n\t * @param newAddr StorageProviderRegistry contract address\n\t */\n\tfunction setRegistryAddress(address newAddr) external;\n}\n"
    },
    "contracts/interfaces/IStorageProviderCollateralClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IStorageProviderCollateralClient {\n\t/**\n\t * @dev Locks required collateral amount based on `_allocated` FIL to pledge\n\t * @notice Increases the total amount of locked collateral for storage provider\n\t * @param _ownerId Storage provider owner ID\n\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\n\t */\n\tfunction lock(uint64 _ownerId, uint256 _allocated) external;\n\n\t/**\n\t * @dev Fits collateral amounts based on SP pledge usage, distributed rewards and pledge paybacks\n\t * @notice Rebalances the total locked and available collateral amounts\n\t * @param _ownerId Storage provider owner ID\n\t */\n\tfunction fit(uint64 _ownerId) external;\n\n\t/**\n\t * @dev Slashes SP for a `_slashingAmt` and delivers WFIL amount to the `msg.sender` LSP\n\t * @notice Doesn't perform a rebalancing checks\n\t * @param _ownerId Storage provider owner ID\n\t * @param _slashingAmt Slashing amount for SP\n\t */\n\tfunction slash(uint64 _ownerId, uint256 _slashingAmt) external;\n\n\t/**\n\t * @dev Updates collateral requirements for SP with `_ownerId` by `requirements` percentage\n\t * @notice Only triggered by Collateral admin or registry contract while registering SP\n\t * @param _ownerId Storage provider owner ID\n\t * @param requirements Percentage of collateral requirements\n\t */\n\tfunction updateCollateralRequirements(uint64 _ownerId, uint256 requirements) external;\n}\n"
    },
    "contracts/interfaces/IStorageProviderRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IStorageProviderRegistry {\n\tevent StorageProviderRegistered(\n\t\tbytes owner,\n\t\tuint64 ownerId,\n\t\tuint64 minerId,\n\t\taddress targetPool,\n\t\tuint256 allocationLimit,\n\t\tuint256 dailyAllocation\n\t);\n\tevent StorageProviderOnboarded(\n\t\tuint64 ownerId,\n\t\tuint64 minerId,\n\t\tuint256 allocationLimit,\n\t\tuint256 dailyAllocation,\n\t\tuint256 repayment,\n\t\tint64 lastEpoch\n\t);\n\tevent StorageProviderDeactivated(uint64 ownerId);\n\tevent StorageProviderBeneficiaryAddressUpdated(address beneficiaryAddress);\n\tevent StorageProviderBeneficiaryAddressAccepted(uint64 ownerId);\n\tevent StorageProviderMinerAddressUpdate(uint64 ownerId, uint64 miner);\n\n\tevent StorageProviderLastEpochUpdate(uint64 ownerId, int64 lastEpoch);\n\n\tevent StorageProviderAllocationLimitRequest(uint64 ownerId, uint256 allocationLimit, uint256 dailyAllocation);\n\tevent StorageProviderAllocationLimitUpdate(\n\t\tuint64 ownerId,\n\t\tuint256 allocationLimit,\n\t\tuint256 dailyAllocation,\n\t\tuint256 repayment\n\t);\n\tevent StorageProviderAllocationUsed(uint64 ownerId, uint256 usedAllocation);\n\n\tevent StorageProviderMinerRestakingRatioUpdate(uint64 ownerId, uint256 restakingRatio, address restakingAddress);\n\n\tevent StorageProviderAccruedRewards(uint64 ownerId, uint256 rewards);\n\n\tevent StorageProviderRepaidPledge(uint64 ownerId, uint256 pledge);\n\n\tevent CollateralAddressUpdated(address collateral);\n\tevent LiquidStakingPoolRegistered(address pool);\n\tevent UpdateMaxAllocation(uint256 maxAllocation);\n\n\t/**\n\t * @notice Register storage provider with `_minerId`, desired `_allocationLimit` and `_targetPool`\n\t * @param _minerId Storage Provider miner ID in Filecoin network\n\t * @param _targetPool Target liquid staking strategy\n\t * @param _allocationLimit FIL allocation for storage provider\n\t * @param _dailyAllocation Daily FIL allocation for storage provider\n\t * @dev Only triggered by Storage Provider owner\n\t */\n\tfunction register(\n\t\tuint64 _minerId,\n\t\taddress _targetPool,\n\t\tuint256 _allocationLimit,\n\t\tuint256 _dailyAllocation\n\t) external;\n\n\t/**\n\t * @notice Onboard storage provider with `_minerId`, desired `_allocationLimit`, `_repayment` amount\n\t * @param _minerId Storage Provider miner ID in Filecoin network\n\t * @param _allocationLimit FIL allocation for storage provider\n\t * @param _dailyAllocation Daily FIL allocation for storage provider\n\t * @param _repayment FIL repayment for storage provider\n\t * @param _lastEpoch Last epoch for FIL allocation utilization\n\t * @dev Only triggered by owner contract\n\t */\n\tfunction onboardStorageProvider(\n\t\tuint64 _minerId,\n\t\tuint256 _allocationLimit,\n\t\tuint256 _dailyAllocation,\n\t\tuint256 _repayment,\n\t\tint64 _lastEpoch\n\t) external;\n\n\t/**\n\t * @notice Transfer beneficiary address of a miner to the target pool\n\t */\n\tfunction changeBeneficiaryAddress() external;\n\n\t/**\n\t * @notice Accept beneficiary address transfer and activate FIL allocation\n\t * @param _ownerId Storage Provider owner ID\n\t * @dev Only triggered by owner contract\n\t */\n\tfunction acceptBeneficiaryAddress(uint64 _ownerId) external;\n\n\t/**\n\t * @notice Deactive storage provider with ID `_ownerId`\n\t * @param _ownerId Storage Provider owner ID\n\t * @dev Only triggered by owner contract\n\t */\n\tfunction deactivateStorageProvider(uint64 _ownerId) external;\n\n\t/**\n\t * @notice Update storage provider miner ID with `_minerId`\n\t * @param _ownerId Storage Provider owner ID\n\t * @param _minerId Storage Provider new miner ID\n\t * @dev Only triggered by owner contract\n\t */\n\tfunction setMinerAddress(uint64 _ownerId, uint64 _minerId) external;\n\n\t/**\n\t * @notice Request storage provider's FIL allocation update with `_allocationLimit`\n\t * @param _allocationLimit New FIL allocation for storage provider\n\t * @param _dailyAllocation New daily FIL allocation for storage provider\n\t * @dev Only triggered by Storage Provider owner\n\t */\n\tfunction requestAllocationLimitUpdate(uint256 _allocationLimit, uint256 _dailyAllocation) external;\n\n\t/**\n\t * @notice Update storage provider FIL allocation with `_allocationLimit`\n\t * @param _ownerId Storage provider owner ID\n\t * @param _allocationLimit New FIL allocation for storage provider\n\t * @param _dailyAllocation New daily FIL allocation for storage provider\n\t * @param _repaymentAmount New FIL repayment amount for storage provider\n\t * @dev Only triggered by registry admin\n\t */\n\tfunction updateAllocationLimit(\n\t\tuint64 _ownerId,\n\t\tuint256 _allocationLimit,\n\t\tuint256 _dailyAllocation,\n\t\tuint256 _repaymentAmount\n\t) external;\n\n\t/**\n\t * @notice Update storage provider's restaking ratio\n\t * @param _restakingRatio Restaking ratio for Storage Provider\n\t * @param _restakingAddress Restaking address (f4 address) for Storage Provider\n\t * @dev Only triggered by Storage Provider\n\t */\n\tfunction setRestaking(uint256 _restakingRatio, address _restakingAddress) external;\n\n\t/**\n\t * @notice Return total number of storage providers in liquid staking\n\t */\n\tfunction getTotalStorageProviders() external view returns (uint256);\n\n\t/**\n\t * @notice Return total number of currently active storage providers\n\t */\n\tfunction getTotalActiveStorageProviders() external view returns (uint256);\n\n\t/**\n\t * @notice Return Storage Provider information with `_ownerId`\n\t */\n\tfunction getStorageProvider(uint64 _ownerId) external view returns (bool, address, uint64, int64);\n\n\t/**\n\t * @notice Return a boolean flag of Storage Provider activity\n\t */\n\tfunction isActiveProvider(uint64 _ownerId) external view returns (bool);\n\n\t/**\n\t * @notice Increase collected rewards by Storage Provider\n\t * @param _ownerId Storage Provider owner ID\n\t * @param _accuredRewards Withdrawn rewards from SP's miner actor\n\t */\n\tfunction increaseRewards(uint64 _ownerId, uint256 _accuredRewards) external;\n\n\t/**\n\t * @notice Increase repaid pledge by Storage Provider\n\t * @param _ownerId Storage Provider owner ID\n\t * @param _repaidPledge Withdrawn initial pledge after sector termination\n\t */\n\tfunction increasePledgeRepayment(uint64 _ownerId, uint256 _repaidPledge) external;\n\n\t/**\n\t * @notice Increase used allocation for Storage Provider\n\t * @param _ownerId Storage Provider owner ID\n\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\n\t * @param _timestamp Transaction timestamp\n\t */\n\tfunction increaseUsedAllocation(uint64 _ownerId, uint256 _allocated, uint256 _timestamp) external;\n\n\t/**\n\t * @notice Update StorageProviderCollateral smart contract\n\t * @param _collateral StorageProviderCollateral smart contract address\n\t * @dev Only triggered by owner contract\n\t */\n\tfunction setCollateralAddress(address _collateral) external;\n\n\t/**\n\t * @notice Register new liquid staking pool\n\t * @param _pool Address of pool smart contract\n\t * @dev Only triggered by owner contract\n\t */\n\tfunction registerPool(address _pool) external;\n\n\t/**\n\t * @notice Updates maximum allocation amount for SP\n\t * @param allocation New max allocation per SP\n\t */\n\tfunction updateMaxAllocation(uint256 allocation) external;\n\n\t/**\n\t * @notice Return a boolean flag whether `_pool` is active or not\n\t */\n\tfunction isActivePool(address _pool) external view returns (bool);\n\n\t/**\n\t * @notice Return a restaking information for a storage provider\n\t */\n\tfunction restakings(uint64 ownerId) external view returns (uint256, address);\n\n\t/**\n\t * @notice Return allocation information for a storage provider\n\t */\n\tfunction allocations(uint64 ownerId) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\n}\n"
    },
    "contracts/interfaces/IStorageProviderRegistryClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IStorageProviderRegistryClient {\n\t/**\n\t * @notice Return Storage Provider information with `_ownerId`\n\t */\n\tfunction getStorageProvider(uint64 _ownerId) external view returns (bool, address, uint64, int64);\n\n\t/**\n\t * @notice Increase collected rewards by Storage Provider\n\t * @param _ownerId Storage Provider owner ID\n\t * @param _accuredRewards Withdrawn rewards from SP's miner actor\n\t */\n\tfunction increaseRewards(uint64 _ownerId, uint256 _accuredRewards) external;\n\n\t/**\n\t * @notice Increase repaid pledge by Storage Provider\n\t * @param _ownerId Storage Provider owner ID\n\t * @param _repaidPledge Withdrawn initial pledge after sector termination\n\t */\n\tfunction increasePledgeRepayment(uint64 _ownerId, uint256 _repaidPledge) external;\n\n\t/**\n\t * @notice Increase used allocation for Storage Provider\n\t * @param _ownerId Storage Provider owner ID\n\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\n\t * @param _timestamp Transaction timestamp\n\t */\n\tfunction increaseUsedAllocation(uint64 _ownerId, uint256 _allocated, uint256 _timestamp) external;\n\n\t/**\n\t * @notice Return a boolean flag of Storage Provider activity\n\t */\n\tfunction isActiveProvider(uint64 _ownerId) external view returns (bool);\n\n\t/**\n\t * @notice Return a boolean flag whether `_pool` is active or not\n\t */\n\tfunction isActivePool(address _pool) external view returns (bool);\n\n\t/**\n\t * @notice Return a restaking information for a storage provider\n\t */\n\tfunction restakings(uint64 ownerId) external view returns (uint256, address);\n\n\t/**\n\t * @notice Return allocation information for a storage provider\n\t */\n\tfunction allocations(uint64 ownerId) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\n}\n"
    },
    "contracts/libraries/BigInts.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.17;\n\nimport {BigInts, CommonTypes} from \"lib/filecoin-solidity/contracts/v0.8/utils/BigInts.sol\";\n\ninterface IBigInts {\n\tfunction toUint256(CommonTypes.BigInt memory bigInt) external view returns (uint256, bool);\n\n\tfunction fromUint256(uint256 value) external view returns (CommonTypes.BigInt memory);\n\n\tfunction toInt256(CommonTypes.BigInt memory bigInt) external view returns (int256, bool);\n\n\tfunction fromInt256(int256 value) external view returns (CommonTypes.BigInt memory);\n}\n\ncontract BigIntsClient is IBigInts {\n\tusing BigInts for *;\n\n\tfunction toUint256(CommonTypes.BigInt memory bigInt) external view returns (uint256, bool) {\n\t\treturn bigInt.toUint256();\n\t}\n\n\tfunction fromUint256(uint256 value) external view returns (CommonTypes.BigInt memory) {\n\t\treturn value.fromUint256();\n\t}\n\n\tfunction toInt256(CommonTypes.BigInt memory bigInt) external view returns (int256, bool) {\n\t\treturn bigInt.toInt256();\n\t}\n\n\tfunction fromInt256(int256 value) external view returns (CommonTypes.BigInt memory) {\n\t\treturn value.fromInt256();\n\t}\n}\n"
    },
    "contracts/libraries/DateTimeLibraryCompressed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's DateTime Library v1.01\n//\n// A gas-efficient Solidity date and time library\n//\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n//\n// Tested date range 1970/01/01 to 2345/12/31\n//\n// Conventions:\n// Unit      | Range         | Notes\n// :-------- |:-------------:|:-----\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n// year      | 1970 ... 2345 |\n// month     | 1 ... 12      |\n// day       | 1 ... 31      |\n// hour      | 0 ... 23      |\n// minute    | 0 ... 59      |\n// second    | 0 ... 59      |\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n//\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n// ----------------------------------------------------------------------------\n\nlibrary BokkyPooBahsDateTimeLibrary {\n\tuint constant SECONDS_PER_DAY = 24 * 60 * 60;\n\tint constant OFFSET19700101 = 2440588;\n\n\t// ------------------------------------------------------------------------\n\t// Calculate year/month/day from the number of days since 1970/01/01 using\n\t// the date conversion algorithm from\n\t//   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n\t// and adding the offset 2440588 so that 1970/01/01 is day 0\n\t//\n\t// int L = days + 68569 + offset\n\t// int N = 4 * L / 146097\n\t// L = L - (146097 * N + 3) / 4\n\t// year = 4000 * (L + 1) / 1461001\n\t// L = L - 1461 * year / 4 + 31\n\t// month = 80 * L / 2447\n\t// dd = L - 2447 * month / 80\n\t// L = month / 11\n\t// month = month + 2 - 12 * L\n\t// year = 100 * (N - 49) + year + L\n\t// ------------------------------------------------------------------------\n\tfunction _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n\t\tint __days = int(_days);\n\n\t\tint L = __days + 68569 + OFFSET19700101;\n\t\tint N = (4 * L) / 146097;\n\t\tL = L - (146097 * N + 3) / 4;\n\t\tint _year = (4000 * (L + 1)) / 1461001;\n\t\tL = L - (1461 * _year) / 4 + 31;\n\t\tint _month = (80 * L) / 2447;\n\t\tint _day = L - (2447 * _month) / 80;\n\t\tL = _month / 11;\n\t\t_month = _month + 2 - 12 * L;\n\t\t_year = 100 * (N - 49) + _year + L;\n\n\t\tyear = uint(_year);\n\t\tmonth = uint(_month);\n\t\tday = uint(_day);\n\t}\n\n\tfunction timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\n\t\t(year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n\t}\n}\n"
    },
    "contracts/libraries/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity >=0.8.0;\n\n/**\n * Slightly modified Solmate SafeTransferLib library for safe transfers of tokens\n * original ERC20 token has been replaced by Filecoin-safe ERC20. Updated token version performs\n * address normalization and allows to send tokens to f0/f1/f3/f4 addresses. In FVM no\n * tokens could be sent to the native actors.\n */\n\nimport {ERC20} from \"./tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n\t/*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction safeTransferETH(address to, uint256 amount) internal {\n\t\tbool success;\n\n\t\t/// @solidity memory-safe-assembly\n\t\tassembly {\n\t\t\t// Transfer the ETH and store if it succeeded or not.\n\t\t\tsuccess := call(gas(), to, amount, 0, 0, 0, 0)\n\t\t}\n\n\t\trequire(success, \"ETH_TRANSFER_FAILED\");\n\t}\n\n\t/*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction safeTransferFrom(ERC20 token, address from, address to, uint256 amount) internal {\n\t\tbool success;\n\n\t\t/// @solidity memory-safe-assembly\n\t\tassembly {\n\t\t\t// Get a pointer to some free memory.\n\t\t\tlet freeMemoryPointer := mload(0x40)\n\n\t\t\t// Write the abi-encoded calldata into memory, beginning with the function selector.\n\t\t\tmstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n\t\t\tmstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n\t\t\tmstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n\t\t\tmstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n\t\t\tsuccess := and(\n\t\t\t\t// Set success to whether the call reverted, if not we check it either\n\t\t\t\t// returned exactly 1 (can't just be non-zero data), or had no return data.\n\t\t\t\tor(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n\t\t\t\t// We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n\t\t\t\t// We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n\t\t\t\t// Counterintuitively, this call must be positioned second to the or() call in the\n\t\t\t\t// surrounding and() call or else returndatasize() will be zero during the computation.\n\t\t\t\tcall(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n\t\t\t)\n\t\t}\n\n\t\trequire(success, \"TRANSFER_FROM_FAILED\");\n\t}\n\n\tfunction safeTransfer(ERC20 token, address to, uint256 amount) internal {\n\t\tbool success;\n\n\t\t/// @solidity memory-safe-assembly\n\t\tassembly {\n\t\t\t// Get a pointer to some free memory.\n\t\t\tlet freeMemoryPointer := mload(0x40)\n\n\t\t\t// Write the abi-encoded calldata into memory, beginning with the function selector.\n\t\t\tmstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n\t\t\tmstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n\t\t\tmstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n\t\t\tsuccess := and(\n\t\t\t\t// Set success to whether the call reverted, if not we check it either\n\t\t\t\t// returned exactly 1 (can't just be non-zero data), or had no return data.\n\t\t\t\tor(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n\t\t\t\t// We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n\t\t\t\t// We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n\t\t\t\t// Counterintuitively, this call must be positioned second to the or() call in the\n\t\t\t\t// surrounding and() call or else returndatasize() will be zero during the computation.\n\t\t\t\tcall(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n\t\t\t)\n\t\t}\n\n\t\trequire(success, \"TRANSFER_FAILED\");\n\t}\n\n\tfunction safeApprove(ERC20 token, address to, uint256 amount) internal {\n\t\tbool success;\n\n\t\t/// @solidity memory-safe-assembly\n\t\tassembly {\n\t\t\t// Get a pointer to some free memory.\n\t\t\tlet freeMemoryPointer := mload(0x40)\n\n\t\t\t// Write the abi-encoded calldata into memory, beginning with the function selector.\n\t\t\tmstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n\t\t\tmstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n\t\t\tmstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n\t\t\tsuccess := and(\n\t\t\t\t// Set success to whether the call reverted, if not we check it either\n\t\t\t\t// returned exactly 1 (can't just be non-zero data), or had no return data.\n\t\t\t\tor(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n\t\t\t\t// We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n\t\t\t\t// We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n\t\t\t\t// Counterintuitively, this call must be positioned second to the or() call in the\n\t\t\t\t// surrounding and() call or else returndatasize() will be zero during the computation.\n\t\t\t\tcall(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n\t\t\t)\n\t\t}\n\n\t\trequire(success, \"APPROVE_FAILED\");\n\t}\n}\n"
    },
    "contracts/libraries/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/**\n * Slightly modified Solmate ERC20 token implementation with Filecoin-safe address\n * conversions that allow this token to be transferred to f0/f1/f3/f4 addresses.\n */\n\nimport {FilAddress} from \"lib/fevmate/contracts/utils/FilAddress.sol\";\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n\tusing FilAddress for *;\n\n\t/*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n\tevent Transfer(address indexed from, address indexed to, uint256 amount);\n\n\tevent Approval(address indexed owner, address indexed spender, uint256 amount);\n\n\t/*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n\tstring public name;\n\n\tstring public symbol;\n\n\tuint8 public immutable decimals;\n\n\t/*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n\tuint256 public totalSupply;\n\n\tmapping(address => uint256) balances;\n\n\tmapping(address => mapping(address => uint256)) allowances;\n\n\t/*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n\tuint256 internal immutable INITIAL_CHAIN_ID;\n\n\tbytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n\tmapping(address => uint256) public nonces;\n\n\t/*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n\tconstructor(string memory _name, string memory _symbol, uint8 _decimals) {\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t\tdecimals = _decimals;\n\n\t\tINITIAL_CHAIN_ID = block.chainid;\n\t\tINITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n\t}\n\n\t/*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction approve(address spender, uint256 amount) public virtual returns (bool) {\n\t\tspender = spender.normalize();\n\t\tallowances[msg.sender][spender] = amount;\n\n\t\temit Approval(msg.sender, spender, amount);\n\n\t\treturn true;\n\t}\n\n\tfunction transfer(address to, uint256 amount) public virtual returns (bool) {\n\t\tto = to.normalize();\n\n\t\tbalances[msg.sender] -= amount;\n\n\t\t// Cannot overflow because the sum of all user\n\t\t// balances can't exceed the max uint256 value.\n\t\tunchecked {\n\t\t\tbalances[to] += amount;\n\t\t}\n\n\t\temit Transfer(msg.sender, to, amount);\n\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\n\t\tfrom = from.normalize();\n\t\tto = to.normalize();\n\n\t\tuint256 allowed = allowances[from][msg.sender]; // Saves gas for limited approvals.\n\n\t\tif (allowed != type(uint256).max) allowances[from][msg.sender] = allowed - amount;\n\n\t\tbalances[from] -= amount;\n\n\t\t// Cannot overflow because the sum of all user\n\t\t// balances can't exceed the max uint256 value.\n\t\tunchecked {\n\t\t\tbalances[to] += amount;\n\t\t}\n\n\t\temit Transfer(from, to, amount);\n\n\t\treturn true;\n\t}\n\n\t/*//////////////////////////////////////\n                 ERC-20 GETTERS\n    //////////////////////////////////////*/\n\n\tfunction balanceOf(address a) public view virtual returns (uint) {\n\t\treturn balances[a.normalize()];\n\t}\n\n\tfunction allowance(address owner, address spender) public view virtual returns (uint) {\n\t\treturn allowances[owner.normalize()][spender.normalize()];\n\t}\n\n\t/*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction permit(\n\t\taddress owner,\n\t\taddress spender,\n\t\tuint256 value,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) public virtual {\n\t\t// permits only supported by f4 addresses no need to check the owner\n\t\tspender = spender.normalize();\n\n\t\trequire(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n\t\t// Unchecked because the only math done is incrementing\n\t\t// the owner's nonce which cannot realistically overflow.\n\t\tunchecked {\n\t\t\taddress recoveredAddress = ecrecover(\n\t\t\t\tkeccak256(\n\t\t\t\t\tabi.encodePacked(\n\t\t\t\t\t\t\"\\x19\\x01\",\n\t\t\t\t\t\tDOMAIN_SEPARATOR(),\n\t\t\t\t\t\tkeccak256(\n\t\t\t\t\t\t\tabi.encode(\n\t\t\t\t\t\t\t\tkeccak256(\n\t\t\t\t\t\t\t\t\t\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\towner,\n\t\t\t\t\t\t\t\tspender,\n\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\tnonces[owner]++,\n\t\t\t\t\t\t\t\tdeadline\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tv,\n\t\t\t\tr,\n\t\t\t\ts\n\t\t\t);\n\n\t\t\trequire(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n\t\t\tallowances[recoveredAddress][spender] = value;\n\t\t}\n\n\t\temit Approval(owner, spender, value);\n\t}\n\n\tfunction DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n\t\treturn block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n\t}\n\n\tfunction computeDomainSeparator() internal view virtual returns (bytes32) {\n\t\treturn\n\t\t\tkeccak256(\n\t\t\t\tabi.encode(\n\t\t\t\t\tkeccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n\t\t\t\t\tkeccak256(bytes(name)),\n\t\t\t\t\tkeccak256(\"1\"),\n\t\t\t\t\tblock.chainid,\n\t\t\t\t\taddress(this)\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\t/*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction _mint(address to, uint256 amount) internal virtual {\n\t\tto = to.normalize();\n\t\ttotalSupply += amount;\n\n\t\t// Cannot overflow because the sum of all user\n\t\t// balances can't exceed the max uint256 value.\n\t\tunchecked {\n\t\t\tbalances[to] += amount;\n\t\t}\n\n\t\temit Transfer(address(0), to, amount);\n\t}\n\n\tfunction _burn(address from, uint256 amount) internal virtual {\n\t\tfrom = from.normalize();\n\t\tbalances[from] -= amount;\n\n\t\t// Cannot underflow because a user's balance\n\t\t// will never be larger than the total supply.\n\t\tunchecked {\n\t\t\ttotalSupply -= amount;\n\t\t}\n\n\t\temit Transfer(from, address(0), amount);\n\t}\n}\n"
    },
    "contracts/libraries/tokens/ERC4626.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/**\n * Slightly modified Solmate ERC4626 token implementation the original ERC20 token\n * has been replaced by Filecoin-safe ERC20.\n */\n\nimport {ERC20} from \"./ERC20.sol\";\nimport {SafeTransferLib} from \"../SafeTransferLib.sol\";\nimport {FixedPointMathLib} from \"lib/solmate/src/utils/FixedPointMathLib.sol\";\nimport {FilAddress} from \"lib/fevmate/contracts/utils/FilAddress.sol\";\n\n/// @notice Minimal ERC4626 tokenized Vault implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\nabstract contract ERC4626 is ERC20 {\n\tusing SafeTransferLib for ERC20;\n\tusing FixedPointMathLib for uint256;\n\n\t/*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n\tevent Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\n\n\tevent Withdraw(\n\t\taddress indexed caller,\n\t\taddress indexed receiver,\n\t\taddress indexed owner,\n\t\tuint256 assets,\n\t\tuint256 shares\n\t);\n\n\t/*//////////////////////////////////////////////////////////////\n                               IMMUTABLES\n    //////////////////////////////////////////////////////////////*/\n\n\tERC20 public immutable asset;\n\n\tconstructor(ERC20 _asset, string memory _name, string memory _symbol) ERC20(_name, _symbol, _asset.decimals()) {\n\t\tasset = _asset;\n\t}\n\n\t/*//////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\n\t\t// Check for rounding error since we round down in previewDeposit.\n\t\trequire((shares = previewDeposit(assets)) != 0, \"ZERO_SHARES\");\n\n\t\t// Need to transfer before minting or ERC777s could reenter.\n\t\tasset.safeTransferFrom(msg.sender, address(this), assets);\n\n\t\t_mint(receiver, shares);\n\n\t\temit Deposit(msg.sender, receiver, assets, shares);\n\n\t\tafterDeposit(assets, shares);\n\t}\n\n\tfunction mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\n\t\tassets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\n\n\t\t// Need to transfer before minting or ERC777s could reenter.\n\t\tasset.safeTransferFrom(msg.sender, address(this), assets);\n\n\t\t_mint(receiver, shares);\n\n\t\temit Deposit(msg.sender, receiver, assets, shares);\n\n\t\tafterDeposit(assets, shares);\n\t}\n\n\tfunction withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256 shares) {\n\t\tshares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\n\n\t\tif (msg.sender != owner) {\n\t\t\tuint256 allowed = allowances[owner][msg.sender]; // Saves gas for limited approvals.\n\n\t\t\tif (allowed != type(uint256).max) allowances[owner][msg.sender] = allowed - shares;\n\t\t}\n\n\t\tbeforeWithdraw(assets, shares);\n\n\t\t_burn(owner, shares);\n\n\t\temit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n\t\tasset.safeTransfer(receiver, assets);\n\t}\n\n\tfunction redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256 assets) {\n\t\tif (msg.sender != owner) {\n\t\t\tuint256 allowed = allowances[owner][msg.sender]; // Saves gas for limited approvals.\n\n\t\t\tif (allowed != type(uint256).max) allowances[owner][msg.sender] = allowed - shares;\n\t\t}\n\n\t\t// Check for rounding error since we round down in previewRedeem.\n\t\trequire((assets = previewRedeem(shares)) != 0, \"ZERO_ASSETS\");\n\n\t\tbeforeWithdraw(assets, shares);\n\n\t\t_burn(owner, shares);\n\n\t\temit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n\t\tasset.safeTransfer(receiver, assets);\n\t}\n\n\t/*//////////////////////////////////////////////////////////////\n                            ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction totalAssets() public view virtual returns (uint256);\n\n\tfunction convertToShares(uint256 assets) public view virtual returns (uint256) {\n\t\tuint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n\t\treturn supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\n\t}\n\n\tfunction convertToAssets(uint256 shares) public view virtual returns (uint256) {\n\t\tuint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n\t\treturn supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\n\t}\n\n\tfunction previewDeposit(uint256 assets) public view virtual returns (uint256) {\n\t\treturn convertToShares(assets);\n\t}\n\n\tfunction previewMint(uint256 shares) public view virtual returns (uint256) {\n\t\tuint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n\t\treturn supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\n\t}\n\n\tfunction previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n\t\tuint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n\t\treturn supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\n\t}\n\n\tfunction previewRedeem(uint256 shares) public view virtual returns (uint256) {\n\t\treturn convertToAssets(shares);\n\t}\n\n\t/*//////////////////////////////////////////////////////////////\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction maxDeposit(address) public view virtual returns (uint256) {\n\t\treturn type(uint256).max;\n\t}\n\n\tfunction maxMint(address) public view virtual returns (uint256) {\n\t\treturn type(uint256).max;\n\t}\n\n\tfunction maxWithdraw(address owner) public view virtual returns (uint256) {\n\t\treturn convertToAssets(balances[owner]);\n\t}\n\n\tfunction maxRedeem(address owner) public view virtual returns (uint256) {\n\t\treturn balances[owner];\n\t}\n\n\t/*//////////////////////////////////////////////////////////////\n                          INTERNAL HOOKS LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\n\n\tfunction afterDeposit(uint256 assets, uint256 shares) internal virtual {}\n}\n"
    },
    "contracts/libraries/tokens/IWFIL.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n// import {ERC20} from \"./ERC20.sol\";\n\ninterface IWFIL {\n\t/**\n\t * @notice Deposit Fil into the contract, and mint WFIL 1:1.\n\t */\n\tfunction deposit() external payable;\n\n\t/**\n\t * @notice Burns _amount WFIL from caller's balance, and transfers them\n\t * the unwrapped Fil 1:1.\n\t *\n\t * Note: The fund transfer used here is address.call{value: _amount}(\"\"),\n\t * which does NOT work with the FVM's builtin Multisig actor. This is\n\t * because, under the hood, address.call acts like a message to an actor's\n\t * InvokeEVM method. The Multisig actor does not implement this method.\n\t *\n\t * This is a known issue, but we've decided to keep the method as-is,\n\t * because it's likely that the Multisig actor is eventually upgraded to\n\t * support this method. Even though a Multisig actor cannot directly\n\t * withdraw, it is still possible for Multisigs to deposit, transfer,\n\t * etc WFIL. So, if your Multisig actor needs to withdraw, you can\n\t * transfer your WFIL to another contract, which can perform the\n\t * withdrawal for you.\n\t *\n\t * (Though Multisig actors are not supported, BLS/SECPK/EthAccounts\n\t * and EVM contracts can use this method normally)\n\t */\n\tfunction withdraw(uint256 amount) external;\n\n\tfunction transfer(address _to, uint _amount) external returns (bool);\n\n\tfunction transferFrom(address _owner, address _to, uint _amount) external returns (bool);\n\n\tfunction approve(address _spender, uint _amount) external returns (bool);\n\n\tfunction balanceOf(address _a) external view returns (uint);\n\n\tfunction allowance(address _owner, address _spender) external view returns (uint);\n}\n"
    },
    "contracts/LiquidStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {ClFILToken} from \"./ClFIL.sol\";\nimport {ReentrancyGuard} from \"lib/solmate/src/utils/ReentrancyGuard.sol\";\nimport {AccessControl} from \"lib/openzeppelin-contracts/contracts//access/AccessControl.sol\";\nimport {SafeTransferLib} from \"./libraries/SafeTransferLib.sol\";\nimport {MinerAPI, CommonTypes, MinerTypes} from \"lib/filecoin-solidity/contracts/v0.8/MinerAPI.sol\";\nimport {FilAddresses} from \"lib/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol\";\nimport {FilAddress} from \"lib/fevmate/contracts/utils/FilAddress.sol\";\nimport {SendAPI} from \"lib/filecoin-solidity/contracts/v0.8/SendAPI.sol\";\n\nimport {ILiquidStaking} from \"./interfaces/ILiquidStaking.sol\";\nimport {IStorageProviderCollateralClient} from \"./interfaces/IStorageProviderCollateralClient.sol\";\nimport {IStorageProviderRegistryClient} from \"./interfaces/IStorageProviderRegistryClient.sol\";\nimport {IBigInts} from \"./libraries/BigInts.sol\";\n\n/**\n * @title LiquidStaking contract allows users to stake/unstake FIL to earn\n * Filecoin mining rewards. Staked FIL is allocated to Storage Providers (SPs) that\n * perform filecoin storage mining operations. This contract acts as a beneficiary address\n * for each SP that uses FIL capital for pledges.\n *\n * While staking FIL user would get clFIL token in exchange, the token follows ERC4626\n * standard and it's price is recalculated once mining rewards are distributed to the\n * liquid staking pool and once new FIL is deposited. Please note that LiquidStaking contract\n * performs wrapping of the native FIL into Wrapped Filecoin (WFIL) token.\n */\ncontract LiquidStaking is ILiquidStaking, ClFILToken, ReentrancyGuard, AccessControl {\n\tusing SafeTransferLib for *;\n\tusing FilAddress for address;\n\n\t/// @notice The current total amount of FIL that is allocated to SPs.\n\tuint256 public totalFilPledged;\n\tuint256 private constant BASIS_POINTS = 10000;\n\tuint256 public adminFee;\n\tuint256 public baseProfitShare;\n\taddress public rewardCollector;\n\n\tIStorageProviderCollateralClient internal collateral;\n\tIStorageProviderRegistryClient internal registry;\n\tIBigInts internal immutable BigInts;\n\n\tbytes32 private constant LIQUID_STAKING_ADMIN = keccak256(\"LIQUID_STAKING_ADMIN\");\n\tbytes32 private constant FEE_DISTRIBUTOR = keccak256(\"FEE_DISTRIBUTOR\");\n\tbytes32 private constant SLASHING_AGENT = keccak256(\"SLASHING_AGENT\");\n\n\tmapping(uint64 => uint256) public profitShares;\n\tmapping(uint64 => bool) public activeSlashings;\n\n\tconstructor(\n\t\taddress _wFIL,\n\t\tuint256 _adminFee,\n\t\tuint256 _baseProfitShare,\n\t\taddress _rewardCollector,\n\t\taddress _bigIntsLib\n\t) ClFILToken(_wFIL) {\n\t\trequire(_adminFee <= 10000, \"INVALID_ADMIN_FEE\");\n\t\trequire(_rewardCollector != address(0), \"INVALID_REWARD_COLLECTOR\");\n\t\tadminFee = _adminFee;\n\t\tbaseProfitShare = _baseProfitShare;\n\t\trewardCollector = _rewardCollector;\n\n\t\tBigInts = IBigInts(_bigIntsLib);\n\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\t\tgrantRole(LIQUID_STAKING_ADMIN, msg.sender);\n\t\tgrantRole(FEE_DISTRIBUTOR, msg.sender);\n\t\tgrantRole(SLASHING_AGENT, msg.sender);\n\t}\n\n\treceive() external payable virtual {}\n\n\tfallback() external payable virtual {}\n\n\t/**\n\t * @notice Stake FIL to the Liquid Staking pool and get clFIL in return\n\t * native FIL is wrapped into WFIL and deposited into LiquidStaking\n\t *\n\t * @notice msg.value is the amount of FIL to stake\n\t */\n\tfunction stake() external payable nonReentrant returns (uint256 shares) {\n\t\tuint256 assets = msg.value;\n\n\t\t// Check for rounding error since we round down in previewDeposit.\n\t\trequire((shares = previewDeposit(assets)) != 0, \"ZERO_SHARES\");\n\n\t\t_wrapWETH9(address(this));\n\n\t\t_mint(msg.sender, shares);\n\n\t\temit Deposit(msg.sender, msg.sender, assets, shares);\n\n\t\tafterDeposit(assets, shares);\n\t}\n\n\t/**\n\t * @notice Unstake FIL from the Liquid Staking pool and burn clFIL tokens\n\t * @param shares Total clFIL amount to burn (unstake)\n\t * @param owner Original owner of clFIL tokens\n\t * @dev Please note that unstake amount has to be clFIL shares (not FIL assets)\n\t */\n\tfunction unstake(uint256 shares, address owner) external nonReentrant returns (uint256 assets) {\n\t\tif (msg.sender != owner) {\n\t\t\tuint256 allowed = allowances[owner][msg.sender]; // Saves gas for limited approvals.\n\n\t\t\tif (allowed != type(uint256).max) allowances[owner][msg.sender] = allowed - shares;\n\t\t}\n\n\t\t// Check for rounding error since we round down in previewRedeem.\n\t\trequire((assets = previewRedeem(shares)) != 0, \"ZERO_ASSETS\");\n\n\t\tbeforeWithdraw(assets, shares);\n\n\t\t_burn(owner, shares);\n\n\t\temit Unstaked(msg.sender, owner, assets, shares);\n\n\t\t_unwrapWFIL(msg.sender, assets);\n\t}\n\n\t/**\n\t * @notice Unstake FIL from the Liquid Staking pool and burn clFIL tokens\n\t * @param assets Total FIL amount to unstake\n\t * @param owner Original owner of clFIL tokens\n\t */\n\tfunction unstakeAssets(uint256 assets, address owner) external nonReentrant returns (uint256 shares) {\n\t\tshares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\n\n\t\tif (msg.sender != owner) {\n\t\t\tuint256 allowed = allowances[owner][msg.sender]; // Saves gas for limited approvals.\n\n\t\t\tif (allowed != type(uint256).max) allowances[owner][msg.sender] = allowed - shares;\n\t\t}\n\n\t\tbeforeWithdraw(assets, shares);\n\n\t\t_burn(owner, shares);\n\n\t\temit Unstaked(msg.sender, owner, assets, shares);\n\n\t\t_unwrapWFIL(msg.sender, assets);\n\t}\n\n\t/**\n\t * @notice Pledge FIL assets from liquid staking pool to miner pledge for one sector\n\t * @param amount Amount of FIL to pledge from Liquid Staking Pool\n\t */\n\tfunction pledge(uint256 amount) external virtual nonReentrant {\n\t\trequire(amount <= totalAssets(), \"PLEDGE_WITHDRAWAL_OVERFLOW\");\n\n\t\taddress ownerAddr = msg.sender.normalize();\n\t\t(bool isID, uint64 ownerId) = ownerAddr.getActorID();\n\t\trequire(isID, \"INACTIVE_ACTOR_ID\");\n\t\trequire(!activeSlashings[ownerId], \"ACTIVE_SLASHING\");\n\n\t\tcollateral.lock(ownerId, amount);\n\n\t\t(, , uint64 minerId, ) = registry.getStorageProvider(ownerId);\n\t\tCommonTypes.FilActorId minerActorId = CommonTypes.FilActorId.wrap(minerId);\n\n\t\temit Pledge(ownerId, minerId, amount);\n\n\t\tWFIL.withdraw(amount);\n\n\t\ttotalFilPledged += amount;\n\n\t\tSendAPI.send(minerActorId, amount); // send FIL to the miner actor\n\t}\n\n\t/**\n\t * @notice Withdraw initial pledge from Storage Provider's Miner Actor by `ownerId`\n\t * This function is triggered when sector is not extended by miner actor and initial pledge unlocked\n\t * @param ownerId Storage provider owner ID\n\t * @param amount Initial pledge amount\n\t * @dev Please note that pledge amount withdrawn couldn't exceed used allocation by SP\n\t */\n\tfunction withdrawPledge(uint64 ownerId, uint256 amount) external virtual nonReentrant {\n\t\trequire(hasRole(FEE_DISTRIBUTOR, msg.sender), \"INVALID_ACCESS\");\n\t\t(, , uint64 minerId, ) = registry.getStorageProvider(ownerId);\n\t\tCommonTypes.FilActorId minerActorId = CommonTypes.FilActorId.wrap(minerId);\n\n\t\tCommonTypes.BigInt memory withdrawnBInt = MinerAPI.withdrawBalance(minerActorId, BigInts.fromUint256(amount));\n\n\t\t(uint256 withdrawn, bool abort) = BigInts.toUint256(withdrawnBInt);\n\t\trequire(!abort, \"INCORRECT_BIG_NUM\");\n\t\trequire(withdrawn == amount, \"INCORRECT_WITHDRAWAL_AMOUNT\");\n\n\t\tWFIL.deposit{value: withdrawn}();\n\n\t\tregistry.increasePledgeRepayment(ownerId, amount);\n\n\t\ttotalFilPledged -= amount;\n\n\t\tcollateral.fit(ownerId);\n\n\t\temit PledgeRepayment(ownerId, minerId, amount);\n\t}\n\n\t/**\n\t * @notice Report slashing of SP accured on the Filecoin network\n\t * This function is triggered when SP get continiously slashed by faulting it's sectors\n\t * @param _ownerId Storage provider owner ID\n\t * @param _slashingAmt Slashing amount\n\t *\n\t * @dev Please note that slashing amount couldn't exceed the total amount of collateral provided by SP.\n\t * If sector has been slashed for 42 days and automatically terminated both operations\n\t * would take place after one another: slashing report and initial pledge withdrawal\n\t * which is the remaining pledge for a terminated sector.\n\t */\n\tfunction reportSlashing(uint64 _ownerId, uint256 _slashingAmt) external virtual nonReentrant {\n\t\trequire(hasRole(SLASHING_AGENT, msg.sender), \"INVALID_ACCESS\");\n\t\t(, , uint64 minerId, ) = registry.getStorageProvider(_ownerId);\n\n\t\tcollateral.slash(_ownerId, _slashingAmt);\n\n\t\tactiveSlashings[_ownerId] = true;\n\n\t\temit ReportSlashing(_ownerId, minerId, _slashingAmt);\n\t}\n\n\t/**\n\t * @notice Report recovery of previously slashed sectors for SP with `_ownerId`\n\t * @param _ownerId Storage provider owner ID\n\t */\n\tfunction reportRecovery(uint64 _ownerId) external virtual {\n\t\trequire(hasRole(SLASHING_AGENT, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(activeSlashings[_ownerId], \"NO_ACTIVE_SLASHINGS\");\n\t\t(, , uint64 minerId, ) = registry.getStorageProvider(_ownerId);\n\n\t\tactiveSlashings[_ownerId] = false;\n\n\t\temit ReportRecovery(_ownerId, minerId);\n\t}\n\n\tstruct WithdrawRewardsLocalVars {\n\t\tuint256 restakingRatio;\n\t\taddress restakingAddress;\n\t\tuint256 withdrawn;\n\t\tbool abort;\n\t\tbool isRestaking;\n\t\tuint256 protocolFees;\n\t\tuint256 stakingProfit;\n\t\tuint256 restakingAmt;\n\t\tuint256 protocolShare;\n\t\tuint256 spShare;\n\t\tCommonTypes.FilActorId minerActorId;\n\t\tCommonTypes.BigInt withdrawnBInt;\n\t}\n\n\t/**\n\t * @notice Withdraw FIL assets from Storage Provider by `ownerId` and it's Miner actor\n\t * and restake `restakeAmount` into the Storage Provider specified f4 address\n\t * @param ownerId Storage provider owner ID\n\t * @param amount Withdrawal amount\n\t */\n\tfunction withdrawRewards(uint64 ownerId, uint256 amount) external virtual nonReentrant {\n\t\trequire(hasRole(FEE_DISTRIBUTOR, msg.sender), \"INVALID_ACCESS\");\n\t\tWithdrawRewardsLocalVars memory vars;\n\n\t\t(, , uint64 minerId, ) = registry.getStorageProvider(ownerId);\n\t\tvars.minerActorId = CommonTypes.FilActorId.wrap(minerId);\n\n\t\tvars.withdrawnBInt = MinerAPI.withdrawBalance(vars.minerActorId, BigInts.fromUint256(amount));\n\n\t\t(vars.withdrawn, vars.abort) = BigInts.toUint256(vars.withdrawnBInt);\n\t\trequire(!vars.abort, \"INCORRECT_BIG_NUM\");\n\t\trequire(vars.withdrawn == amount, \"INCORRECT_WITHDRAWAL_AMOUNT\");\n\n\t\tvars.stakingProfit = (vars.withdrawn * profitShares[ownerId]) / BASIS_POINTS;\n\t\tvars.protocolFees = (vars.withdrawn * adminFee) / BASIS_POINTS;\n\t\tvars.protocolShare = vars.stakingProfit + vars.protocolFees;\n\n\t\t(vars.restakingRatio, vars.restakingAddress) = registry.restakings(ownerId);\n\n\t\tvars.isRestaking = vars.restakingRatio > 0 && vars.restakingAddress != address(0);\n\n\t\tif (vars.isRestaking) {\n\t\t\tvars.restakingAmt = ((vars.withdrawn - vars.protocolShare) * vars.restakingRatio) / BASIS_POINTS;\n\t\t}\n\n\t\tvars.spShare = vars.withdrawn - (vars.protocolShare + vars.restakingAmt);\n\n\t\tWFIL.deposit{value: vars.protocolShare}();\n\t\tWFIL.transfer(rewardCollector, vars.protocolFees);\n\n\t\tSendAPI.send(CommonTypes.FilActorId.wrap(ownerId), vars.spShare);\n\n\t\tregistry.increaseRewards(ownerId, vars.stakingProfit);\n\t\tcollateral.fit(ownerId);\n\n\t\tif (vars.isRestaking) {\n\t\t\t_restake(vars.restakingAmt, vars.restakingAddress);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Updates profit sharing requirements for SP with `_ownerId` by `_profitShare` percentage\n\t * @notice Only triggered by Liquid Staking admin or registry contract while registering SP\n\t * @param _ownerId Storage provider owner ID\n\t * @param _profitShare Percentage of profit sharing\n\t */\n\tfunction updateProfitShare(uint64 _ownerId, uint256 _profitShare) external {\n\t\trequire(hasRole(LIQUID_STAKING_ADMIN, msg.sender) || msg.sender == address(registry), \"INVALID_ACCESS\");\n\n\t\tif (_profitShare == 0) {\n\t\t\tprofitShares[_ownerId] = baseProfitShare;\n\n\t\t\temit ProfitShareUpdate(_ownerId, 0, baseProfitShare);\n\t\t} else {\n\t\t\tuint256 prevShare = profitShares[_ownerId];\n\t\t\trequire(_profitShare <= 8000, \"PROFIT_SHARE_OVERFLOW\");\n\t\t\trequire(_profitShare != prevShare, \"SAME_PROFIT_SHARE\");\n\n\t\t\tprofitShares[_ownerId] = _profitShare;\n\n\t\t\temit ProfitShareUpdate(_ownerId, prevShare, _profitShare);\n\t\t}\n\t}\n\n\t/**\n\t * @notice Restakes `assets` for a specified `target` address\n\t * @param assets Amount of assets to restake\n\t * @param target f4 address to receive clFIL tokens\n\t */\n\tfunction _restake(uint256 assets, address target) internal returns (uint256 shares) {\n\t\trequire((shares = previewDeposit(assets)) != 0, \"ZERO_SHARES\");\n\n\t\t_mint(target, shares);\n\n\t\temit Deposit(target, target, assets, shares);\n\n\t\tafterDeposit(assets, shares);\n\t}\n\n\t/**\n\t * @notice Returns total amount of assets backing clFIL, that includes\n\t * buffered capital in the pool and pledged capital to the SPs.\n\t */\n\tfunction totalAssets() public view virtual override returns (uint256) {\n\t\treturn totalFilAvailable() + totalFilPledged;\n\t}\n\n\t/**\n\t * @notice Returns total amount of fees held by LSP for a specific SP with `_ownerId`\n\t * @param _ownerId Storage Provider owner ID\n\t */\n\tfunction totalFees(uint64 _ownerId) external view virtual override returns (uint256) {\n\t\treturn profitShares[_ownerId] + adminFee;\n\t}\n\n\t/**\n\t * @notice Returns pool usage ratio to determine what percentage of FIL\n\t * is pledged compared to the total amount of FIL staked.\n\t */\n\tfunction getUsageRatio() public view virtual returns (uint256) {\n\t\treturn (totalFilPledged * BASIS_POINTS) / (totalFilAvailable() + totalFilPledged);\n\t}\n\n\t/**\n\t * @notice Updates StorageProviderCollateral contract address\n\t * @param newAddr StorageProviderCollateral contract address\n\t */\n\tfunction setCollateralAddress(address newAddr) public {\n\t\trequire(hasRole(LIQUID_STAKING_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(newAddr != address(0), \"INVALID_ADDRESS\");\n\n\t\taddress prevCollateral = address(collateral);\n\t\trequire(prevCollateral != newAddr, \"SAME_ADDRESS\");\n\n\t\tcollateral = IStorageProviderCollateralClient(newAddr);\n\n\t\temit SetCollateralAddress(newAddr);\n\t}\n\n\t/**\n\t * @notice Returns the amount of WFIL available on the liquid staking contract\n\t */\n\tfunction totalFilAvailable() public view returns (uint256) {\n\t\treturn asset.balanceOf(address(this));\n\t}\n\n\t/**\n\t * @notice Updates StorageProviderRegistry contract address\n\t * @param newAddr StorageProviderRegistry contract address\n\t */\n\tfunction setRegistryAddress(address newAddr) public {\n\t\trequire(hasRole(LIQUID_STAKING_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(newAddr != address(0), \"INVALID_ADDRESS\");\n\n\t\taddress prevRegistry = address(registry);\n\t\trequire(prevRegistry != newAddr, \"SAME_ADDRESS\");\n\n\t\tregistry = IStorageProviderRegistryClient(newAddr);\n\n\t\temit SetRegistryAddress(newAddr);\n\t}\n\n\t/**\n\t * @notice Updates admin fee for the protocol revenue\n\t * @param fee New admin fee\n\t * @dev Make sure that admin fee is not greater than 20%\n\t */\n\tfunction updateAdminFee(uint256 fee) public {\n\t\trequire(hasRole(LIQUID_STAKING_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(fee <= 2000, \"ADMIN_FEE_OVERFLOW\");\n\n\t\tuint256 prevFee = adminFee;\n\t\trequire(fee != prevFee, \"SAME_ADMIN_FEE\");\n\n\t\tadminFee = fee;\n\n\t\temit UpdateAdminFee(fee);\n\t}\n\n\t/**\n\t * @notice Updates base profit sharing ratio\n\t * @param share New base profit sharing ratio\n\t * @dev Make sure that profit sharing is not greater than 80%\n\t */\n\tfunction updateBaseProfitShare(uint256 share) public {\n\t\trequire(hasRole(LIQUID_STAKING_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(share <= 8000 && share > 0, \"PROFIT_SHARE_OVERFLOW\");\n\n\t\tuint256 prevShare = baseProfitShare;\n\t\trequire(share != prevShare, \"SAME_PROFIT_SHARE\");\n\n\t\tbaseProfitShare = share;\n\n\t\temit UpdateBaseProfitShare(share);\n\t}\n\n\t/**\n\t * @notice Updates reward collector address of the protocol revenue\n\t * @param collector New rewards collector address\n\t */\n\tfunction updateRewardsCollector(address collector) public {\n\t\trequire(hasRole(LIQUID_STAKING_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(collector != address(0), \"INVALID_ADDRESS\");\n\n\t\taddress prevAddr = rewardCollector;\n\t\trequire(collector != prevAddr, \"SAME_COLLECTOR_ADDRESS\");\n\n\t\trewardCollector = collector;\n\n\t\temit UpdateRewardCollector(collector);\n\t}\n\n\t/**\n\t * @notice Triggers changeBeneficiary Miner actor call\n\t * @param minerId Miner actor ID\n\t * @param targetPool LSP smart contract address\n\t * @param quota Total beneficiary quota\n\t * @param expiration Expiration epoch\n\t */\n\tfunction forwardChangeBeneficiary(\n\t\tuint64 minerId,\n\t\taddress targetPool,\n\t\tuint256 quota,\n\t\tint64 expiration\n\t) external virtual {\n\t\trequire(msg.sender == address(registry), \"INVALID_ACCESS\");\n\t\trequire(targetPool == address(this), \"INCORRECT_ADDRESS\");\n\n\t\tCommonTypes.FilActorId filMinerId = CommonTypes.FilActorId.wrap(minerId);\n\n\t\tMinerTypes.ChangeBeneficiaryParams memory params;\n\n\t\tparams.new_beneficiary = FilAddresses.fromEthAddress(targetPool);\n\t\tparams.new_quota = BigInts.fromUint256(quota);\n\t\tparams.new_expiration = CommonTypes.ChainEpoch.wrap(expiration);\n\n\t\tMinerAPI.changeBeneficiary(filMinerId, params);\n\t}\n\n\t/**\n\t * @notice Wraps FIL into WFIL and transfers it to the `_recipient` address\n\t * @param _recipient WFIL recipient address\n\t */\n\tfunction _wrapWETH9(address _recipient) internal {\n\t\tuint256 amount = msg.value;\n\t\tWFIL.deposit{value: amount}();\n\t\tWFIL.transfer(_recipient, amount);\n\t}\n\n\t/**\n\t * @notice Unwraps `_amount` of WFIL into FIL and transfers it to the `_recipient` address\n\t * @param _recipient WFIL recipient address\n\t */\n\tfunction _unwrapWFIL(address _recipient, uint256 _amount) internal {\n\t\tuint256 balanceWETH9 = WFIL.balanceOf(address(this));\n\t\trequire(balanceWETH9 >= _amount, \"Insufficient WETH9\");\n\n\t\tif (balanceWETH9 > 0) {\n\t\t\tWFIL.withdraw(_amount);\n\t\t\t_recipient.safeTransferETH(_amount);\n\t\t}\n\t}\n}\n"
    },
    "contracts/oracle/PledgeOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"../interfaces/IPledgeOracle.sol\";\nimport {AccessControl} from \"lib/openzeppelin-contracts/contracts//access/AccessControl.sol\";\n\n/**\n * @title Pledge Oracle allows to record PreCommitDeposit and InitialPledge\n * historical amounts. This oracle contract is used to determine the amount of FIL\n * required to send to Storage Provider's miner actors while staking system\n * pledges FIL. It accounts for both PreCommitDeposit and InitialPledge amounts.\n *\n * @notice Oracle is expected to be reported for each epoch. However, there are no\n * such big differences in those fees being in a short period of time. In the future iteration,\n * a time-weighted average fee amount could be used with some level of deviation.\n *\n * @notice For the time being only selected actors could report into the Oracle to minimize\n * the risk of incorrect reports being recorded.\n */\ncontract PledgeOracle is IPledgeOracle, AccessControl {\n\tstruct Record {\n\t\tuint256 preCommitDeposit;\n\t\tuint256 initialPledge;\n\t}\n\n\tuint256 public lastEpochReport;\n\tuint256 private constant epochTime = 30 seconds;\n\tuint256 public immutable genesisEpoch;\n\n\tbytes32 private constant ORACLE_REPORTER = keccak256(\"ORACLE_REPORTER\");\n\tbytes32 private constant ORACLE_ADMIN = keccak256(\"ORACLE_ADMIN\");\n\n\t// Mapping of fee records for network epochs\n\tmapping(uint256 => Record) records;\n\n\tconstructor(uint256 genesis) {\n\t\tgenesisEpoch = genesis;\n\t\tlastEpochReport = genesis;\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\n\t\t_setRoleAdmin(ORACLE_REPORTER, ORACLE_ADMIN);\n\t\tgrantRole(ORACLE_ADMIN, msg.sender);\n\t\tgrantRole(ORACLE_REPORTER, msg.sender);\n\t}\n\n\t/**\n\t * @notice Updates record with `epoch` and fees\n\t * @param epoch Filecoin network Epoch number\n\t * @param preCommitDeposit PreCommitDeposit fee\n\t * @param initialPledge Initial pledge fee\n\t *\n\t * @notice Only triggered by address with `ORACLE_REPORTER` role\n\t */\n\tfunction updateRecord(uint256 epoch, uint256 preCommitDeposit, uint256 initialPledge) external {\n\t\trequire(hasRole(ORACLE_REPORTER, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(epoch >= lastEpochReport, \"PREVIOUS_EPOCH_RECORD_ATTEMPT\");\n\t\trequire(preCommitDeposit > 0 && initialPledge > 0, \"INVALID_FEES\");\n\n\t\tRecord memory record;\n\t\trecord.preCommitDeposit = preCommitDeposit;\n\t\trecord.initialPledge = initialPledge;\n\n\t\trecords[epoch] = record;\n\t\tlastEpochReport = epoch;\n\n\t\temit RecordUpdated(epoch, preCommitDeposit, initialPledge);\n\t}\n\n\t/**\n\t * @notice Return total amount of fees for PreCommitDeposit and Initial Pledge\n\t */\n\tfunction getPledgeFees() external view returns (uint256) {\n\t\tRecord memory record = records[lastEpochReport];\n\t\treturn (record.preCommitDeposit + record.initialPledge);\n\t}\n\n\t/**\n\t * @notice Returns record information with PreCommitDeposit and Initial Pledge fees\n\t */\n\tfunction getLastRecord() external view returns (uint256, uint256) {\n\t\tRecord memory record = records[lastEpochReport];\n\t\treturn (record.preCommitDeposit, record.initialPledge);\n\t}\n\n\t/**\n\t * @notice Returns historical record PreCommitDeposit and Initial Pledge fees for specific `epoch`\n\t * @param epoch Filecoin network Epoch number\n\t */\n\tfunction getHistoricalRecord(uint256 epoch) external view returns (uint256, uint256) {\n\t\tRecord memory record = records[epoch];\n\t\treturn (record.preCommitDeposit, record.initialPledge);\n\t}\n\n\t/**\n\t * @notice Returns last record for PreCommitDeposit fee\n\t */\n\tfunction getLastPreCommitDeposit() external view returns (uint256) {\n\t\treturn records[lastEpochReport].preCommitDeposit;\n\t}\n\n\t/**\n\t * @notice Returns historical record for PreCommitDeposit fee with specified `epoch`\n\t * @param epoch Filecoin network Epoch number\n\t */\n\tfunction getHistoricalPreCommitDeposit(uint256 epoch) external view returns (uint256) {\n\t\treturn records[epoch].preCommitDeposit;\n\t}\n\n\t/**\n\t * @notice Returns last record for Initial Pledge fee\n\t */\n\tfunction getLastInitialPledge() external view returns (uint256) {\n\t\treturn records[lastEpochReport].initialPledge;\n\t}\n\n\t/**\n\t * @notice Returns historical record for Initial Pledge fee with specified `epoch`\n\t * @param epoch Filecoin network Epoch number\n\t */\n\tfunction getHistoricalInitialPledge(uint256 epoch) external view returns (uint256) {\n\t\treturn records[epoch].initialPledge;\n\t}\n}\n"
    },
    "contracts/StorageProviderCollateral.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {IStorageProviderCollateral} from \"./interfaces/IStorageProviderCollateral.sol\";\nimport {IStorageProviderRegistryClient} from \"./interfaces/IStorageProviderRegistryClient.sol\";\nimport {SafeTransferLib} from \"./libraries/SafeTransferLib.sol\";\nimport {StorageProviderTypes} from \"./types/StorageProviderTypes.sol\";\nimport {IWFIL} from \"./libraries/tokens/IWFIL.sol\";\nimport {ReentrancyGuard} from \"lib/solmate/src/utils/ReentrancyGuard.sol\";\nimport {FilAddress} from \"lib/fevmate/contracts/utils/FilAddress.sol\";\nimport {FixedPointMathLib} from \"lib/solmate/src/utils/FixedPointMathLib.sol\";\nimport {AccessControl} from \"lib/openzeppelin-contracts/contracts//access/AccessControl.sol\";\n\n/**\n * @title Storage Provider Collateral stores collateral for covering potential\n * slashing risks by SPs (Storage Providers) in liquid staking protocol.\n *\n * The basis coverage is expected to be around 15% of the total FIL allocation\n * requested by SP. Over time as SPs earn FIL rewards, a locked portion of rewards\n * would be exchanged for the collateral provided upfront. Therefore locked SPs\n * collateral becomes accessible for withdrawals by stakers. This mechanism doesn't\n * create additional slashing risks as SPs are slashed by the locked rewards first,\n * making it a good option for collateralization in the system.\n *\n */\ncontract StorageProviderCollateral is IStorageProviderCollateral, AccessControl, ReentrancyGuard {\n\tusing SafeTransferLib for address;\n\tusing FixedPointMathLib for uint256;\n\tusing FilAddress for address;\n\n\t// Mapping of storage provider collateral information to their owner ID\n\tmapping(uint64 => SPCollateral) public collaterals;\n\n\t// Mapping of storage provider total slashing amounts to their owner ID\n\tmapping(uint64 => uint256) public slashings;\n\n\tmapping(uint64 => uint256) public collateralRequirements;\n\n\tbytes32 private constant COLLATERAL_ADMIN = keccak256(\"COLLATERAL_ADMIN\");\n\n\tuint256 public baseRequirements; // Number in basis points (10000 = 100%)\n\tuint256 public constant BASIS_POINTS = 10000;\n\tIStorageProviderRegistryClient public registry;\n\n\tIWFIL public immutable WFIL; // WFIL implementation\n\n\t// Storage Provider parameters\n\tstruct SPCollateral {\n\t\tuint256 availableCollateral;\n\t\tuint256 lockedCollateral;\n\t}\n\n\tmodifier activeStorageProvider(uint64 _ownerId) {\n\t\trequire(registry.isActiveProvider(_ownerId), \"INACTIVE_STORAGE_PROVIDER\");\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Contract constructor function.\n\t * @param _wFIL WFIL token implementation\n\t *\n\t */\n\tconstructor(IWFIL _wFIL, address _registry, uint256 _baseRequirements) {\n\t\tWFIL = _wFIL;\n\t\tregistry = IStorageProviderRegistryClient(_registry);\n\n\t\trequire(_baseRequirements > 0 || _baseRequirements <= 10000, \"BASE_REQUIREMENTS_OVERFLOW\");\n\t\tbaseRequirements = _baseRequirements;\n\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\t\tgrantRole(COLLATERAL_ADMIN, msg.sender);\n\t}\n\n\treceive() external payable virtual {}\n\n\tfallback() external payable virtual {}\n\n\t/**\n\t * @dev Deposit `msg.value` FIL funds by the msg.sender into collateral\n\t * @notice Wrapps of FIL into WFIL token internally\n\t */\n\tfunction deposit() public payable nonReentrant {\n\t\tuint256 amount = msg.value;\n\t\trequire(amount > 0, \"INVALID_AMOUNT\");\n\n\t\taddress ownerAddr = msg.sender.normalize();\n\t\t(bool isID, uint64 ownerId) = ownerAddr.getActorID();\n\t\trequire(isID, \"INACTIVE_ACTOR_ID\");\n\t\trequire(registry.isActiveProvider(ownerId), \"INACTIVE_STORAGE_PROVIDER\");\n\n\t\tSPCollateral storage collateral = collaterals[ownerId];\n\t\tcollateral.availableCollateral = collateral.availableCollateral + amount;\n\n\t\t_wrapFIL(address(this));\n\n\t\temit StorageProviderCollateralDeposit(ownerId, amount);\n\t}\n\n\t/**\n\t * @dev Withdraw `_amount` of FIL funds by the `msg.sender` from the collateral system\n\t * @notice Unwraps of FIL into WFIL token internally and\n\t * delivers maximum amount of FIL available for withdrawal if `_amount` is bigger.\n\t */\n\tfunction withdraw(uint256 _amount) public nonReentrant {\n\t\trequire(_amount > 0, \"ZERO_AMOUNT\");\n\n\t\taddress ownerAddr = msg.sender.normalize();\n\t\t(bool isID, uint64 ownerId) = ownerAddr.getActorID();\n\t\trequire(isID, \"INACTIVE_ACTOR_ID\");\n\t\trequire(registry.isActiveProvider(ownerId), \"INACTIVE_STORAGE_PROVIDER\");\n\n\t\t(uint256 lockedWithdraw, uint256 availableWithdraw, bool isUnlock) = calcMaximumWithdraw(ownerId);\n\t\tuint256 maxWithdraw = lockedWithdraw + availableWithdraw;\n\t\tuint256 finalAmount = _amount > maxWithdraw ? maxWithdraw : _amount;\n\t\tuint256 delta;\n\n\t\tif (isUnlock) {\n\t\t\tdelta = finalAmount - lockedWithdraw;\n\t\t\tcollaterals[ownerId].lockedCollateral = collaterals[ownerId].lockedCollateral - lockedWithdraw; // 10 - 2 == 8\n\t\t\tcollaterals[ownerId].availableCollateral = collaterals[ownerId].availableCollateral - delta; // 5 + 1 == 6\n\n\t\t\t_unwrapWFIL(msg.sender, finalAmount);\n\t\t} else {\n\t\t\tcollaterals[ownerId].availableCollateral = collaterals[ownerId].availableCollateral - finalAmount;\n\t\t}\n\n\t\temit StorageProviderCollateralWithdraw(ownerId, finalAmount);\n\t}\n\n\t/**\n\t * @dev Locks required collateral amount based on `_allocated` FIL to pledge\n\t * @notice Increases the total amount of locked collateral for storage provider\n\t * @param _ownerId Storage provider owner ID\n\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\n\t */\n\tfunction lock(uint64 _ownerId, uint256 _allocated) external activeStorageProvider(_ownerId) {\n\t\trequire(registry.isActivePool(msg.sender), \"INVALID_ACCESS\");\n\t\trequire(_allocated > 0, \"ZERO_ALLOCATION\");\n\n\t\t_rebalance(_ownerId, _allocated);\n\t\tregistry.increaseUsedAllocation(_ownerId, _allocated, block.timestamp);\n\t}\n\n\t/**\n\t * @dev Fits collateral amounts based on SP pledge usage, distributed rewards and pledge paybacks\n\t * @notice Rebalances the total locked and available collateral amounts\n\t * @param _ownerId Storage provider owner ID\n\t */\n\tfunction fit(uint64 _ownerId) external activeStorageProvider(_ownerId) {\n\t\trequire(registry.isActivePool(msg.sender), \"INVALID_ACCESS\");\n\n\t\t_rebalance(_ownerId, 0);\n\t}\n\n\t/**\n\t * @dev Slashes SP for a `_slashingAmt` and delivers WFIL amount to the `msg.sender` LSP\n\t * @notice Doesn't perform a rebalancing checks\n\t * @param _ownerId Storage provider owner ID\n\t * @param _slashingAmt Slashing amount for SP\n\t */\n\tfunction slash(uint64 _ownerId, uint256 _slashingAmt) external activeStorageProvider(_ownerId) {\n\t\trequire(registry.isActivePool(msg.sender), \"INVALID_ACCESS\");\n\n\t\tSPCollateral memory collateral = collaterals[_ownerId];\n\t\tif (_slashingAmt <= collateral.lockedCollateral) {\n\t\t\tcollateral.lockedCollateral = collateral.lockedCollateral - _slashingAmt;\n\t\t} else {\n\t\t\tuint256 totalCollateral = collateral.lockedCollateral + collateral.availableCollateral;\n\t\t\trequire(_slashingAmt <= totalCollateral, \"NOT_ENOUGH_COLLATERAL\"); // TODO: introduce debt for SP to cover worst case scenario\n\t\t\tuint256 delta = _slashingAmt - collateral.lockedCollateral;\n\n\t\t\tcollateral.lockedCollateral = 0;\n\t\t\tcollateral.availableCollateral = collateral.availableCollateral - delta;\n\t\t}\n\n\t\tcollaterals[_ownerId] = collateral;\n\t\tslashings[_ownerId] += _slashingAmt;\n\n\t\tWFIL.transfer(msg.sender, _slashingAmt);\n\n\t\temit StorageProviderCollateralSlash(_ownerId, _slashingAmt, msg.sender);\n\t}\n\n\t/**\n\t * @notice Return Storage Provider Collateral information with `_provider` address\n\t */\n\tfunction getCollateral(uint64 _ownerId) public view returns (uint256, uint256) {\n\t\tSPCollateral memory collateral = collaterals[_ownerId];\n\t\treturn (collateral.availableCollateral, collateral.lockedCollateral);\n\t}\n\n\t/**\n\t * @notice Return Storage Provider Available Collateral information with `_provider` address\n\t */\n\tfunction getAvailableCollateral(uint64 _ownerId) public view returns (uint256) {\n\t\treturn collaterals[_ownerId].availableCollateral;\n\t}\n\n\t/**\n\t * @notice Return Storage Provider Locked Collateral information with `_provider` address\n\t */\n\tfunction getLockedCollateral(uint64 _ownerId) public view returns (uint256) {\n\t\treturn collaterals[_ownerId].lockedCollateral;\n\t}\n\n\tfunction getDebt(uint64 _ownerId) public view returns (uint256) {\n\t\t(, , uint256 usedAllocation, , , uint256 repaidPledge) = registry.allocations(_ownerId);\n\n\t\tuint256 _collateralRequirements = collateralRequirements[_ownerId];\n\t\tuint256 requirements = calcCollateralRequirements(usedAllocation, repaidPledge, 0, _collateralRequirements);\n\t\tSPCollateral memory collateral = collaterals[_ownerId];\n\n\t\t(uint256 adjAmt, bool isUnlock) = calcCollateralAdjustment(collateral.lockedCollateral, requirements);\n\n\t\tif (!isUnlock) {\n\t\t\treturn adjAmt;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t/**\n\t * @notice Calculates max collateral withdrawal amount for SP depending on the\n\t * total used FIL allocation and locked rewards.\n\t * @param _ownerId Storage Provider owner address\n\t */\n\tfunction calcMaximumWithdraw(uint64 _ownerId) internal view returns (uint256, uint256, bool) {\n\t\t(, , uint256 usedAllocation, , , uint256 repaidPledge) = registry.allocations(_ownerId);\n\n\t\tuint256 _collateralRequirements = collateralRequirements[_ownerId];\n\t\tuint256 requirements = calcCollateralRequirements(usedAllocation, repaidPledge, 0, _collateralRequirements);\n\t\tSPCollateral memory collateral = collaterals[_ownerId];\n\n\t\t(uint256 adjAmt, bool isUnlock) = calcCollateralAdjustment(collateral.lockedCollateral, requirements);\n\n\t\tif (!isUnlock) {\n\t\t\tadjAmt = collateral.availableCollateral - adjAmt;\n\n\t\t\treturn (0, adjAmt, isUnlock);\n\t\t} else {\n\t\t\treturn (adjAmt, collateral.availableCollateral, isUnlock);\n\t\t}\n\t}\n\n\t/**\n\t * @notice Rebalances collateral for a specified `_ownerId` with `_allocated` in mind\n\t * @param _ownerId Storage Provider owner address\n\t * @param _allocated Hypothetical allocation for SP\n\t */\n\tfunction _rebalance(uint64 _ownerId, uint256 _allocated) internal {\n\t\t(uint256 allocationLimit, , uint256 usedAllocation, , , uint256 repaidPledge) = registry.allocations(_ownerId);\n\n\t\tif (_allocated > 0) {\n\t\t\trequire(usedAllocation + _allocated <= allocationLimit, \"ALLOCATION_OVERFLOW\");\n\t\t}\n\t\tuint256 _collateralRequirements = collateralRequirements[_ownerId];\n\t\tuint256 totalRequirements = calcCollateralRequirements(\n\t\t\tusedAllocation,\n\t\t\trepaidPledge,\n\t\t\t_allocated,\n\t\t\t_collateralRequirements\n\t\t);\n\n\t\tSPCollateral memory collateral = collaterals[_ownerId];\n\t\trequire(\n\t\t\ttotalRequirements <= collateral.lockedCollateral + collateral.availableCollateral,\n\t\t\t\"INSUFFICIENT_COLLATERAL\"\n\t\t);\n\n\t\t(uint256 adjAmt, bool isUnlock) = calcCollateralAdjustment(collateral.lockedCollateral, totalRequirements);\n\n\t\tif (!isUnlock) {\n\t\t\tcollateral.lockedCollateral = collateral.lockedCollateral + adjAmt;\n\t\t\tcollateral.availableCollateral = collateral.availableCollateral - adjAmt;\n\n\t\t\temit StorageProviderCollateralRebalance(_ownerId, adjAmt, 0, isUnlock);\n\t\t} else {\n\t\t\tcollateral.lockedCollateral = collateral.lockedCollateral - adjAmt;\n\t\t\tcollateral.availableCollateral = collateral.availableCollateral + adjAmt;\n\n\t\t\temit StorageProviderCollateralRebalance(_ownerId, 0, adjAmt, isUnlock);\n\t\t}\n\n\t\tcollaterals[_ownerId] = collateral;\n\t}\n\n\t/**\n\t * @notice Calculates total collateral requirements for SP depending on the\n\t * total used FIL allocation and locked rewards.\n\t * @param _usedAllocation Already used FIL allocation by Storage Provider\n\t * @param _repaidPledge Repaid pledge by SP\n\t * @param _allocationToUse Allocation to be used by SP\n\t * @param _collateralRequirements Percentage of collateral coverage\n\t */\n\tfunction calcCollateralRequirements(\n\t\tuint256 _usedAllocation,\n\t\tuint256 _repaidPledge,\n\t\tuint256 _allocationToUse,\n\t\tuint256 _collateralRequirements\n\t) internal pure returns (uint256) {\n\t\tuint256 usedAllocation = _allocationToUse > 0 ? _usedAllocation + _allocationToUse : _usedAllocation;\n\t\tuint256 req = usedAllocation - _repaidPledge;\n\n\t\tif (req > 0) {\n\t\t\treturn req.mulDivDown(_collateralRequirements, BASIS_POINTS);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @notice Calculates collateral adjustment for SP depending on the\n\t * total locked collateral and overall collateral requirements.\n\t * @param _lockedCollateral Locked collateral amount for Storage Provider\n\t * @param _collateralRequirements Collateral requirements for SP\n\t */\n\tfunction calcCollateralAdjustment(\n\t\tuint256 _lockedCollateral,\n\t\tuint256 _collateralRequirements\n\t) internal pure returns (uint256, bool) {\n\t\tif (_lockedCollateral > 0 && _collateralRequirements > 0) {\n\t\t\tif (_lockedCollateral > _collateralRequirements) {\n\t\t\t\treturn (_lockedCollateral - _collateralRequirements, true);\n\t\t\t} else {\n\t\t\t\treturn (_collateralRequirements - _lockedCollateral, false);\n\t\t\t}\n\t\t} else if (_lockedCollateral > 0 && _collateralRequirements == 0) {\n\t\t\treturn (_lockedCollateral, true);\n\t\t} else if (_lockedCollateral == 0 && _collateralRequirements > 0) {\n\t\t\treturn (_collateralRequirements, false);\n\t\t} else if (_lockedCollateral == 0 && _collateralRequirements == 0) {\n\t\t\treturn (0, true);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Updates collateral requirements for SP with `_ownerId` by `requirements` percentage\n\t * @notice Only triggered by Collateral admin or registry contract while registering SP\n\t * @param _ownerId Storage provider owner ID\n\t * @param requirements Percentage of collateral requirements\n\t */\n\tfunction updateCollateralRequirements(uint64 _ownerId, uint256 requirements) external {\n\t\trequire(hasRole(COLLATERAL_ADMIN, msg.sender) || msg.sender == address(registry), \"INVALID_ACCESS\");\n\n\t\tif (requirements == 0) {\n\t\t\tcollateralRequirements[_ownerId] = baseRequirements;\n\n\t\t\temit StorageProviderCollateralUpdate(_ownerId, 0, baseRequirements);\n\t\t} else {\n\t\t\tuint256 prevRequirements = collateralRequirements[_ownerId];\n\t\t\trequire(requirements <= 10000, \"COLLATERAL_REQUIREMENTS_OVERFLOW\");\n\t\t\trequire(requirements != prevRequirements, \"SAME_COLLATERAL_REQUIREMENTS\");\n\n\t\t\tcollateralRequirements[_ownerId] = requirements;\n\n\t\t\temit StorageProviderCollateralUpdate(_ownerId, prevRequirements, requirements);\n\t\t}\n\t}\n\n\t/**\n\t * @notice Wraps FIL into WFIL and transfers it to the `_recipient` address\n\t * @param _recipient WFIL recipient address\n\t */\n\tfunction _wrapFIL(address _recipient) internal {\n\t\tuint256 amount = msg.value;\n\n\t\tWFIL.deposit{value: amount}();\n\t\tWFIL.transfer(_recipient, amount);\n\t}\n\n\t/**\n\t * @notice Unwraps `_amount` of WFIL into FIL and transfers it to the `_recipient` address\n\t * @param _recipient WFIL recipient address\n\t */\n\tfunction _unwrapWFIL(address _recipient, uint256 _amount) internal {\n\t\tuint256 balanceWETH9 = WFIL.balanceOf(address(this));\n\t\trequire(balanceWETH9 >= _amount, \"Insufficient WETH9\");\n\n\t\tif (balanceWETH9 > 0) {\n\t\t\tWFIL.withdraw(_amount);\n\t\t\t_recipient.safeTransferETH(_amount);\n\t\t}\n\t}\n\n\t/**\n\t * @notice Updates base collateral requirements amount for Storage Providers\n\t * @param requirements New base collateral requirements for SP\n\t */\n\tfunction updateBaseCollateralRequirements(uint256 requirements) public {\n\t\trequire(hasRole(COLLATERAL_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(requirements > 0, \"INVALID_REQUIREMENTS\");\n\n\t\tuint256 prevRequirements = baseRequirements;\n\t\trequire(requirements != prevRequirements, \"SAME_REQUIREMENTS\");\n\n\t\tbaseRequirements = requirements;\n\n\t\temit UpdateBaseCollateralRequirements(requirements);\n\t}\n\n\t/**\n\t * @notice Updates StorageProviderRegistry contract address\n\t * @param newAddr StorageProviderRegistry contract address\n\t */\n\tfunction setRegistryAddress(address newAddr) public {\n\t\trequire(hasRole(COLLATERAL_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(newAddr != address(0), \"INVALID_ADDRESS\");\n\n\t\taddress prevRegistry = address(registry);\n\t\trequire(prevRegistry != newAddr, \"SAME_ADDRESS\");\n\n\t\tregistry = IStorageProviderRegistryClient(newAddr);\n\n\t\temit SetRegistryAddress(newAddr);\n\t}\n}\n"
    },
    "contracts/StorageProviderRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {MinerAPI, MinerTypes, CommonTypes} from \"lib/filecoin-solidity/contracts/v0.8/MinerAPI.sol\";\nimport {PrecompilesAPI} from \"lib/filecoin-solidity/contracts/v0.8/PrecompilesAPI.sol\";\nimport {StorageProviderTypes} from \"./types/StorageProviderTypes.sol\";\nimport {FilAddress} from \"lib/fevmate/contracts/utils/FilAddress.sol\";\nimport {ReentrancyGuard} from \"lib/solmate/src/utils/ReentrancyGuard.sol\";\n\nimport {AccessControl} from \"lib/openzeppelin-contracts/contracts//access/AccessControl.sol\";\nimport {Counters} from \"lib/openzeppelin-contracts/contracts//utils/Counters.sol\";\nimport {BokkyPooBahsDateTimeLibrary} from \"./libraries/DateTimeLibraryCompressed.sol\";\nimport {IStorageProviderRegistry} from \"./interfaces/IStorageProviderRegistry.sol\";\nimport {ILiquidStakingClient} from \"./interfaces/ILiquidStakingClient.sol\";\nimport {IStorageProviderCollateralClient} from \"./interfaces/IStorageProviderCollateralClient.sol\";\n\n/**\n * @title Storage Provider Registry contract allows storage providers to register\n * in liquid staking protocol and ask for a FIL allocation.\n *\n * Once Storage Provider is registered and signaled their desired FIL allocation\n * it needs to transfer\n *\n */\ncontract StorageProviderRegistry is IStorageProviderRegistry, AccessControl, ReentrancyGuard {\n\tusing Counters for Counters.Counter;\n\tusing FilAddress for address;\n\n\t// Mapping of storage provider IDs to their storage provider info\n\tmapping(uint64 => StorageProviderTypes.StorageProvider) public storageProviders;\n\n\t// Mapping of storage provider IDs to their restaking info\n\tmapping(uint64 => StorageProviderTypes.SPAllocation) public allocations;\n\n\t// Mapping of storage provider IDs to their restaking info\n\tmapping(uint64 => StorageProviderTypes.SPRestaking) public restakings;\n\n\t// Mapping of storage provider IDs to their allocation update requests\n\tmapping(uint64 => StorageProviderTypes.AllocationRequest) public allocationRequests;\n\n\t// Mapping of storage provider IDs to their sector sizes\n\tmapping(uint64 => uint64) public sectorSizes;\n\n\t// Mapping of storage providers daily allocation usage to date hashes\n\tmapping(bytes32 => uint256) public dailyUsages;\n\n\tmapping(address => bool) public pools;\n\n\tCounters.Counter public totalStorageProviders;\n\tCounters.Counter public totalInactiveStorageProviders;\n\n\tbytes32 private constant REGISTRY_ADMIN = keccak256(\"REGISTRY_ADMIN\");\n\n\tuint256 public maxAllocation;\n\n\tIStorageProviderCollateralClient public collateral;\n\n\tmodifier activeStorageProvider(uint64 _ownerId) {\n\t\trequire(storageProviders[_ownerId].active, \"INACTIVE_STORAGE_PROVIDER\");\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Contract constructor function.\n\t * @param _maxAllocation Number of maximum FIL allocated to a single storage provider\n\t */\n\tconstructor(uint256 _maxAllocation) {\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\t\tgrantRole(REGISTRY_ADMIN, msg.sender);\n\t\tmaxAllocation = _maxAllocation;\n\t}\n\n\tstruct RegisterLocalVars {\n\t\taddress ownerAddr;\n\t\tbool isID;\n\t\tuint64 msgSenderId;\n\t\tuint64 ownerId;\n\t\tuint64 sectorSize;\n\t}\n\n\t/**\n\t * @notice Register storage provider with `_minerId`, desired `_allocationLimit` and `_targetPool`\n\t * @param _minerId Storage Provider miner ID in Filecoin network\n\t * @param _targetPool Target liquid staking strategy\n\t * @param _allocationLimit FIL allocation for storage provider\n\t * @param _dailyAllocation Daily FIL allocation for storage provider\n\t * @dev Only triggered by Storage Provider owner\n\t */\n\tfunction register(\n\t\tuint64 _minerId,\n\t\taddress _targetPool,\n\t\tuint256 _allocationLimit,\n\t\tuint256 _dailyAllocation\n\t) public virtual override nonReentrant {\n\t\trequire(_allocationLimit <= maxAllocation, \"INVALID_ALLOCATION\");\n\t\trequire(pools[_targetPool], \"INVALID_TARGET_POOL\");\n\n\t\tRegisterLocalVars memory vars;\n\n\t\tvars.ownerAddr = msg.sender.normalize();\n\t\t(vars.isID, vars.msgSenderId) = vars.ownerAddr.getActorID();\n\t\trequire(vars.isID, \"INACTIVE_ACTOR_ID\");\n\n\t\tCommonTypes.FilActorId actorId = CommonTypes.FilActorId.wrap(_minerId);\n\n\t\tMinerTypes.GetOwnerReturn memory ownerReturn = MinerAPI.getOwner(actorId);\n\t\trequire(keccak256(ownerReturn.proposed.data) == keccak256(bytes(\"\")), \"PROPOSED_NEW_OWNER\");\n\n\t\tvars.ownerId = PrecompilesAPI.resolveAddress(ownerReturn.owner);\n\t\trequire(vars.ownerId == vars.msgSenderId, \"INVALID_MINER_OWNERSHIP\");\n\t\trequire(!storageProviders[vars.ownerId].onboarded, \"ALREADY_REGISTERED\");\n\n\t\tStorageProviderTypes.StorageProvider storage storageProvider = storageProviders[vars.ownerId];\n\t\tstorageProvider.minerId = _minerId;\n\t\tstorageProvider.targetPool = _targetPool;\n\n\t\tStorageProviderTypes.SPAllocation storage spAllocation = allocations[vars.ownerId];\n\t\tspAllocation.allocationLimit = _allocationLimit;\n\t\tspAllocation.dailyAllocation = _dailyAllocation;\n\n\t\tvars.sectorSize = MinerAPI.getSectorSize(actorId);\n\t\tsectorSizes[vars.ownerId] = vars.sectorSize;\n\n\t\ttotalStorageProviders.increment();\n\t\ttotalInactiveStorageProviders.increment();\n\n\t\tcollateral.updateCollateralRequirements(vars.ownerId, 0);\n\t\tILiquidStakingClient(_targetPool).updateProfitShare(vars.ownerId, 0);\n\n\t\temit StorageProviderRegistered(\n\t\t\townerReturn.owner.data,\n\t\t\tvars.ownerId,\n\t\t\t_minerId,\n\t\t\t_targetPool,\n\t\t\t_allocationLimit,\n\t\t\t_dailyAllocation\n\t\t);\n\t}\n\n\t/**\n\t * @notice Onboard storage provider with `_minerId`, desired `_allocationLimit`, `_repayment` amount\n\t * @param _minerId Storage Provider miner ID in Filecoin network\n\t * @param _allocationLimit FIL allocation for storage provider\n\t * @param _dailyAllocation Daily FIL allocation for storage provider\n\t * @param _repayment FIL repayment for storage provider\n\t * @param _lastEpoch Last epoch for FIL allocation utilization\n\t * @dev Only triggered by registry admin\n\t */\n\tfunction onboardStorageProvider(\n\t\tuint64 _minerId,\n\t\tuint256 _allocationLimit,\n\t\tuint256 _dailyAllocation,\n\t\tuint256 _repayment,\n\t\tint64 _lastEpoch\n\t) public virtual nonReentrant {\n\t\trequire(hasRole(REGISTRY_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(_repayment > _allocationLimit, \"INCORRECT_REPAYMENT\");\n\t\trequire(_allocationLimit <= maxAllocation, \"INCORRECT_ALLOCATION\");\n\t\tCommonTypes.FilActorId actorId = CommonTypes.FilActorId.wrap(_minerId);\n\n\t\tMinerTypes.GetOwnerReturn memory ownerReturn = MinerAPI.getOwner(actorId);\n\t\trequire(keccak256(bytes(\"\")) == keccak256(ownerReturn.proposed.data), \"PROPOSED_NEW_OWNER\");\n\n\t\tuint64 ownerId = PrecompilesAPI.resolveAddress(ownerReturn.owner);\n\n\t\tStorageProviderTypes.StorageProvider storage storageProvider = storageProviders[ownerId];\n\t\tStorageProviderTypes.SPAllocation storage spAllocation = allocations[ownerId];\n\t\trequire(!storageProviders[ownerId].onboarded, \"ALREADY_REGISTERED\");\n\n\t\tstorageProvider.onboarded = true;\n\t\tstorageProvider.lastEpoch = _lastEpoch;\n\n\t\tspAllocation.repayment = _repayment;\n\t\tspAllocation.allocationLimit = _allocationLimit;\n\t\tspAllocation.dailyAllocation = _dailyAllocation;\n\n\t\temit StorageProviderOnboarded(ownerId, _minerId, _allocationLimit, _dailyAllocation, _repayment, _lastEpoch);\n\t}\n\n\t/**\n\t * @notice Transfer beneficiary address of a miner to the target pool\n\t */\n\tfunction changeBeneficiaryAddress() public virtual override nonReentrant {\n\t\taddress ownerAddr = msg.sender.normalize();\n\t\t(bool isID, uint64 ownerId) = ownerAddr.getActorID();\n\t\trequire(isID, \"INACTIVE_ACTOR_ID\");\n\n\t\tStorageProviderTypes.StorageProvider memory storageProvider = storageProviders[ownerId];\n\t\trequire(storageProvider.onboarded, \"NON_ONBOARDED_SP\");\n\n\t\tILiquidStakingClient(storageProviders[ownerId].targetPool).forwardChangeBeneficiary(\n\t\t\tstorageProvider.minerId,\n\t\t\tstorageProvider.targetPool,\n\t\t\tallocations[ownerId].repayment,\n\t\t\tstorageProvider.lastEpoch\n\t\t);\n\n\t\temit StorageProviderBeneficiaryAddressUpdated(storageProvider.targetPool);\n\t}\n\n\t/**\n\t * @notice Accept beneficiary address transfer and activate FIL allocation\n\t * @param _ownerId Storage Provider owner ID\n\t * @dev Only triggered by registry admin\n\t */\n\tfunction acceptBeneficiaryAddress(uint64 _ownerId) public virtual override nonReentrant {\n\t\trequire(hasRole(REGISTRY_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\n\t\tStorageProviderTypes.StorageProvider memory storageProvider = storageProviders[_ownerId];\n\t\trequire(storageProvider.onboarded, \"NON_ONBOARDED_SP\");\n\n\t\tILiquidStakingClient(storageProviders[_ownerId].targetPool).forwardChangeBeneficiary(\n\t\t\tstorageProvider.minerId,\n\t\t\tstorageProvider.targetPool,\n\t\t\tallocations[_ownerId].repayment,\n\t\t\tstorageProvider.lastEpoch\n\t\t);\n\n\t\tstorageProviders[_ownerId].active = true;\n\t\ttotalInactiveStorageProviders.decrement();\n\n\t\temit StorageProviderBeneficiaryAddressAccepted(_ownerId);\n\t}\n\n\t/**\n\t * @notice Deactive storage provider with ID `_ownerId`\n\t * @param _ownerId Storage Provider owner ID\n\t * @dev Only triggered by registry admin\n\t */\n\tfunction deactivateStorageProvider(uint64 _ownerId) public activeStorageProvider(_ownerId) {\n\t\trequire(hasRole(REGISTRY_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\tstorageProviders[_ownerId].active = false;\n\t\ttotalInactiveStorageProviders.increment();\n\n\t\temit StorageProviderDeactivated(_ownerId);\n\t}\n\n\t/**\n\t * @notice Update storage provider miner ID with `_minerId`\n\t * @param _ownerId Storage Provider owner ID\n\t * @param _minerId Storage Provider new miner ID\n\t * @dev Only triggered by registry admin\n\t */\n\tfunction setMinerAddress(uint64 _ownerId, uint64 _minerId) public virtual activeStorageProvider(_ownerId) {\n\t\trequire(hasRole(REGISTRY_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\tuint64 prevMiner = storageProviders[_ownerId].minerId;\n\t\trequire(prevMiner != _minerId, \"SAME_MINER\");\n\n\t\tCommonTypes.FilActorId actorId = CommonTypes.FilActorId.wrap(_minerId);\n\n\t\tMinerTypes.GetOwnerReturn memory ownerReturn = MinerAPI.getOwner(actorId);\n\t\trequire(keccak256(ownerReturn.proposed.data) == keccak256(bytes(\"\")), \"PROPOSED_NEW_OWNER\");\n\n\t\tuint64 ownerId = PrecompilesAPI.resolveAddress(ownerReturn.owner);\n\t\trequire(ownerId == _ownerId, \"INVALID_MINER_OWNERSHIP\");\n\n\t\tstorageProviders[_ownerId].minerId = _minerId;\n\n\t\temit StorageProviderMinerAddressUpdate(_ownerId, _minerId);\n\t}\n\n\t/**\n\t * @notice Request storage provider's FIL allocation update with `_allocationLimit`\n\t * @param _allocationLimit New FIL allocation for storage provider\n\t * @param _dailyAllocation New daily FIL allocation for storage provider\n\t * @dev Only triggered by Storage Provider owner\n\t */\n\tfunction requestAllocationLimitUpdate(uint256 _allocationLimit, uint256 _dailyAllocation) public virtual override {\n\t\taddress ownerAddr = msg.sender.normalize();\n\t\t(bool isID, uint64 ownerId) = ownerAddr.getActorID();\n\t\trequire(isID, \"INACTIVE_ACTOR_ID\");\n\n\t\tStorageProviderTypes.StorageProvider memory storageProvider = storageProviders[ownerId];\n\t\trequire(storageProvider.active, \"INACTIVE_STORAGE_PROVIDER\");\n\n\t\tStorageProviderTypes.SPAllocation memory spAllocation = allocations[ownerId];\n\t\trequire(\n\t\t\tspAllocation.allocationLimit != _allocationLimit || spAllocation.dailyAllocation != _dailyAllocation,\n\t\t\t\"SAME_ALLOCATION_LIMIT\"\n\t\t);\n\t\trequire(_allocationLimit <= maxAllocation, \"ALLOCATION_OVERFLOW\");\n\n\t\tStorageProviderTypes.AllocationRequest storage allocationRequest = allocationRequests[ownerId];\n\t\tallocationRequest.allocationLimit = _allocationLimit;\n\t\tallocationRequest.dailyAllocation = _dailyAllocation;\n\n\t\temit StorageProviderAllocationLimitRequest(ownerId, _allocationLimit, _dailyAllocation);\n\t}\n\n\t/**\n\t * @notice Update storage provider FIL allocation with `_allocationLimit`\n\t * @param _ownerId Storage provider owner ID\n\t * @param _allocationLimit New FIL allocation for storage provider\n\t * @param _dailyAllocation New daily FIL allocation for storage provider\n\t * @param _repaymentAmount New FIL repayment amount for storage provider\n\t * @dev Only triggered by registry admin\n\t */\n\tfunction updateAllocationLimit(\n\t\tuint64 _ownerId,\n\t\tuint256 _allocationLimit,\n\t\tuint256 _dailyAllocation,\n\t\tuint256 _repaymentAmount\n\t) public virtual override activeStorageProvider(_ownerId) nonReentrant {\n\t\trequire(hasRole(REGISTRY_ADMIN, msg.sender), \"INVALID_ACCESS\"); // 0xFf0000000000000000009bd -> ID: 2455 -> t02455\n\n\t\tStorageProviderTypes.AllocationRequest memory allocationRequest = allocationRequests[_ownerId];\n\t\trequire(allocationRequest.allocationLimit == _allocationLimit, \"INVALID_ALLOCATION\");\n\t\trequire(allocationRequest.dailyAllocation == _dailyAllocation, \"INVALID_DAILY_ALLOCATION\");\n\n\t\tStorageProviderTypes.StorageProvider memory storageProvider = storageProviders[_ownerId];\n\n\t\tILiquidStakingClient(storageProviders[_ownerId].targetPool).forwardChangeBeneficiary(\n\t\t\tstorageProvider.minerId,\n\t\t\tstorageProvider.targetPool,\n\t\t\t_repaymentAmount,\n\t\t\tstorageProvider.lastEpoch\n\t\t);\n\n\t\tStorageProviderTypes.SPAllocation storage spAllocation = allocations[_ownerId];\n\t\tspAllocation.allocationLimit = _allocationLimit;\n\t\tspAllocation.dailyAllocation = _dailyAllocation;\n\t\tspAllocation.repayment = _repaymentAmount;\n\n\t\tdelete allocationRequests[_ownerId];\n\n\t\temit StorageProviderAllocationLimitUpdate(_ownerId, _allocationLimit, _dailyAllocation, _repaymentAmount);\n\t}\n\n\t/**\n\t * @notice Update storage provider's restaking ratio\n\t * @param _restakingRatio Restaking ratio for Storage Provider\n\t * @param _restakingAddress Restaking address (f4 address) for Storage Provider\n\t * @dev Only triggered by Storage Provider\n\t */\n\tfunction setRestaking(uint256 _restakingRatio, address _restakingAddress) public virtual override {\n\t\tuint64 ownerId = PrecompilesAPI.resolveEthAddress(msg.sender);\n\n\t\trequire(_restakingRatio <= 10000, \"INVALID_RESTAKING_RATIO\");\n\t\trequire(_restakingAddress != address(0), \"INVALID_ADDRESS\");\n\n\t\tStorageProviderTypes.SPRestaking storage restaking = restakings[ownerId];\n\t\trestaking.restakingRatio = _restakingRatio;\n\t\trestaking.restakingAddress = _restakingAddress;\n\n\t\temit StorageProviderMinerRestakingRatioUpdate(ownerId, _restakingRatio, _restakingAddress);\n\t}\n\n\t/**\n\t * @notice Return total number of storage providers in liquid staking\n\t */\n\tfunction getTotalStorageProviders() public view returns (uint256) {\n\t\treturn totalStorageProviders.current();\n\t}\n\n\t/**\n\t * @notice Return total number of currently active storage providers\n\t */\n\tfunction getTotalActiveStorageProviders() public view returns (uint256) {\n\t\treturn totalStorageProviders.current() - totalInactiveStorageProviders.current();\n\t}\n\n\t/**\n\t * @notice Return Storage Provider information with `_ownerId`\n\t */\n\tfunction getStorageProvider(uint64 _ownerId) public view returns (bool, address, uint64, int64) {\n\t\tStorageProviderTypes.StorageProvider memory storageProvider = storageProviders[_ownerId];\n\t\treturn (storageProvider.active, storageProvider.targetPool, storageProvider.minerId, storageProvider.lastEpoch);\n\t}\n\n\t/**\n\t * @notice Return a boolean flag of Storage Provider activity\n\t */\n\tfunction isActiveProvider(uint64 _ownerId) external view returns (bool status) {\n\t\tstatus = storageProviders[_ownerId].active;\n\t}\n\n\t/**\n\t * @notice Increase collected rewards by Storage Provider\n\t * @param _ownerId Storage Provider owner ID\n\t * @param _accuredRewards Withdrawn rewards from SP's miner actor\n\t */\n\tfunction increaseRewards(uint64 _ownerId, uint256 _accuredRewards) external {\n\t\trequire(pools[msg.sender], \"INVALID_ACCESS\");\n\n\t\tStorageProviderTypes.SPAllocation storage spAllocation = allocations[_ownerId];\n\t\tspAllocation.accruedRewards = spAllocation.accruedRewards + _accuredRewards;\n\n\t\temit StorageProviderAccruedRewards(_ownerId, _accuredRewards);\n\t}\n\n\t/**\n\t * @notice Increase repaid pledge by Storage Provider\n\t * @param _ownerId Storage Provider owner ID\n\t * @param _repaidPledge Withdrawn initial pledge after sector termination\n\t */\n\tfunction increasePledgeRepayment(uint64 _ownerId, uint256 _repaidPledge) external {\n\t\trequire(pools[msg.sender], \"INVALID_ACCESS\");\n\n\t\tStorageProviderTypes.SPAllocation storage spAllocation = allocations[_ownerId];\n\t\tspAllocation.repaidPledge = spAllocation.repaidPledge + _repaidPledge;\n\t\trequire(spAllocation.repaidPledge <= spAllocation.usedAllocation, \"PLEDGE_REPAYMENT_OVERFLOW\");\n\n\t\temit StorageProviderRepaidPledge(_ownerId, _repaidPledge);\n\t}\n\n\t/**\n\t * @notice Increase used allocation for Storage Provider\n\t * @param _ownerId Storage Provider owner ID\n\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\n\t * @param _timestamp Transaction timestamp\n\t */\n\tfunction increaseUsedAllocation(uint64 _ownerId, uint256 _allocated, uint256 _timestamp) external {\n\t\trequire(msg.sender == address(collateral), \"INVALID_ACCESS\");\n\n\t\t(uint year, uint month, uint day) = BokkyPooBahsDateTimeLibrary.timestampToDate(_timestamp);\n\t\tbytes32 dateHash = keccak256(abi.encodePacked(year, month, day));\n\n\t\tuint256 usedDailyAlloc = dailyUsages[dateHash];\n\t\tuint256 totalDailyUsage = usedDailyAlloc + _allocated;\n\n\t\tStorageProviderTypes.SPAllocation storage spAllocation = allocations[_ownerId];\n\n\t\trequire(totalDailyUsage <= spAllocation.dailyAllocation, \"DAILY_ALLOCATION_OVERFLOW\");\n\t\t// require(spAllocation.usedAllocation + _allocated <= spAllocation.allocationLimit, \"TOTAL_ALLOCATION_OVERFLOW\");\n\n\t\tspAllocation.usedAllocation = spAllocation.usedAllocation + _allocated;\n\t\tdailyUsages[dateHash] += _allocated;\n\n\t\temit StorageProviderAllocationUsed(_ownerId, _allocated);\n\t}\n\n\t/**\n\t * @notice Update StorageProviderCollateral smart contract\n\t * @param _collateral StorageProviderCollateral smart contract address\n\t * @dev Only triggered by registry admin\n\t */\n\tfunction setCollateralAddress(address _collateral) public {\n\t\trequire(hasRole(REGISTRY_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(_collateral != address(0), \"INVALID_ADDRESS\");\n\n\t\taddress prevCollateral = address(collateral);\n\t\trequire(prevCollateral != _collateral, \"SAME_ADDRESS\");\n\n\t\tcollateral = IStorageProviderCollateralClient(_collateral);\n\n\t\temit CollateralAddressUpdated(_collateral);\n\t}\n\n\t/**\n\t * @notice Register new liquid staking pool\n\t * @param _pool Address of pool smart contract\n\t * @dev Only triggered by registry admin\n\t */\n\tfunction registerPool(address _pool) public {\n\t\trequire(hasRole(REGISTRY_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(_pool != address(0), \"INVALID_ADDRESS\");\n\t\trequire(!pools[_pool], \"ALREADY_ACTIVE_POOL\");\n\n\t\tpools[_pool] = true;\n\n\t\temit LiquidStakingPoolRegistered(_pool);\n\t}\n\n\t/**\n\t * @notice Updates maximum allocation amount for SP\n\t * @param allocation New max allocation per SP\n\t */\n\tfunction updateMaxAllocation(uint256 allocation) public {\n\t\trequire(hasRole(REGISTRY_ADMIN, msg.sender), \"INVALID_ACCESS\");\n\t\trequire(allocation > 0, \"INVALID_ALLOCATION\");\n\n\t\tuint256 prevAllocation = maxAllocation;\n\t\trequire(allocation != prevAllocation, \"SAME_ALLOCATION\");\n\n\t\tmaxAllocation = allocation;\n\n\t\temit UpdateMaxAllocation(allocation);\n\t}\n\n\t/**\n\t * @notice Return a boolean flag whether `_pool` is active or not\n\t */\n\tfunction isActivePool(address _pool) external view returns (bool) {\n\t\treturn pools[_pool];\n\t}\n}\n"
    },
    "contracts/types/StorageProviderTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title Storage provider account types for Solidity.\n * @author Collective DAO\n */\nlibrary StorageProviderTypes {\n\tstruct StorageProvider {\n\t\tbool active;\n\t\tbool onboarded;\n\t\taddress targetPool;\n\t\tuint64 minerId; // Miner worker address\n\t\tint64 lastEpoch; // Max time period for accessing FIL from liquid staking\n\t}\n\n\tstruct SPAllocation {\n\t\tuint256 allocationLimit; // FIL allocation\n\t\tuint256 repayment; // FIL repayment amount\n\t\tuint256 usedAllocation; // Used allocation in pledges\n\t\tuint256 dailyAllocation; // Daily FIL allocation for SP\n\t\tuint256 accruedRewards; // Storage Provider delivered rewards\n\t\tuint256 repaidPledge; // Storage Provider repaid initial pledge\n\t}\n\n\tstruct SPRestaking {\n\t\tuint256 restakingRatio; // Percentage of FIL rewards that is going to be restaked into liquid staking pool\n\t\taddress restakingAddress;\n\t}\n\n\tstruct AllocationRequest {\n\t\tuint256 allocationLimit;\n\t\tuint256 dailyAllocation;\n\t}\n}\n"
    },
    "lib/buffer/contracts/Buffer.sol": {
      "content": "// SPDX-License-Identifier: BSD-2-Clause\npragma solidity ^0.8.4;\n\n/**\n* @dev A library for working with mutable byte buffers in Solidity.\n*\n* Byte buffers are mutable and expandable, and provide a variety of primitives\n* for appending to them. At any time you can fetch a bytes object containing the\n* current contents of the buffer. The bytes object should not be stored between\n* operations, as it may change due to resizing of the buffer.\n*/\nlibrary Buffer {\n    /**\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n    *      a capacity. The capacity may be longer than the current value, in\n    *      which case it can be extended without the need to allocate more memory.\n    */\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    /**\n    * @dev Initializes a buffer with an initial capacity.\n    * @param buf The buffer to initialize.\n    * @param capacity The number of bytes of space to allocate the buffer.\n    * @return The buffer, for chaining.\n    */\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\n        if (capacity % 32 != 0) {\n            capacity += 32 - (capacity % 32);\n        }\n        // Allocate space for the buffer data\n        buf.capacity = capacity;\n        assembly {\n            let ptr := mload(0x40)\n            mstore(buf, ptr)\n            mstore(ptr, 0)\n            let fpm := add(32, add(ptr, capacity))\n            if lt(fpm, ptr) {\n                revert(0, 0)\n            }\n            mstore(0x40, fpm)\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Initializes a new buffer from an existing bytes object.\n    *      Changes to the buffer may mutate the original value.\n    * @param b The bytes object to initialize the buffer with.\n    * @return A new buffer.\n    */\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\n        buffer memory buf;\n        buf.buf = b;\n        buf.capacity = b.length;\n        return buf;\n    }\n\n    function resize(buffer memory buf, uint capacity) private pure {\n        bytes memory oldbuf = buf.buf;\n        init(buf, capacity);\n        append(buf, oldbuf);\n    }\n\n    /**\n    * @dev Sets buffer length to 0.\n    * @param buf The buffer to truncate.\n    * @return The original buffer, for chaining..\n    */\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\n        assembly {\n            let bufptr := mload(buf)\n            mstore(bufptr, 0)\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @param len The number of bytes to copy.\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\n        require(len <= data.length);\n\n        uint off = buf.buf.length;\n        uint newCapacity = off + len;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        uint dest;\n        uint src;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Start address = buffer address + offset + sizeof(buffer length)\n            dest := add(add(bufptr, 32), off)\n            // Update buffer length if we're extending it\n            if gt(newCapacity, buflen) {\n                mstore(bufptr, newCapacity)\n            }\n            src := add(data, 32)\n        }\n\n        // Copy word-length chunks while possible\n        for (; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        unchecked {\n            uint mask = (256 ** (32 - len)) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask))\n                let destpart := and(mload(dest), mask)\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n\n        return buf;\n    }\n\n    /**\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\n        return append(buf, data, data.length);\n    }\n\n    /**\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n    *      capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint offPlusOne = off + 1;\n        if (off >= buf.capacity) {\n            resize(buf, offPlusOne * 2);\n        }\n\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Address = buffer address + sizeof(buffer length) + off\n            let dest := add(add(bufptr, off), 32)\n            mstore8(dest, data)\n            // Update buffer length if we extended it\n            if gt(offPlusOne, mload(bufptr)) {\n                mstore(bufptr, offPlusOne)\n            }\n        }\n\n        return buf;\n    }\n\n    /**\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\n    *      exceed the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @param len The number of bytes to write (left-aligned).\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint newCapacity = len + off;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        unchecked {\n            uint mask = (256 ** len) - 1;\n            // Right-align data\n            data = data >> (8 * (32 - len));\n            assembly {\n                // Memory address of the buffer data\n                let bufptr := mload(buf)\n                // Address = buffer address + sizeof(buffer length) + newCapacity\n                let dest := add(bufptr, newCapacity)\n                mstore(dest, or(and(mload(dest), not(mask)), data))\n                // Update buffer length if we extended it\n                if gt(newCapacity, mload(bufptr)) {\n                    mstore(bufptr, newCapacity)\n                }\n            }\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chhaining.\n    */\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\n        return append(buf, bytes32(data), 20);\n    }\n\n    /**\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\n        return append(buf, data, 32);\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     *      exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @param len The number of bytes to write (right-aligned).\n     * @return The original buffer.\n     */\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint newCapacity = len + off;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        uint mask = (256 ** len) - 1;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Address = buffer address + sizeof(buffer length) + newCapacity\n            let dest := add(bufptr, newCapacity)\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n            // Update buffer length if we extended it\n            if gt(newCapacity, mload(bufptr)) {\n                mstore(bufptr, newCapacity)\n            }\n        }\n        return buf;\n    }\n}\n"
    },
    "lib/ERC4626/src/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.10;\n\nimport {ERC20} from \"lib/solmate/src/tokens/ERC20.sol\";\n\n/// @title ERC4626 interface\n/// See: https://eips.ethereum.org/EIPS/eip-4626\nabstract contract IERC4626 is ERC20 {\n    /*////////////////////////////////////////////////////////\n                      Events\n    ////////////////////////////////////////////////////////*/\n\n    /// @notice `sender` has exchanged `assets` for `shares`,\n    /// and transferred those `shares` to `receiver`.\n    event Deposit(address indexed sender, address indexed receiver, uint256 assets, uint256 shares);\n\n    /// @notice `sender` has exchanged `shares` for `assets`,\n    /// and transferred those `assets` to `receiver`.\n    event Withdraw(address indexed sender, address indexed receiver, uint256 assets, uint256 shares);\n\n    /*////////////////////////////////////////////////////////\n                      Vault properties\n    ////////////////////////////////////////////////////////*/\n\n    /// @notice The address of the underlying ERC20 token used for\n    /// the Vault for accounting, depositing, and withdrawing.\n    function asset() external view virtual returns (address asset);\n\n    /// @notice Total amount of the underlying asset that\n    /// is \"managed\" by Vault.\n    function totalAssets() external view virtual returns (uint256 totalAssets);\n\n    /*////////////////////////////////////////////////////////\n                      Deposit/Withdrawal Logic\n    ////////////////////////////////////////////////////////*/\n\n    /// @notice Mints `shares` Vault shares to `receiver` by\n    /// depositing exactly `assets` of underlying tokens.\n    function deposit(uint256 assets, address receiver) external virtual returns (uint256 shares);\n\n    /// @notice Mints exactly `shares` Vault shares to `receiver`\n    /// by depositing `assets` of underlying tokens.\n    function mint(uint256 shares, address receiver) external virtual returns (uint256 assets);\n\n    /// @notice Redeems `shares` from `owner` and sends `assets`\n    /// of underlying tokens to `receiver`.\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) external virtual returns (uint256 shares);\n\n    /// @notice Redeems `shares` from `owner` and sends `assets`\n    /// of underlying tokens to `receiver`.\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) external virtual returns (uint256 assets);\n\n    /*////////////////////////////////////////////////////////\n                      Vault Accounting Logic\n    ////////////////////////////////////////////////////////*/\n\n    /// @notice The amount of shares that the vault would\n    /// exchange for the amount of assets provided, in an\n    /// ideal scenario where all the conditions are met.\n    function convertToShares(uint256 assets) external view virtual returns (uint256 shares);\n\n    /// @notice The amount of assets that the vault would\n    /// exchange for the amount of shares provided, in an\n    /// ideal scenario where all the conditions are met.\n    function convertToAssets(uint256 shares) external view virtual returns (uint256 assets);\n\n    /// @notice Total number of underlying assets that can\n    /// be deposited by `owner` into the Vault, where `owner`\n    /// corresponds to the input parameter `receiver` of a\n    /// `deposit` call.\n    function maxDeposit(address owner) external view virtual returns (uint256 maxAssets);\n\n    /// @notice Allows an on-chain or off-chain user to simulate\n    /// the effects of their deposit at the current block, given\n    /// current on-chain conditions.\n    function previewDeposit(uint256 assets) external view virtual returns (uint256 shares);\n\n    /// @notice Total number of underlying shares that can be minted\n    /// for `owner`, where `owner` corresponds to the input\n    /// parameter `receiver` of a `mint` call.\n    function maxMint(address owner) external view virtual returns (uint256 maxShares);\n\n    /// @notice Allows an on-chain or off-chain user to simulate\n    /// the effects of their mint at the current block, given\n    /// current on-chain conditions.\n    function previewMint(uint256 shares) external view virtual returns (uint256 assets);\n\n    /// @notice Total number of underlying assets that can be\n    /// withdrawn from the Vault by `owner`, where `owner`\n    /// corresponds to the input parameter of a `withdraw` call.\n    function maxWithdraw(address owner) external view virtual returns (uint256 maxAssets);\n\n    /// @notice Allows an on-chain or off-chain user to simulate\n    /// the effects of their withdrawal at the current block,\n    /// given current on-chain conditions.\n    function previewWithdraw(uint256 assets) external view virtual returns (uint256 shares);\n\n    /// @notice Total number of underlying shares that can be\n    /// redeemed from the Vault by `owner`, where `owner` corresponds\n    /// to the input parameter of a `redeem` call.\n    function maxRedeem(address owner) external view virtual returns (uint256 maxShares);\n\n    /// @notice Allows an on-chain or off-chain user to simulate\n    /// the effects of their redeemption at the current block,\n    /// given current on-chain conditions.\n    function previewRedeem(uint256 shares) external view virtual returns (uint256 assets);\n}\n"
    },
    "lib/fevmate/contracts/utils/FilAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @author fevmate (https://github.com/wadealexc/fevmate)\n * @notice Utility functions for converting between id and\n * eth addresses. Helps implement address normalization.\n *\n * See README for more details about how to use this when\n * developing for the FEVM.\n */\nlibrary FilAddress {\n    \n    // Custom errors\n    error CallFailed();\n    error InvalidAddress();\n    error InsufficientFunds();\n\n    // Builtin Actor addresses (singletons)\n    address constant SYSTEM_ACTOR = 0xfF00000000000000000000000000000000000000;\n    address constant INIT_ACTOR = 0xff00000000000000000000000000000000000001;\n    address constant REWARD_ACTOR = 0xff00000000000000000000000000000000000002;\n    address constant CRON_ACTOR = 0xFF00000000000000000000000000000000000003;\n    address constant POWER_ACTOR = 0xFf00000000000000000000000000000000000004;\n    address constant MARKET_ACTOR = 0xff00000000000000000000000000000000000005;\n    address constant VERIFIED_REGISTRY_ACTOR = 0xFF00000000000000000000000000000000000006;\n    address constant DATACAP_TOKEN_ACTOR = 0xfF00000000000000000000000000000000000007;\n    address constant EAM_ACTOR = 0xfF0000000000000000000000000000000000000a;\n\n    // FEVM precompile addresses\n    address constant RESOLVE_ADDRESS = 0xFE00000000000000000000000000000000000001;\n    address constant LOOKUP_DELEGATED_ADDRESS = 0xfE00000000000000000000000000000000000002;\n    address constant CALL_ACTOR = 0xfe00000000000000000000000000000000000003;\n    // address constant GET_ACTOR_TYPE = 0xFe00000000000000000000000000000000000004; // (deprecated)\n    address constant CALL_ACTOR_BY_ID = 0xfe00000000000000000000000000000000000005;\n\n    // An ID address with id == 0. It's also equivalent to the system actor address\n    // This is useful for bitwise operations\n    address constant ZERO_ID_ADDRESS = SYSTEM_ACTOR;\n    \n    /**\n     * @notice Convert ID to Eth address. Returns input if conversion fails.\n     *\n     * Attempt to convert address _a from an ID address to an Eth address\n     * If _a is NOT an ID address, this returns _a\n     * If _a does NOT have a corresponding Eth address, this returns _a\n     * \n     * NOTE: It is possible this returns an ID address! If you want a method\n     *       that will NEVER return an ID address, see mustNormalize below.\n     */\n    function normalize(address _a) internal view returns (address) {\n        // First, check if we have an ID address. If we don't, return as-is\n        (bool isID, uint64 id) = isIDAddress(_a);\n        if (!isID) {\n            return _a;\n        }\n\n        // We have an ID address -- attempt the conversion\n        // If there is no corresponding Eth address, return _a\n        (bool success, address eth) = getEthAddress(id);\n        if (!success) {\n            return _a;\n        } else {\n            return eth;\n        }\n    }\n\n    /**\n     * @notice Convert ID to Eth address. Reverts if conversion fails.\n     *\n     * Attempt to convert address _a from an ID address to an Eth address\n     * If _a is NOT an ID address, this returns _a unchanged\n     * If _a does NOT have a corresponding Eth address, this method reverts\n     *\n     * This method can be used when you want a guarantee that an ID address is not\n     * returned. Note, though, that rejecting ID addresses may mean you don't support\n     * other Filecoin-native actors.\n     */\n    function mustNormalize(address _a) internal view returns (address) {\n        // First, check if we have an ID address. If we don't, return as-is\n        (bool isID, uint64 id) = isIDAddress(_a);\n        if (!isID) {\n            return _a;\n        }\n\n        // We have an ID address -- attempt the conversion\n        // If there is no corresponding Eth address, revert\n        (bool success, address eth) = getEthAddress(id);\n        if (!success) revert InvalidAddress();\n        return eth;\n    }\n\n    // Used to clear the last 8 bytes of an address    (addr & U64_MASK)\n    address constant U64_MASK = 0xFffFfFffffFfFFffffFFFffF0000000000000000;\n    // Used to retrieve the last 8 bytes of an address (addr & MAX_U64)\n    address constant MAX_U64 = 0x000000000000000000000000fFFFFFffFFFFfffF;\n\n    /**\n     * @notice Checks whether _a matches the ID address format.\n     * If it does, returns true and the id\n     * \n     * The ID address format is:\n     * 0xFF | bytes11(0) | uint64(id)\n     */\n    function isIDAddress(address _a) internal pure returns (bool isID, uint64 id) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Zeroes out the last 8 bytes of _a\n            let a_mask := and(_a, U64_MASK)\n\n            // If the result is equal to the ZERO_ID_ADDRESS,\n            // _a is an ID address.\n            if eq(a_mask, ZERO_ID_ADDRESS) {\n                isID := true\n                id := and(_a, MAX_U64)\n            }\n        }\n    }\n\n    /**\n     * @notice Given an Actor ID, converts it to an EVM-compatible address.\n     * \n     * If _id has a corresponding Eth address, we return that\n     * Otherwise, _id is returned as a 20-byte ID address\n     */\n    function toAddress(uint64 _id) internal view returns (address) {\n        (bool success, address eth) = getEthAddress(_id);\n        if (success) {\n            return eth;\n        } else {\n            return toIDAddress(_id);\n        }\n    }\n\n    /**\n     * @notice Given an Actor ID, converts it to a 20-byte ID address\n     * \n     * Note that this method does NOT check if the _id has a corresponding\n     * Eth address. If you want that, try toAddress above.\n     */\n    function toIDAddress(uint64 _id) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly { addr := or(ZERO_ID_ADDRESS, _id) }\n    }\n\n    // An address with all bits set. Used to clean higher-order bits\n    address constant ADDRESS_MASK = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\n\n    /**\n     * @notice Convert ID to Eth address by querying the lookup_delegated_address\n     * precompile.\n     *\n     * If the actor ID corresponds to an Eth address, this will return (true, addr)\n     * If the actor ID does NOT correspond to an Eth address, this will return (false, 0)\n     * \n     * --- About ---\n     * \n     * The lookup_delegated_address precompile retrieves the actor state corresponding\n     * to the id. If the actor has a delegated address, it is returned using fil\n     * address encoding (see below).\n     *\n     * f4, or delegated addresses, have a namespace as well as a subaddress that can\n     * be up to 54 bytes long. This is to support future address formats. Currently,\n     * though, the f4 format is only used to support Eth addresses.\n     *\n     * Consequently, the only addresses lookup_delegated_address should return have:\n     * - Prefix:     \"f4\" address      - 1 byte   - (0x04)\n     * - Namespace:  EAM actor id 10   - 1 byte   - (0x0A)\n     * - Subaddress: EVM-style address - 20 bytes - (EVM address)\n     * \n     * This method checks that the precompile output exactly matches this format:\n     * 22 bytes, starting with 0x040A.\n     * \n     * If we get anything else, we return (false, 0x00).\n     */\n    function getEthAddress(uint64 _id) internal view returns (bool success, address eth) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Call LOOKUP_DELEGATED_ADDRESS precompile\n            //\n            // Input: uint64 id, in standard EVM format (left-padded to 32 bytes)\n            //\n            // Output: LOOKUP_DELEGATED_ADDRESS returns an f4-encoded address. \n            // For Eth addresses, the format is a 20-byte address, prefixed with\n            // 0x040A. So, we expect exactly 22 bytes of returndata.\n            // \n            // Since we want to read an address from the returndata, we place the\n            // output at memory offset 10, which means the address is already\n            // word-aligned (10 + 22 == 32)\n            //\n            // NOTE: success and returndatasize checked at the end of the function\n            mstore(0, _id)\n            success := staticcall(gas(), LOOKUP_DELEGATED_ADDRESS, 0, 32, 10, 22)\n\n            // Read result. LOOKUP_DELEGATED_ADDRESS returns raw, unpadded\n            // bytes. Assuming we succeeded, we can extract the eth address\n            // by reading from offset 0 and cleaning any higher-order bits:\n            let result := mload(0)\n            eth := and(ADDRESS_MASK, result)\n\n            // Check that the returned address has the expected prefix. The\n            // prefix is the first 2 bytes of returndata, located at memory \n            // offset 10. \n            // \n            // To isolate it, shift right by the # of bits in an address (160),\n            // and clean all but the last 2 bytes.\n            let prefix := and(0xFFFF, shr(160, result))\n            if iszero(eq(prefix, 0x040A)) {\n                success := false\n                eth := 0\n            }\n        }\n        // Checking these here because internal functions don't have\n        // a good way to return from inline assembly.\n        //\n        // But, it's very important we do check these. If the output\n        // wasn't exactly what we expected, we assume there's no eth\n        // address and return (false, 0).\n        if (!success || returnDataSize() != 22) {\n            return (false, address(0));\n        }\n    }\n\n    /**\n     * @notice Convert Eth address to ID by querying the resolve_address precompile.\n     *\n     * If the passed-in address is already in ID form, returns (true, id)\n     * If the Eth address has no corresponding ID address, returns (false, 0)\n     * Otherwise, the lookup succeeds and this returns (true, id)\n     * \n     * --- About ---\n     *\n     * The resolve_address precompile can resolve any fil-encoded address to its\n     * corresponding actor ID, if there is one. This means resolve_address handles\n     * all address protocols: f0, f1, f2, f3, and f4. \n     * \n     * An address might not have an actor ID if it does not exist in state yet. A \n     * typical example of this is a public-key-type address, which can exist even \n     * if it hasn't been used on-chain yet.\n     *\n     * This method is only meant to look up ids for Eth addresses, so it contains\n     * very specific logic to correctly encode an Eth address into its f4 format.\n     * \n     * Note: This is essentially just the reverse of getEthAddress above, so check\n     * the comments there for more details on f4 encoding.\n     */\n    function getActorID(address _eth) internal view returns (bool success, uint64 id) {\n        // First - if we already have an ID address, we can just return that\n        (success, id) = isIDAddress(_eth);\n        if (success) {\n            return (success, id);\n        }\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Convert Eth address to f4 format: 22 bytes, with prefix 0x040A.\n            // (see getEthAddress above for more details on this format)\n            //\n            // We're going to pass the 22 bytes to the precompile without any\n            // padding or length, so everything will be left-aligned. Since \n            // addresses are right-aligned, we need to shift everything left:\n            // - 0x040A prefix - shifted left 240 bits (30 bytes * 8 bits)\n            // - Eth address   - shifted left 80 bits  (10 bytes * 8 bits)\n            let input := or(\n                shl(240, 0x040A),\n                shl(80, _eth)\n            )\n            // Call RESOLVE_ADDRESS precompile\n            //\n            // Input: Eth address in f4 format. 22 bytes, no padding or length\n            //\n            // Output: RESOLVE_ADDRESS returns a uint64 actor ID in standard EVM\n            // format (left-padded to 32 bytes).\n            // \n            // NOTE: success and returndatasize checked at the end of the function\n            mstore(0, input)\n            success := staticcall(gas(), RESOLVE_ADDRESS, 0, 22, 0, 32)\n\n            // Read result and clean higher-order bits, just in case.\n            // If successful, this will be the actor id.\n            id := and(MAX_U64, mload(0))\n        }\n        // Checking these here because internal functions don't have\n        // a good way to return from inline assembly.\n        //\n        // But, it's very important we do check these. If the output\n        // wasn't exactly what we expected, we assume there's no ID\n        // address and return (false, 0).\n        if (!success || returnDataSize() != 32) {\n            return (false, 0);\n        }\n    }\n\n    /**\n     * @notice Replacement for Solidity's address.send and address.transfer\n     * This sends _amount to _recipient, forwarding all available gas and\n     * reverting if there are any errors.\n     *\n     * If _recpient is an Eth address, this works the way you'd\n     * expect the EVM to work.\n     *\n     * If _recpient is an ID address, this works if:\n     * 1. The ID corresponds to an Eth EOA address      (EthAccount actor)\n     * 2. The ID corresponds to an Eth contract address (EVM actor)\n     * 3. The ID corresponds to a BLS/SECPK address     (Account actor)\n     *\n     * If _recpient is some other Filecoin-native actor, this will revert.\n     */\n    function sendValue(address payable _recipient, uint _amount) internal {\n        if (address(this).balance < _amount) revert InsufficientFunds();\n\n        (bool success, ) = _recipient.call{value: _amount}(\"\");\n        if (!success) revert CallFailed();\n    }\n\n    function returnDataSize() private pure returns (uint size) {\n        /// @solidity memory-safe-assembly\n        assembly { size := returndatasize() }\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/cbor/BigIntCbor.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"../types/CommonTypes.sol\";\n\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for BigInt type\n/// @author Zondax AG\nlibrary BigIntCBOR {\n    /// @notice serialize BigInt instance to bytes\n    /// @param num BigInt instance to serialize\n    /// @return serialized BigInt as bytes\n    function serializeBigInt(CommonTypes.BigInt memory num) internal pure returns (bytes memory) {\n        bytes memory raw = new bytes(num.val.length + 1);\n\n        raw[0] = num.neg == true ? bytes1(0x01) : bytes1(0x00);\n\n        uint index = 1;\n        for (uint i = 0; i < num.val.length; i++) {\n            raw[index] = num.val[i];\n            index++;\n        }\n\n        return raw;\n    }\n\n    /// @notice deserialize big int (encoded as bytes) to BigInt instance\n    /// @param raw as bytes to parse\n    /// @return parsed BigInt instance\n    function deserializeBigInt(bytes memory raw) internal pure returns (CommonTypes.BigInt memory) {\n        if (raw.length == 0) {\n            return CommonTypes.BigInt(hex\"00\", false);\n        }\n\n        bytes memory val = new bytes(raw.length - 1);\n        bool neg = false;\n\n        if (raw[0] == 0x01) {\n            neg = true;\n        }\n\n        for (uint i = 1; i < raw.length; i++) {\n            val[i - 1] = raw[i];\n        }\n\n        return CommonTypes.BigInt(val, neg);\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/cbor/BytesCbor.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"lib/solidity-cborutils/contracts/CBOR.sol\";\n\nimport \"../utils/CborDecode.sol\";\nimport \"../utils/Misc.sol\";\n\nimport \"../types/CommonTypes.sol\";\n\nimport \"./BigIntCbor.sol\";\n\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for bytes\n/// @author Zondax AG\nlibrary BytesCBOR {\n    using CBOR for CBOR.CBORBuffer;\n    using CBORDecoder for bytes;\n    using BigIntCBOR for bytes;\n\n    /// @notice serialize raw bytes as cbor bytes string encoded\n    /// @param data raw data in bytes\n    /// @return encoded cbor bytes\n    function serializeBytes(bytes memory data) internal pure returns (bytes memory) {\n        uint256 capacity = Misc.getBytesSize(data);\n\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.writeBytes(data);\n\n        return buf.data();\n    }\n\n    /// @notice serialize raw address (in bytes) as cbor bytes string encoded (how an address is passed to filecoin actors)\n    /// @param addr raw address in bytes\n    /// @return encoded address as cbor bytes\n    function serializeAddress(bytes memory addr) internal pure returns (bytes memory) {\n        return serializeBytes(addr);\n    }\n\n    /// @notice encoded null value as cbor\n    /// @return cbor encoded null\n    function serializeNull() internal pure returns (bytes memory) {\n        CBOR.CBORBuffer memory buf = CBOR.create(1);\n\n        buf.writeNull();\n\n        return buf.data();\n    }\n\n    /// @notice deserialize cbor encoded filecoin address to bytes\n    /// @param ret cbor encoded filecoin address\n    /// @return raw bytes representing a filecoin address\n    function deserializeAddress(bytes memory ret) internal pure returns (bytes memory) {\n        bytes memory addr;\n        uint byteIdx = 0;\n\n        (addr, byteIdx) = ret.readBytes(byteIdx);\n\n        return addr;\n    }\n\n    /// @notice deserialize cbor encoded string\n    /// @param ret cbor encoded string (in bytes)\n    /// @return decoded string\n    function deserializeString(bytes memory ret) internal pure returns (string memory) {\n        string memory response;\n        uint byteIdx = 0;\n\n        (response, byteIdx) = ret.readString(byteIdx);\n\n        return response;\n    }\n\n    /// @notice deserialize cbor encoded bool\n    /// @param ret cbor encoded bool (in bytes)\n    /// @return decoded bool\n    function deserializeBool(bytes memory ret) internal pure returns (bool) {\n        bool response;\n        uint byteIdx = 0;\n\n        (response, byteIdx) = ret.readBool(byteIdx);\n\n        return response;\n    }\n\n    /// @notice deserialize cbor encoded BigInt\n    /// @param ret cbor encoded BigInt (in bytes)\n    /// @return decoded BigInt\n    /// @dev BigInts are cbor encoded as bytes string first. That is why it unwraps the cbor encoded bytes first, and then parse the result into BigInt\n    function deserializeBytesBigInt(bytes memory ret) internal pure returns (CommonTypes.BigInt memory) {\n        bytes memory tmp;\n        uint byteIdx = 0;\n\n        if (ret.length > 0) {\n            (tmp, byteIdx) = ret.readBytes(byteIdx);\n            if (tmp.length > 0) {\n                return tmp.deserializeBigInt();\n            }\n        }\n\n        return CommonTypes.BigInt(new bytes(0), false);\n    }\n\n    /// @notice deserialize cbor encoded uint64\n    /// @param rawResp cbor encoded uint64 (in bytes)\n    /// @return decoded uint64\n    function deserializeUint64(bytes memory rawResp) internal pure returns (uint64) {\n        uint byteIdx = 0;\n        uint64 value;\n\n        (value, byteIdx) = rawResp.readUInt64(byteIdx);\n        return value;\n    }\n\n    /// @notice deserialize cbor encoded int64\n    /// @param rawResp cbor encoded int64 (in bytes)\n    /// @return decoded int64\n    function deserializeInt64(bytes memory rawResp) internal pure returns (int64) {\n        uint byteIdx = 0;\n        int64 value;\n\n        (value, byteIdx) = rawResp.readInt64(byteIdx);\n        return value;\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/cbor/FilecoinCbor.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"lib/solidity-cborutils/contracts/CBOR.sol\";\nimport \"lib/buffer/contracts/Buffer.sol\";\n\nimport \"../utils/CborDecode.sol\";\nimport \"../utils/Misc.sol\";\n\nimport \"../types/CommonTypes.sol\";\n\nimport \"../cbor/BigIntCbor.sol\";\n\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for general data types on the filecoin network.\n/// @author Zondax AG\nlibrary FilecoinCBOR {\n    using Buffer for Buffer.buffer;\n    using CBOR for CBOR.CBORBuffer;\n    using CBORDecoder for *;\n    using BigIntCBOR for *;\n\n    uint8 private constant MAJOR_TYPE_TAG = 6;\n    uint8 private constant TAG_TYPE_CID_CODE = 42;\n    uint8 private constant PAYLOAD_LEN_8_BITS = 24;\n\n    /// @notice Write a CID into a CBOR buffer.\n    /// @dev The CBOR major will be 6 (type 'tag') and the tag type value is 42, as per CBOR tag assignments.\n    /// @dev https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml\n    /// @param buf buffer containing the actual CBOR serialization process\n    /// @param value CID value to serialize as CBOR\n    function writeCid(CBOR.CBORBuffer memory buf, bytes memory value) internal pure {\n        buf.buf.appendUint8(uint8(((MAJOR_TYPE_TAG << 5) | PAYLOAD_LEN_8_BITS)));\n        buf.buf.appendUint8(TAG_TYPE_CID_CODE);\n        // See https://ipld.io/specs/codecs/dag-cbor/spec/#links for explanation on 0x00 prefix.\n        buf.writeBytes(bytes.concat(hex'00', value));\n    }\n\n    function readCid(bytes memory cborData, uint byteIdx) internal pure returns (CommonTypes.Cid memory, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = cborData.parseCborHeader(byteIdx);\n        require(maj == MAJOR_TYPE_TAG, \"expected major type tag when parsing cid\");\n        require(value == TAG_TYPE_CID_CODE, \"expected tag 42 when parsing cid\");\n\n        bytes memory raw;\n        (raw, byteIdx) = cborData.readBytes(byteIdx);\n        require(raw[0] == 0x00, \"expected first byte to be 0 when parsing cid\");\n\n        // Pop off the first byte, which corresponds to the historical multibase 0x00 byte.\n        // https://ipld.io/specs/codecs/dag-cbor/spec/#links\n        CommonTypes.Cid memory ret;\n        ret.data = new bytes(raw.length - 1);\n        for (uint256 i = 1; i < raw.length; i++) {\n            ret.data[i-1] = raw[i];\n        }\n\n        return (ret, byteIdx);\n    }\n\n    /// @notice serialize filecoin address to cbor encoded\n    /// @param addr filecoin address to serialize\n    /// @return cbor serialized data as bytes\n    function serializeAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\n        uint256 capacity = Misc.getBytesSize(addr.data);\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.writeBytes(addr.data);\n\n        return buf.data();\n    }\n\n    /// @notice serialize a BigInt value wrapped in a cbor fixed array.\n    /// @param value BigInt to serialize as cbor inside an\n    /// @return cbor serialized data as bytes\n    function serializeArrayBigInt(CommonTypes.BigInt memory value) internal pure returns (bytes memory) {\n        uint256 capacity = 0;\n        bytes memory valueBigInt = value.serializeBigInt();\n\n        capacity += Misc.getPrefixSize(1);\n        capacity += Misc.getBytesSize(valueBigInt);\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.startFixedArray(1);\n        buf.writeBytes(value.serializeBigInt());\n\n        return buf.data();\n    }\n\n    /// @notice serialize a FilAddress value wrapped in a cbor fixed array.\n    /// @param addr FilAddress to serialize as cbor inside an\n    /// @return cbor serialized data as bytes\n    function serializeArrayFilAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\n        uint256 capacity = 0;\n\n        capacity += Misc.getPrefixSize(1);\n        capacity += Misc.getBytesSize(addr.data);\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.startFixedArray(1);\n        buf.writeBytes(addr.data);\n\n        return buf.data();\n    }\n\n    /// @notice deserialize a FilAddress wrapped on a cbor fixed array coming from a actor call\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of FilAddress created based on parsed data\n    function deserializeArrayFilAddress(bytes memory rawResp) internal pure returns (CommonTypes.FilAddress memory ret) {\n        uint byteIdx = 0;\n        uint len;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        require(len == 1, \"Wrong numbers of parameters (should find 1)\");\n\n        (ret.data, byteIdx) = rawResp.readBytes(byteIdx);\n\n        return ret;\n    }\n\n    /// @notice deserialize a BigInt wrapped on a cbor fixed array coming from a actor call\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of BigInt created based on parsed data\n    function deserializeArrayBigInt(bytes memory rawResp) internal pure returns (CommonTypes.BigInt memory) {\n        uint byteIdx = 0;\n        uint len;\n        bytes memory tmp;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 1);\n\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\n        return tmp.deserializeBigInt();\n    }\n\n    /// @notice serialize UniversalReceiverParams struct to cbor in order to pass as arguments to an actor\n    /// @param params UniversalReceiverParams to serialize as cbor\n    /// @return cbor serialized data as bytes\n    function serializeUniversalReceiverParams(CommonTypes.UniversalReceiverParams memory params) internal pure returns (bytes memory) {\n        uint256 capacity = 0;\n\n        capacity += Misc.getPrefixSize(2);\n        capacity += Misc.getPrefixSize(params.type_);\n        capacity += Misc.getBytesSize(params.payload);\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.startFixedArray(2);\n        buf.writeUInt64(params.type_);\n        buf.writeBytes(params.payload);\n\n        return buf.data();\n    }\n\n    /// @notice deserialize UniversalReceiverParams cbor to struct when receiving a message\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of UniversalReceiverParams created based on parsed data\n    function deserializeUniversalReceiverParams(bytes memory rawResp) internal pure returns (CommonTypes.UniversalReceiverParams memory ret) {\n        uint byteIdx = 0;\n        uint len;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        require(len == 2, \"Wrong numbers of parameters (should find 2)\");\n\n        (ret.type_, byteIdx) = rawResp.readUInt32(byteIdx);\n        (ret.payload, byteIdx) = rawResp.readBytes(byteIdx);\n    }\n\n    /// @notice attempt to read a FilActorId value\n    /// @param rawResp cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return a FilActorId decoded from input bytes and the byte index after moving past the value\n    function readFilActorId(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.FilActorId, uint) {\n        uint64 tmp = 0;\n\n        (tmp, byteIdx) = rawResp.readUInt64(byteIdx);\n        return (CommonTypes.FilActorId.wrap(tmp), byteIdx);\n    }\n\n    /// @notice write FilActorId into a cbor buffer\n    /// @dev FilActorId is just wrapping a uint64\n    /// @param buf buffer containing the actual cbor serialization process\n    /// @param id FilActorId to serialize as cbor\n    function writeFilActorId(CBOR.CBORBuffer memory buf, CommonTypes.FilActorId id) internal pure {\n        buf.writeUInt64(CommonTypes.FilActorId.unwrap(id));\n    }\n\n    /// @notice attempt to read a ChainEpoch value\n    /// @param rawResp cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return a ChainEpoch decoded from input bytes and the byte index after moving past the value\n    function readChainEpoch(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.ChainEpoch, uint) {\n        int64 tmp = 0;\n\n        (tmp, byteIdx) = rawResp.readInt64(byteIdx);\n        return (CommonTypes.ChainEpoch.wrap(tmp), byteIdx);\n    }\n\n    /// @notice write ChainEpoch into a cbor buffer\n    /// @dev ChainEpoch is just wrapping a int64\n    /// @param buf buffer containing the actual cbor serialization process\n    /// @param id ChainEpoch to serialize as cbor\n    function writeChainEpoch(CBOR.CBORBuffer memory buf, CommonTypes.ChainEpoch id) internal pure {\n        buf.writeInt64(CommonTypes.ChainEpoch.unwrap(id));\n    }\n\n    /// @notice write DealLabel into a cbor buffer\n    /// @param buf buffer containing the actual cbor serialization process\n    /// @param label DealLabel to serialize as cbor\n    function writeDealLabel(CBOR.CBORBuffer memory buf, CommonTypes.DealLabel memory label) internal pure {\n        label.isString ? buf.writeString(string(label.data)) : buf.writeBytes(label.data);\n    }\n\n    /// @notice deserialize DealLabel cbor to struct when receiving a message\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of DealLabel created based on parsed data\n    function deserializeDealLabel(bytes memory rawResp) internal pure returns (CommonTypes.DealLabel memory) {\n        uint byteIdx = 0;\n        CommonTypes.DealLabel memory label;\n\n        (label, byteIdx) = readDealLabel(rawResp, byteIdx);\n        return label;\n    }\n\n    /// @notice attempt to read a DealLabel value\n    /// @param rawResp cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return a DealLabel decoded from input bytes and the byte index after moving past the value\n    function readDealLabel(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.DealLabel memory, uint) {\n        uint8 maj;\n        uint len;\n\n        (maj, len, byteIdx) = CBORDecoder.parseCborHeader(rawResp, byteIdx);\n        require(maj == MajByteString || maj == MajTextString, \"invalid maj (expected MajByteString or MajTextString)\");\n\n        uint max_len = byteIdx + len;\n        bytes memory slice = new bytes(len);\n        uint slice_index = 0;\n        for (uint256 i = byteIdx; i < max_len; i++) {\n            slice[slice_index] = rawResp[i];\n            slice_index++;\n        }\n\n        return (CommonTypes.DealLabel(slice, maj == MajTextString), byteIdx + len);\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/cbor/MinerCbor.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"lib/solidity-cborutils/contracts/CBOR.sol\";\n\nimport \"./BigIntCbor.sol\";\nimport \"./FilecoinCbor.sol\";\n\nimport \"../types/MinerTypes.sol\";\nimport \"../types/CommonTypes.sol\";\n\nimport \"../utils/CborDecode.sol\";\nimport \"../utils/Misc.sol\";\n\n/// @title This library is a set of functions meant to handle CBOR parameters serialization and return values deserialization for Miner actor exported methods.\n/// @author Zondax AG\nlibrary MinerCBOR {\n    using CBOR for CBOR.CBORBuffer;\n    using CBORDecoder for bytes;\n    using BigIntCBOR for *;\n    using FilecoinCBOR for *;\n\n    /// @notice serialize ChangeBeneficiaryParams struct to cbor in order to pass as arguments to the miner actor\n    /// @param params ChangeBeneficiaryParams to serialize as cbor\n    /// @return cbor serialized data as bytes\n    function serializeChangeBeneficiaryParams(MinerTypes.ChangeBeneficiaryParams memory params) internal pure returns (bytes memory) {\n        uint256 capacity = 0;\n        bytes memory new_quota = params.new_quota.serializeBigInt();\n\n        capacity += Misc.getPrefixSize(3);\n        capacity += Misc.getBytesSize(params.new_beneficiary.data);\n        capacity += Misc.getBytesSize(new_quota);\n        capacity += Misc.getChainEpochSize(params.new_expiration);\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.startFixedArray(3);\n        buf.writeBytes(params.new_beneficiary.data);\n        buf.writeBytes(new_quota);\n        buf.writeChainEpoch(params.new_expiration);\n\n        return buf.data();\n    }\n\n    /// @notice deserialize GetOwnerReturn struct from cbor encoded bytes coming from a miner actor call\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of GetOwnerReturn created based on parsed data\n    function deserializeGetOwnerReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetOwnerReturn memory ret) {\n        uint byteIdx = 0;\n        uint len;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 2);\n\n        (ret.owner.data, byteIdx) = rawResp.readBytes(byteIdx);\n\n        if (!rawResp.isNullNext(byteIdx)) {\n            (ret.proposed.data, byteIdx) = rawResp.readBytes(byteIdx);\n        } else {\n            ret.proposed.data = new bytes(0);\n        }\n\n        return ret;\n    }\n\n    /// @notice deserialize GetBeneficiaryReturn struct from cbor encoded bytes coming from a miner actor call\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of GetBeneficiaryReturn created based on parsed data\n    function deserializeGetBeneficiaryReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetBeneficiaryReturn memory ret) {\n        bytes memory tmp;\n        uint byteIdx = 0;\n        uint len;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 2);\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 2);\n\n        (ret.active.beneficiary.data, byteIdx) = rawResp.readBytes(byteIdx);\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 3);\n\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\n        if (tmp.length > 0) {\n            ret.active.term.quota = tmp.deserializeBigInt();\n        } else {\n            ret.active.term.quota = CommonTypes.BigInt(new bytes(0), false);\n        }\n\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\n        if (tmp.length > 0) {\n            ret.active.term.used_quota = tmp.deserializeBigInt();\n        } else {\n            ret.active.term.used_quota = CommonTypes.BigInt(new bytes(0), false);\n        }\n\n        (ret.active.term.expiration, byteIdx) = rawResp.readChainEpoch(byteIdx);\n\n        if (!rawResp.isNullNext(byteIdx)) {\n            (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n            assert(len == 5);\n\n            (ret.proposed.new_beneficiary.data, byteIdx) = rawResp.readBytes(byteIdx);\n\n            (tmp, byteIdx) = rawResp.readBytes(byteIdx);\n            if (tmp.length > 0) {\n                ret.proposed.new_quota = tmp.deserializeBigInt();\n            } else {\n                ret.proposed.new_quota = CommonTypes.BigInt(new bytes(0), false);\n            }\n\n            (ret.proposed.new_expiration, byteIdx) = rawResp.readChainEpoch(byteIdx);\n            (ret.proposed.approved_by_beneficiary, byteIdx) = rawResp.readBool(byteIdx);\n            (ret.proposed.approved_by_nominee, byteIdx) = rawResp.readBool(byteIdx);\n        }\n\n        return ret;\n    }\n\n    /// @notice deserialize GetVestingFundsReturn struct from cbor encoded bytes coming from a miner actor call\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of GetVestingFundsReturn created based on parsed data\n    function deserializeGetVestingFundsReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetVestingFundsReturn memory ret) {\n        CommonTypes.ChainEpoch epoch;\n        CommonTypes.BigInt memory amount;\n        bytes memory tmp;\n\n        uint byteIdx = 0;\n        uint len;\n        uint leni;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 1);\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        ret.vesting_funds = new MinerTypes.VestingFunds[](len);\n\n        for (uint i = 0; i < len; i++) {\n            (leni, byteIdx) = rawResp.readFixedArray(byteIdx);\n            assert(leni == 2);\n\n            (epoch, byteIdx) = rawResp.readChainEpoch(byteIdx);\n            (tmp, byteIdx) = rawResp.readBytes(byteIdx);\n\n            amount = tmp.deserializeBigInt();\n            ret.vesting_funds[i] = MinerTypes.VestingFunds(epoch, amount);\n        }\n\n        return ret;\n    }\n\n    /// @notice serialize ChangeWorkerAddressParams struct to cbor in order to pass as arguments to the miner actor\n    /// @param params ChangeWorkerAddressParams to serialize as cbor\n    /// @return cbor serialized data as bytes\n    function serializeChangeWorkerAddressParams(MinerTypes.ChangeWorkerAddressParams memory params) internal pure returns (bytes memory) {\n        uint256 capacity = 0;\n\n        capacity += Misc.getPrefixSize(2);\n        capacity += Misc.getBytesSize(params.new_worker.data);\n        capacity += Misc.getPrefixSize(uint256(params.new_control_addresses.length));\n        for (uint64 i = 0; i < params.new_control_addresses.length; i++) {\n            capacity += Misc.getBytesSize(params.new_control_addresses[i].data);\n        }\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.startFixedArray(2);\n        buf.writeBytes(params.new_worker.data);\n        buf.startFixedArray(uint64(params.new_control_addresses.length));\n\n        for (uint64 i = 0; i < params.new_control_addresses.length; i++) {\n            buf.writeBytes(params.new_control_addresses[i].data);\n        }\n\n        return buf.data();\n    }\n\n    /// @notice serialize ChangeMultiaddrsParams struct to cbor in order to pass as arguments to the miner actor\n    /// @param params ChangeMultiaddrsParams to serialize as cbor\n    /// @return cbor serialized data as bytes\n    function serializeChangeMultiaddrsParams(MinerTypes.ChangeMultiaddrsParams memory params) internal pure returns (bytes memory) {\n        uint256 capacity = 0;\n\n        capacity += Misc.getPrefixSize(1);\n        capacity += Misc.getPrefixSize(uint256(params.new_multi_addrs.length));\n        for (uint64 i = 0; i < params.new_multi_addrs.length; i++) {\n            capacity += Misc.getBytesSize(params.new_multi_addrs[i].data);\n        }\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\n\n        buf.startFixedArray(1);\n        buf.startFixedArray(uint64(params.new_multi_addrs.length));\n\n        for (uint64 i = 0; i < params.new_multi_addrs.length; i++) {\n            buf.writeBytes(params.new_multi_addrs[i].data);\n        }\n\n        return buf.data();\n    }\n\n    /// @notice deserialize GetMultiaddrsReturn struct from cbor encoded bytes coming from a miner actor call\n    /// @param rawResp cbor encoded response\n    /// @return ret new instance of GetMultiaddrsReturn created based on parsed data\n    function deserializeGetMultiaddrsReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetMultiaddrsReturn memory ret) {\n        uint byteIdx = 0;\n        uint len;\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        assert(len == 1);\n\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\n        ret.multi_addrs = new CommonTypes.FilAddress[](len);\n\n        for (uint i = 0; i < len; i++) {\n            (ret.multi_addrs[i].data, byteIdx) = rawResp.readBytes(byteIdx);\n        }\n\n        return ret;\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/MinerAPI.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"./types/MinerTypes.sol\";\nimport \"./types/CommonTypes.sol\";\nimport \"./cbor/MinerCbor.sol\";\nimport \"./cbor/FilecoinCbor.sol\";\nimport \"./cbor/BytesCbor.sol\";\nimport \"./utils/Misc.sol\";\nimport \"./utils/Actor.sol\";\n\n/// @title This library is a proxy to a built-in Miner actor. Calling one of its methods will result in a cross-actor call being performed.\n/// @notice During miner initialization, a miner actor is created on the chain, and this actor gives the miner its ID f0.... The miner actor is in charge of collecting all the payments sent to the miner.\n/// @dev For more info about the miner actor, please refer to https://lotus.filecoin.io/storage-providers/operate/addresses/\n/// @author Zondax AG\nlibrary MinerAPI {\n    using MinerCBOR for *;\n    using FilecoinCBOR for *;\n    using BytesCBOR for bytes;\n\n    /// @notice Income and returned collateral are paid to this address\n    /// @notice This address is also allowed to change the worker address for the miner\n    /// @param target The miner actor id you want to interact with\n    /// @return the owner address of a Miner\n    function getOwner(CommonTypes.FilActorId target) internal returns (MinerTypes.GetOwnerReturn memory) {\n        bytes memory raw_request = new bytes(0);\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetOwnerMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\n\n        return result.deserializeGetOwnerReturn();\n    }\n\n    /// @param target  The miner actor id you want to interact with\n    /// @param addr New owner address\n    /// @notice Proposes or confirms a change of owner address.\n    /// @notice If invoked by the current owner, proposes a new owner address for confirmation. If the proposed address is the current owner address, revokes any existing proposal that proposed address.\n    function changeOwnerAddress(CommonTypes.FilActorId target, CommonTypes.FilAddress memory addr) internal {\n        bytes memory raw_request = addr.serializeAddress();\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangeOwnerAddressMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n    }\n\n    /// @param target  The miner actor id you want to interact with\n    /// @param addr The \"controlling\" addresses are the Owner, the Worker, and all Control Addresses.\n    /// @return Whether the provided address is \"controlling\".\n    function isControllingAddress(CommonTypes.FilActorId target, CommonTypes.FilAddress memory addr) internal returns (bool) {\n        bytes memory raw_request = addr.serializeAddress();\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.IsControllingAddressMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\n\n        return result.deserializeBool();\n    }\n\n    /// @return the miner's sector size.\n    /// @param target The miner actor id you want to interact with\n    /// @dev For more information about sector sizes, please refer to https://spec.filecoin.io/systems/filecoin_mining/sector/#section-systems.filecoin_mining.sector\n    function getSectorSize(CommonTypes.FilActorId target) internal returns (uint64) {\n        bytes memory raw_request = new bytes(0);\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetSectorSizeMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\n\n        return result.deserializeUint64();\n    }\n\n    /// @param target The miner actor id you want to interact with\n    /// @notice This is calculated as actor balance - (vesting funds + pre-commit deposit + initial pledge requirement + fee debt)\n    /// @notice Can go negative if the miner is in IP debt.\n    /// @return the available balance of this miner.\n    function getAvailableBalance(CommonTypes.FilActorId target) internal returns (CommonTypes.BigInt memory) {\n        bytes memory raw_request = new bytes(0);\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetAvailableBalanceMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\n\n        return result.deserializeBytesBigInt();\n    }\n\n    /// @param target The miner actor id you want to interact with\n    /// @return the funds vesting in this miner as a list of (vesting_epoch, vesting_amount) tuples.\n    function getVestingFunds(CommonTypes.FilActorId target) internal returns (MinerTypes.GetVestingFundsReturn memory) {\n        bytes memory raw_request = new bytes(0);\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetVestingFundsMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\n\n        return result.deserializeGetVestingFundsReturn();\n    }\n\n    /// @param target The miner actor id you want to interact with\n    /// @notice Proposes or confirms a change of beneficiary address.\n    /// @notice A proposal must be submitted by the owner, and takes effect after approval of both the proposed beneficiary and current beneficiary, if applicable, any current beneficiary that has time and quota remaining.\n    /// @notice See FIP-0029, https://github.com/filecoin-project/FIPs/blob/master/FIPS/fip-0029.md\n    function changeBeneficiary(CommonTypes.FilActorId target, MinerTypes.ChangeBeneficiaryParams memory params) internal {\n        bytes memory raw_request = params.serializeChangeBeneficiaryParams();\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangeBeneficiaryMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n    }\n\n    /// @param target The miner actor id you want to interact with\n    /// @notice This method is for use by other actors (such as those acting as beneficiaries), and to abstract the state representation for clients.\n    /// @notice Retrieves the currently active and proposed beneficiary information.\n    function getBeneficiary(CommonTypes.FilActorId target) internal returns (MinerTypes.GetBeneficiaryReturn memory) {\n        bytes memory raw_request = new bytes(0);\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetBeneficiaryMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\n\n        return result.deserializeGetBeneficiaryReturn();\n    }\n\n    /// @param target The miner actor id you want to interact with\n    function changeWorkerAddress(CommonTypes.FilActorId target, MinerTypes.ChangeWorkerAddressParams memory params) internal {\n        bytes memory raw_request = params.serializeChangeWorkerAddressParams();\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangeWorkerAddressMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n    }\n\n    /// @param target The miner actor id you want to interact with\n    function changePeerId(CommonTypes.FilActorId target, CommonTypes.FilAddress memory newId) internal {\n        bytes memory raw_request = newId.serializeArrayFilAddress();\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangePeerIDMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n    }\n\n    /// @param target The miner actor id you want to interact with\n    function changeMultiaddresses(CommonTypes.FilActorId target, MinerTypes.ChangeMultiaddrsParams memory params) internal {\n        bytes memory raw_request = params.serializeChangeMultiaddrsParams();\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangeMultiaddrsMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n    }\n\n    /// @param target The miner actor id you want to interact with\n    function repayDebt(CommonTypes.FilActorId target) internal {\n        bytes memory raw_request = new bytes(0);\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.RepayDebtMethodNum, Misc.NONE_CODEC, raw_request, 0, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n    }\n\n    /// @param target The miner actor id you want to interact with\n    function confirmChangeWorkerAddress(CommonTypes.FilActorId target) internal {\n        bytes memory raw_request = new bytes(0);\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ConfirmChangeWorkerAddressMethodNum, Misc.NONE_CODEC, raw_request, 0, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n    }\n\n    /// @param target The miner actor id you want to interact with\n    function getPeerId(CommonTypes.FilActorId target) internal returns (CommonTypes.FilAddress memory) {\n        bytes memory raw_request = new bytes(0);\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetPeerIDMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\n\n        return result.deserializeArrayFilAddress();\n    }\n\n    /// @param target The miner actor id you want to interact with\n    function getMultiaddresses(CommonTypes.FilActorId target) internal returns (MinerTypes.GetMultiaddrsReturn memory) {\n        bytes memory raw_request = new bytes(0);\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetMultiaddrsMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\n\n        return result.deserializeGetMultiaddrsReturn();\n    }\n\n    /// @param target The miner actor id you want to interact with\n    /// @param amount the amount you want to withdraw\n    function withdrawBalance(CommonTypes.FilActorId target, CommonTypes.BigInt memory amount) internal returns (CommonTypes.BigInt memory) {\n        bytes memory raw_request = amount.serializeArrayBigInt();\n\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.WithdrawBalanceMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\n\n        return result.deserializeBytesBigInt();\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/PrecompilesAPI.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./types/CommonTypes.sol\";\n\n/// @title This library simplify the call of FEVM precompiles contracts.\n/// @author Zondax AG\nlibrary PrecompilesAPI {\n    address constant RESOLVE_ADDRESS_PRECOMPILE_ADDR = 0xFE00000000000000000000000000000000000001;\n    address constant LOOKUP_DELEGATED_ADDRESS_PRECOMPILE_ADDR = 0xfE00000000000000000000000000000000000002;\n\n    /// @notice an error happened trying to call the actor\n    error FailToCallActor();\n\n    /// @notice get the actor id from an actor address\n    /// @param addr actor address you want to get id from (in bytes format, not string)\n    /// @return the actor id\n    function resolveAddress(CommonTypes.FilAddress memory addr) internal view returns (uint64) {\n        (bool success, bytes memory raw_response) = address(RESOLVE_ADDRESS_PRECOMPILE_ADDR).staticcall(addr.data);\n        if (!success) {\n            revert FailToCallActor();\n        }\n\n        uint256 actor_id = abi.decode(raw_response, (uint256));\n\n        return uint64(actor_id);\n    }\n\n    /// @notice get the actor id from an eth address\n    /// @param addr eth address you want to get id from (in bytes format)\n    /// @return the actor id\n    function resolveEthAddress(address addr) internal view returns (uint64) {\n        bytes memory delegatedAddr = abi.encodePacked(hex\"040a\", addr);\n\n        (bool success, bytes memory raw_response) = address(RESOLVE_ADDRESS_PRECOMPILE_ADDR).staticcall(delegatedAddr);\n        if (!success) {\n            revert FailToCallActor();\n        }\n\n        uint256 actor_id = abi.decode(raw_response, (uint256));\n\n        return uint64(actor_id);\n    }\n\n    /// @notice get the actor delegated address (f4) from an actor id\n    /// @param actor_id actor id you want to get the delegated address (f4) from\n    /// @return delegated address in bytes format (not string)\n    function lookupDelegatedAddress(uint64 actor_id) internal view returns (bytes memory) {\n        (bool success, bytes memory raw_response) = address(LOOKUP_DELEGATED_ADDRESS_PRECOMPILE_ADDR).staticcall(abi.encodePacked(uint256(actor_id)));\n        if (!success) {\n            revert FailToCallActor();\n        }\n\n        return raw_response;\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/SendAPI.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"./utils/Misc.sol\";\nimport \"./utils/Actor.sol\";\nimport \"./types/CommonTypes.sol\";\n\n/// @title This library is helper method to send funds to some specific address. Calling one of its methods will result in a cross-actor call being performed.\n/// @author Zondax AG\nlibrary SendAPI {\n    /// @notice send token to a specific actor\n    /// @param target The id address (uint64) you want to send funds to\n    /// @param value tokens to be transferred to the receiver\n    function send(CommonTypes.FilActorId target, uint256 value) internal {\n        bytes memory result = Actor.callByID(target, 0, Misc.NONE_CODEC, new bytes(0), value, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n    }\n\n    /// @notice send token to a specific actor\n    /// @param target The address you want to send funds to\n    /// @param value tokens to be transferred to the receiver\n    function send(CommonTypes.FilAddress memory target, uint256 value) internal {\n        bytes memory result = Actor.callByAddress(target.data, 0, Misc.NONE_CODEC, new bytes(0), value, false);\n        if (result.length != 0) {\n            revert Actor.InvalidResponseLength();\n        }\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/types/CommonTypes.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\n\n/// @title Filecoin actors' common types for Solidity.\n/// @author Zondax AG\nlibrary CommonTypes {\n    uint constant UniversalReceiverHookMethodNum = 3726118371;\n\n    /// @param idx index for the failure in batch\n    /// @param code failure code\n    struct FailCode {\n        uint32 idx;\n        uint32 code;\n    }\n\n    /// @param success_count total successes in batch\n    /// @param fail_codes list of failures code and index for each failure in batch\n    struct BatchReturn {\n        uint32 success_count;\n        FailCode[] fail_codes;\n    }\n\n    /// @param type_ asset type\n    /// @param payload payload corresponding to asset type\n    struct UniversalReceiverParams {\n        uint32 type_;\n        bytes payload;\n    }\n\n    /// @param val contains the actual arbitrary number written as binary\n    /// @param neg indicates if val is negative or not\n    struct BigInt {\n        bytes val;\n        bool neg;\n    }\n\n    /// @param data filecoin address in bytes format\n    struct FilAddress {\n        bytes data;\n    }\n\n    /// @param data cid in bytes format\n    struct Cid {\n        bytes data;\n    }\n\n    /// @param data deal proposal label in bytes format (it can be utf8 string or arbitrary bytes string).\n    /// @param isString indicates if the data is string or raw bytes\n    struct DealLabel {\n        bytes data;\n        bool isString;\n    }\n\n    type FilActorId is uint64;\n\n    type ChainEpoch is int64;\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/types/MinerTypes.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"../cbor/BigIntCbor.sol\";\nimport \"./CommonTypes.sol\";\n\n/// @title Filecoin miner actor types for Solidity.\n/// @author Zondax AG\nlibrary MinerTypes {\n    uint constant GetOwnerMethodNum = 3275365574;\n    uint constant ChangeOwnerAddressMethodNum = 1010589339;\n    uint constant IsControllingAddressMethodNum = 348244887;\n    uint constant GetSectorSizeMethodNum = 3858292296;\n    uint constant GetAvailableBalanceMethodNum = 4026106874;\n    uint constant GetVestingFundsMethodNum = 1726876304;\n    uint constant ChangeBeneficiaryMethodNum = 1570634796;\n    uint constant GetBeneficiaryMethodNum = 4158972569;\n    uint constant ChangeWorkerAddressMethodNum = 3302309124;\n    uint constant ChangePeerIDMethodNum = 1236548004;\n    uint constant ChangeMultiaddrsMethodNum = 1063480576;\n    uint constant RepayDebtMethodNum = 3665352697;\n    uint constant ConfirmChangeWorkerAddressMethodNum = 2354970453;\n    uint constant GetPeerIDMethodNum = 2812875329;\n    uint constant GetMultiaddrsMethodNum = 1332909407;\n    uint constant WithdrawBalanceMethodNum = 2280458852;\n\n    /// @param owner owner address.\n    /// @param proposed owner address.\n    struct GetOwnerReturn {\n        CommonTypes.FilAddress owner;\n        CommonTypes.FilAddress proposed;\n    }\n\n    /// @param vesting_funds funds\n    struct GetVestingFundsReturn {\n        VestingFunds[] vesting_funds;\n    }\n\n    /// @param new_beneficiary the new beneficiary address.\n    /// @param new_quota the new quota token amount.\n    /// @param new_expiration the epoch that the new quota will be expired.\n    struct ChangeBeneficiaryParams {\n        CommonTypes.FilAddress new_beneficiary;\n        CommonTypes.BigInt new_quota;\n        CommonTypes.ChainEpoch new_expiration;\n    }\n\n    /// @param active current active beneficiary.\n    /// @param proposed the proposed and pending beneficiary.\n    struct GetBeneficiaryReturn {\n        ActiveBeneficiary active;\n        PendingBeneficiaryChange proposed;\n    }\n\n    /// @param new_worker the new worker address.\n    /// @param new_control_addresses the new controller addresses.\n    struct ChangeWorkerAddressParams {\n        CommonTypes.FilAddress new_worker;\n        CommonTypes.FilAddress[] new_control_addresses;\n    }\n\n    /// @param new_multi_addrs the new multi-signature address.\n    struct ChangeMultiaddrsParams {\n        CommonTypes.FilAddress[] new_multi_addrs;\n    }\n\n    /// @param multi_addrs the multi-signature address.\n    struct GetMultiaddrsReturn {\n        CommonTypes.FilAddress[] multi_addrs;\n    }\n\n    /// @param epoch the epoch of funds vested.\n    /// @param amount the amount of funds vested.\n    struct VestingFunds {\n        CommonTypes.ChainEpoch epoch;\n        CommonTypes.BigInt amount;\n    }\n\n    /// @param quota the quota token amount.\n    /// @param used_quota the used quota token amount.\n    /// @param expiration the epoch that the quota will be expired.\n    struct BeneficiaryTerm {\n        CommonTypes.BigInt quota;\n        CommonTypes.BigInt used_quota;\n        CommonTypes.ChainEpoch expiration;\n    }\n\n    /// @param beneficiary the address of the beneficiary.\n    /// @param term BeneficiaryTerm\n    struct ActiveBeneficiary {\n        CommonTypes.FilAddress beneficiary;\n        BeneficiaryTerm term;\n    }\n\n    /// @param new_beneficiary the new beneficiary address.\n    /// @param new_quota the new quota token amount.\n    /// @param new_expiration the epoch that the new quota will be expired.\n    /// @param approved_by_beneficiary if this proposal is approved by beneficiary or not.\n    /// @param approved_by_nominee if this proposal is approved by nominee or not.\n    struct PendingBeneficiaryChange {\n        CommonTypes.FilAddress new_beneficiary;\n        CommonTypes.BigInt new_quota;\n        CommonTypes.ChainEpoch new_expiration;\n        bool approved_by_beneficiary;\n        bool approved_by_nominee;\n    }\n\n    enum SectorSize {\n        _2KiB,\n        _8MiB,\n        _512MiB,\n        _32GiB,\n        _64GiB\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/utils/Actor.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"./Misc.sol\";\nimport \"../types/CommonTypes.sol\";\n\n/// @title Call actors utilities library, meant to interact with Filecoin builtin actors\n/// @author Zondax AG\nlibrary Actor {\n    /// @notice precompile address for the call_actor precompile\n    address constant CALL_ACTOR_ADDRESS = 0xfe00000000000000000000000000000000000003;\n\n    /// @notice precompile address for the call_actor_id precompile\n    address constant CALL_ACTOR_ID = 0xfe00000000000000000000000000000000000005;\n\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a static_call to the desired actor\n    uint64 constant READ_ONLY_FLAG = 0x00000001;\n\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a call to the desired actor\n    uint64 constant DEFAULT_FLAG = 0x00000000;\n\n    /// @notice the provided address is not valid\n    error InvalidAddress(bytes addr);\n\n    /// @notice the smart contract has no enough balance to transfer\n    error NotEnoughBalance(uint256 balance, uint256 value);\n\n    /// @notice the provided actor id is not valid\n    error InvalidActorID(CommonTypes.FilActorId actorId);\n\n    /// @notice an error happened trying to call the actor\n    error FailToCallActor();\n\n    /// @notice the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\n    error InvalidResponseLength();\n\n    /// @notice the codec received is not valid\n    error InvalidCodec(uint64);\n\n    /// @notice the called actor returned an error as part of its expected behaviour\n    error ActorError(int256 errorCode);\n\n    /// @notice the actor is not found\n    error ActorNotFound();\n\n    /// @notice allows to interact with an specific actor by its address (bytes format)\n    /// @param actor_address actor address (bytes format) to interact with\n    /// @param method_num id of the method from the actor to call\n    /// @param codec how the request data passed as argument is encoded\n    /// @param raw_request encoded arguments to be passed in the call\n    /// @param value tokens to be transferred to the called actor\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\n    function callByAddress(\n        bytes memory actor_address,\n        uint256 method_num,\n        uint64 codec,\n        bytes memory raw_request,\n        uint256 value,\n        bool static_call\n    ) internal returns (bytes memory) {\n        if (actor_address.length < 2) {\n            revert InvalidAddress(actor_address);\n        }\n\n        validatePrecompileCall(CALL_ACTOR_ADDRESS, value);\n\n        // We have to delegate-call the call-actor precompile because the call-actor precompile will\n        // call the target actor on our behalf. This will _not_ delegate to the target `actor_address`.\n        //\n        // Specifically:\n        //\n        // - `static_call == false`: `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(CALL)-> actor_address\n        // - `static_call == true`:  `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(STATICCALL)-> actor_address\n        (bool success, bytes memory data) = address(CALL_ACTOR_ADDRESS).delegatecall(\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, actor_address)\n        );\n        if (!success) {\n            revert FailToCallActor();\n        }\n\n        return readRespData(data);\n    }\n\n    /// @notice allows to interact with an specific actor by its id (uint64)\n    /// @param target actor id (uint64) to interact with\n    /// @param method_num id of the method from the actor to call\n    /// @param codec how the request data passed as argument is encoded\n    /// @param raw_request encoded arguments to be passed in the call\n    /// @param value tokens to be transferred to the called actor\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\n    function callByID(\n        CommonTypes.FilActorId target,\n        uint256 method_num,\n        uint64 codec,\n        bytes memory raw_request,\n        uint256 value,\n        bool static_call\n    ) internal returns (bytes memory) {\n        validatePrecompileCall(CALL_ACTOR_ID, value);\n\n        (bool success, bytes memory data) = address(CALL_ACTOR_ID).delegatecall(\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, target)\n        );\n        if (!success) {\n            revert FailToCallActor();\n        }\n\n        return readRespData(data);\n    }\n\n    /// @notice allows to run some generic validations before calling the precompile actor\n    /// @param addr precompile actor address to run check to\n    /// @param value tokens to be transferred to the called actor\n    function validatePrecompileCall(address addr, uint256 value) internal view {\n        uint balance = address(this).balance;\n        if (balance < value) {\n            revert NotEnoughBalance(balance, value);\n        }\n\n        bool actorExists = Misc.addressExists(addr);\n        if (!actorExists) {\n            revert ActorNotFound();\n        }\n    }\n\n    /// @notice allows to interact with an non-singleton actors by its id (uint64)\n    /// @param target actor id (uint64) to interact with\n    /// @param method_num id of the method from the actor to call\n    /// @param codec how the request data passed as argument is encoded\n    /// @param raw_request encoded arguments to be passed in the call\n    /// @param value tokens to be transfered to the called actor\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\n    function callNonSingletonByID(\n        CommonTypes.FilActorId target,\n        uint256 method_num,\n        uint64 codec,\n        bytes memory raw_request,\n        uint256 value,\n        bool static_call\n    ) internal returns (bytes memory) {\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\n            revert InvalidActorID(target);\n        }\n\n        return callByID(target, method_num, codec, raw_request, value, static_call);\n    }\n\n    /// @notice parse the response an actor returned\n    /// @notice it will validate the return code (success) and the codec (valid one)\n    /// @param raw_response raw data (bytes) the actor returned\n    /// @return the actual raw data (payload, in bytes) to be parsed according to the actor and method called\n    function readRespData(bytes memory raw_response) internal pure returns (bytes memory) {\n        (int256 exit, uint64 return_codec, bytes memory return_value) = abi.decode(raw_response, (int256, uint64, bytes));\n\n        if (return_codec == Misc.NONE_CODEC) {\n            if (return_value.length != 0) {\n                revert InvalidResponseLength();\n            }\n        } else if (return_codec == Misc.CBOR_CODEC || return_codec == Misc.DAG_CBOR_CODEC) {\n            if (return_value.length == 0) {\n                revert InvalidResponseLength();\n            }\n        } else {\n            revert InvalidCodec(return_codec);\n        }\n\n        if (exit != 0) {\n            revert ActorError(exit);\n        }\n\n        return return_value;\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/utils/BigInts.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"lib/solidity-BigNumber/src/BigNumbers.sol\";\n\nimport \"../types/CommonTypes.sol\";\nimport \"../utils/Misc.sol\";\n\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\n/// @author Zondax AG\nlibrary BigInts {\n    uint256 constant MAX_UINT = (2 ** 256) - 1;\n    uint256 constant MAX_INT = ((2 ** 256) / 2) - 1;\n\n    error NegativeValueNotAllowed();\n\n    /// @notice allow to get a BigInt from a uint256 value\n    /// @param value uint256 number\n    /// @return new BigInt\n    function fromUint256(uint256 value) internal view returns (CommonTypes.BigInt memory) {\n        BigNumber memory bigNum = BigNumbers.init(value, false);\n        return CommonTypes.BigInt(bigNum.val, bigNum.neg);\n    }\n\n    /// @notice allow to get a BigInt from a int256 value\n    /// @param value int256 number\n    /// @return new BigInt\n    function fromInt256(int256 value) internal view returns (CommonTypes.BigInt memory) {\n        uint256 valueAbs = Misc.abs(value);\n        BigNumber memory bigNum = BigNumbers.init(valueAbs, value < 0);\n        return CommonTypes.BigInt(bigNum.val, bigNum.neg);\n    }\n\n    /// @notice allow to get a uint256 from a BigInt value.\n    /// @notice If the value is negative, it will generate an error.\n    /// @param value BigInt number\n    /// @return a uint256 value and flog that indicates whether it was possible to convert or not (the value overflows uint256 type)\n    function toUint256(CommonTypes.BigInt memory value) internal view returns (uint256, bool) {\n        if (value.neg) {\n            revert NegativeValueNotAllowed();\n        }\n\n        BigNumber memory max = BigNumbers.init(MAX_UINT, false);\n        BigNumber memory bigNumValue = BigNumbers.init(value.val, value.neg);\n        if (BigNumbers.gt(bigNumValue, max)) {\n            return (0, true);\n        }\n\n        return (uint256(bytes32(bigNumValue.val)), false);\n    }\n\n    /// @notice allow to get a int256 from a BigInt value.\n    /// @notice If the value is grater than what a int256 can store, it will generate an error.\n    /// @param value BigInt number\n    /// @return a int256 value and flog that indicates whether it was possible to convert or not (the value overflows int256 type)\n    function toInt256(CommonTypes.BigInt memory value) internal view returns (int256, bool) {\n        BigNumber memory max = BigNumbers.init(MAX_INT, false);\n        BigNumber memory bigNumValue = BigNumbers.init(value.val, false);\n        if (BigNumbers.gt(bigNumValue, max)) {\n            return (0, true);\n        }\n\n        int256 parsedValue = int256(uint256(bytes32(bigNumValue.val)));\n        return (value.neg ? -1 * parsedValue : parsedValue, false);\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/utils/CborDecode.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\n// \tMajUnsignedInt = 0\n// \tMajSignedInt   = 1\n// \tMajByteString  = 2\n// \tMajTextString  = 3\n// \tMajArray       = 4\n// \tMajMap         = 5\n// \tMajTag         = 6\n// \tMajOther       = 7\n\nuint8 constant MajUnsignedInt = 0;\nuint8 constant MajSignedInt = 1;\nuint8 constant MajByteString = 2;\nuint8 constant MajTextString = 3;\nuint8 constant MajArray = 4;\nuint8 constant MajMap = 5;\nuint8 constant MajTag = 6;\nuint8 constant MajOther = 7;\n\nuint8 constant TagTypeBigNum = 2;\nuint8 constant TagTypeNegativeBigNum = 3;\n\nuint8 constant True_Type = 21;\nuint8 constant False_Type = 20;\n\n/// @notice This library is a set a functions that allows anyone to decode cbor encoded bytes\n/// @dev methods in this library try to read the data type indicated from cbor encoded data stored in bytes at a specific index\n/// @dev if it successes, methods will return the read value and the new index (intial index plus read bytes)\n/// @author Zondax AG\nlibrary CBORDecoder {\n    /// @notice check if next value on the cbor encoded data is null\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    function isNullNext(bytes memory cborData, uint byteIdx) internal pure returns (bool) {\n        return cborData[byteIdx] == hex\"f6\";\n    }\n\n    /// @notice attempt to read a bool value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return a bool decoded from input bytes and the byte index after moving past the value\n    function readBool(bytes memory cborData, uint byteIdx) internal pure returns (bool, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajOther, \"invalid maj (expected MajOther)\");\n        assert(value == True_Type || value == False_Type);\n\n        return (value != False_Type, byteIdx);\n    }\n\n    /// @notice attempt to read the length of a fixed array\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return length of the fixed array decoded from input bytes and the byte index after moving past the value\n    function readFixedArray(bytes memory cborData, uint byteIdx) internal pure returns (uint, uint) {\n        uint8 maj;\n        uint len;\n\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajArray, \"invalid maj (expected MajArray)\");\n\n        return (len, byteIdx);\n    }\n\n    /// @notice attempt to read an arbitrary length string value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return arbitrary length string decoded from input bytes and the byte index after moving past the value\n    function readString(bytes memory cborData, uint byteIdx) internal pure returns (string memory, uint) {\n        uint8 maj;\n        uint len;\n\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajTextString, \"invalid maj (expected MajTextString)\");\n\n        uint max_len = byteIdx + len;\n        bytes memory slice = new bytes(len);\n        uint slice_index = 0;\n        for (uint256 i = byteIdx; i < max_len; i++) {\n            slice[slice_index] = cborData[i];\n            slice_index++;\n        }\n\n        return (string(slice), byteIdx + len);\n    }\n\n    /// @notice attempt to read an arbitrary byte string value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return arbitrary byte string decoded from input bytes and the byte index after moving past the value\n    function readBytes(bytes memory cborData, uint byteIdx) internal pure returns (bytes memory, uint) {\n        uint8 maj;\n        uint len;\n\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajTag || maj == MajByteString, \"invalid maj (expected MajTag or MajByteString)\");\n\n        if (maj == MajTag) {\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n            assert(maj == MajByteString);\n        }\n\n        uint max_len = byteIdx + len;\n        bytes memory slice = new bytes(len);\n        uint slice_index = 0;\n        for (uint256 i = byteIdx; i < max_len; i++) {\n            slice[slice_index] = cborData[i];\n            slice_index++;\n        }\n\n        return (slice, byteIdx + len);\n    }\n\n    /// @notice attempt to read a bytes32 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return a bytes32 decoded from input bytes and the byte index after moving past the value\n    function readBytes32(bytes memory cborData, uint byteIdx) internal pure returns (bytes32, uint) {\n        uint8 maj;\n        uint len;\n\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajByteString, \"invalid maj (expected MajByteString)\");\n\n        uint max_len = byteIdx + len;\n        bytes memory slice = new bytes(32);\n        uint slice_index = 32 - len;\n        for (uint256 i = byteIdx; i < max_len; i++) {\n            slice[slice_index] = cborData[i];\n            slice_index++;\n        }\n\n        return (bytes32(slice), byteIdx + len);\n    }\n\n    /// @notice attempt to read a uint256 value encoded per cbor specification\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an uint256 decoded from input bytes and the byte index after moving past the value\n    function readUInt256(bytes memory cborData, uint byteIdx) internal pure returns (uint256, uint) {\n        uint8 maj;\n        uint256 value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajTag || maj == MajUnsignedInt, \"invalid maj (expected MajTag or MajUnsignedInt)\");\n\n        if (maj == MajTag) {\n            require(value == TagTypeBigNum, \"invalid tag (expected TagTypeBigNum)\");\n\n            uint len;\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n            require(maj == MajByteString, \"invalid maj (expected MajByteString)\");\n\n            require(cborData.length >= byteIdx + len, \"slicing out of range\");\n            assembly {\n                value := mload(add(cborData, add(len, byteIdx)))\n            }\n\n            return (value, byteIdx + len);\n        }\n\n        return (value, byteIdx);\n    }\n\n    /// @notice attempt to read a int256 value encoded per cbor specification\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an int256 decoded from input bytes and the byte index after moving past the value\n    function readInt256(bytes memory cborData, uint byteIdx) internal pure returns (int256, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajTag || maj == MajSignedInt, \"invalid maj (expected MajTag or MajSignedInt)\");\n\n        if (maj == MajTag) {\n            assert(value == TagTypeNegativeBigNum);\n\n            uint len;\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\n            require(maj == MajByteString, \"invalid maj (expected MajByteString)\");\n\n            require(cborData.length >= byteIdx + len, \"slicing out of range\");\n            assembly {\n                value := mload(add(cborData, add(len, byteIdx)))\n            }\n\n            return (int256(value), byteIdx + len);\n        }\n\n        return (int256(value), byteIdx);\n    }\n\n    /// @notice attempt to read a uint64 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an uint64 decoded from input bytes and the byte index after moving past the value\n    function readUInt64(bytes memory cborData, uint byteIdx) internal pure returns (uint64, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajUnsignedInt, \"invalid maj (expected MajUnsignedInt)\");\n\n        return (uint64(value), byteIdx);\n    }\n\n    /// @notice attempt to read a uint32 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an uint32 decoded from input bytes and the byte index after moving past the value\n    function readUInt32(bytes memory cborData, uint byteIdx) internal pure returns (uint32, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajUnsignedInt, \"invalid maj (expected MajUnsignedInt)\");\n\n        return (uint32(value), byteIdx);\n    }\n\n    /// @notice attempt to read a uint16 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an uint16 decoded from input bytes and the byte index after moving past the value\n    function readUInt16(bytes memory cborData, uint byteIdx) internal pure returns (uint16, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajUnsignedInt, \"invalid maj (expected MajUnsignedInt)\");\n\n        return (uint16(value), byteIdx);\n    }\n\n    /// @notice attempt to read a uint8 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an uint8 decoded from input bytes and the byte index after moving past the value\n    function readUInt8(bytes memory cborData, uint byteIdx) internal pure returns (uint8, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajUnsignedInt, \"invalid maj (expected MajUnsignedInt)\");\n\n        return (uint8(value), byteIdx);\n    }\n\n    /// @notice attempt to read a int64 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an int64 decoded from input bytes and the byte index after moving past the value\n    function readInt64(bytes memory cborData, uint byteIdx) internal pure returns (int64, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \"invalid maj (expected MajSignedInt or MajUnsignedInt)\");\n\n        return (int64(uint64(value)), byteIdx);\n    }\n\n    /// @notice attempt to read a int32 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an int32 decoded from input bytes and the byte index after moving past the value\n    function readInt32(bytes memory cborData, uint byteIdx) internal pure returns (int32, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \"invalid maj (expected MajSignedInt or MajUnsignedInt)\");\n\n        return (int32(uint32(value)), byteIdx);\n    }\n\n    /// @notice attempt to read a int16 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an int16 decoded from input bytes and the byte index after moving past the value\n    function readInt16(bytes memory cborData, uint byteIdx) internal pure returns (int16, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \"invalid maj (expected MajSignedInt or MajUnsignedInt)\");\n\n        return (int16(uint16(value)), byteIdx);\n    }\n\n    /// @notice attempt to read a int8 value\n    /// @param cborData cbor encoded bytes to parse from\n    /// @param byteIdx current position to read on the cbor encoded bytes\n    /// @return an int8 decoded from input bytes and the byte index after moving past the value\n    function readInt8(bytes memory cborData, uint byteIdx) internal pure returns (int8, uint) {\n        uint8 maj;\n        uint value;\n\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \"invalid maj (expected MajSignedInt or MajUnsignedInt)\");\n\n        return (int8(uint8(value)), byteIdx);\n    }\n\n    /// @notice slice uint8 from bytes starting at a given index\n    /// @param bs bytes to slice from\n    /// @param start current position to slice from bytes\n    /// @return uint8 sliced from bytes\n    function sliceUInt8(bytes memory bs, uint start) internal pure returns (uint8) {\n        require(bs.length >= start + 1, \"slicing out of range\");\n        return uint8(bs[start]);\n    }\n\n    /// @notice slice uint16 from bytes starting at a given index\n    /// @param bs bytes to slice from\n    /// @param start current position to slice from bytes\n    /// @return uint16 sliced from bytes\n    function sliceUInt16(bytes memory bs, uint start) internal pure returns (uint16) {\n        require(bs.length >= start + 2, \"slicing out of range\");\n        bytes2 x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n        return uint16(x);\n    }\n\n    /// @notice slice uint32 from bytes starting at a given index\n    /// @param bs bytes to slice from\n    /// @param start current position to slice from bytes\n    /// @return uint32 sliced from bytes\n    function sliceUInt32(bytes memory bs, uint start) internal pure returns (uint32) {\n        require(bs.length >= start + 4, \"slicing out of range\");\n        bytes4 x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n        return uint32(x);\n    }\n\n    /// @notice slice uint64 from bytes starting at a given index\n    /// @param bs bytes to slice from\n    /// @param start current position to slice from bytes\n    /// @return uint64 sliced from bytes\n    function sliceUInt64(bytes memory bs, uint start) internal pure returns (uint64) {\n        require(bs.length >= start + 8, \"slicing out of range\");\n        bytes8 x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n        return uint64(x);\n    }\n\n    /// @notice Parse cbor header for major type and extra info.\n    /// @param cbor cbor encoded bytes to parse from\n    /// @param byteIndex current position to read on the cbor encoded bytes\n    /// @return major type, extra info and the byte index after moving past header bytes\n    function parseCborHeader(bytes memory cbor, uint byteIndex) internal pure returns (uint8, uint64, uint) {\n        uint8 first = sliceUInt8(cbor, byteIndex);\n        byteIndex += 1;\n        uint8 maj = (first & 0xe0) >> 5;\n        uint8 low = first & 0x1f;\n        // We don't handle CBOR headers with extra > 27, i.e. no indefinite lengths\n        require(low < 28, \"cannot handle headers with extra > 27\");\n\n        // extra is lower bits\n        if (low < 24) {\n            return (maj, low, byteIndex);\n        }\n\n        // extra in next byte\n        if (low == 24) {\n            uint8 next = sliceUInt8(cbor, byteIndex);\n            byteIndex += 1;\n            require(next >= 24, \"invalid cbor\"); // otherwise this is invalid cbor\n            return (maj, next, byteIndex);\n        }\n\n        // extra in next 2 bytes\n        if (low == 25) {\n            uint16 extra16 = sliceUInt16(cbor, byteIndex);\n            byteIndex += 2;\n            return (maj, extra16, byteIndex);\n        }\n\n        // extra in next 4 bytes\n        if (low == 26) {\n            uint32 extra32 = sliceUInt32(cbor, byteIndex);\n            byteIndex += 4;\n            return (maj, extra32, byteIndex);\n        }\n\n        // extra in next 8 bytes\n        assert(low == 27);\n        uint64 extra64 = sliceUInt64(cbor, byteIndex);\n        byteIndex += 8;\n        return (maj, extra64, byteIndex);\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"../types/CommonTypes.sol\";\nimport \"../utils/Leb128.sol\";\nimport \"lib/buffer/contracts/Buffer.sol\";\n\n/// @notice This library is a set a functions that allows to handle filecoin addresses conversions and validations\n/// @author Zondax AG\nlibrary FilAddresses {\n    using Buffer for Buffer.buffer;\n\n    error InvalidAddress();\n\n    /// @notice allow to get a FilAddress from an eth address\n    /// @param addr eth address to convert\n    /// @return new filecoin address\n    function fromEthAddress(address addr) internal pure returns (CommonTypes.FilAddress memory) {\n        return CommonTypes.FilAddress(abi.encodePacked(hex\"040a\", addr));\n    }\n\n    /// @notice allow to create a Filecoin address from an actorID\n    /// @param actorID uint64 actorID\n    /// @return address filecoin address\n    function fromActorID(uint64 actorID) internal pure returns (CommonTypes.FilAddress memory) {\n        Buffer.buffer memory result = Leb128.encodeUnsignedLeb128FromUInt64(actorID);\n        return CommonTypes.FilAddress(abi.encodePacked(hex\"00\", result.buf));\n    }\n\n    /// @notice allow to create a Filecoin address from bytes\n    /// @param data address in bytes format\n    /// @return filecoin address\n    function fromBytes(bytes memory data) internal pure returns (CommonTypes.FilAddress memory) {\n        CommonTypes.FilAddress memory newAddr = CommonTypes.FilAddress(data);\n        if (!validate(newAddr)) {\n            revert InvalidAddress();\n        }\n\n        return newAddr;\n    }\n\n    /// @notice allow to validate if an address is valid or not\n    /// @dev we are only validating known address types. If the type is not known, the default value is true\n    /// @param addr the filecoin address to validate\n    /// @return whether the address is valid or not\n    function validate(CommonTypes.FilAddress memory addr) internal pure returns (bool) {\n        if (addr.data[0] == 0x00) {\n            return addr.data.length <= 10;\n        } else if (addr.data[0] == 0x01 || addr.data[0] == 0x02) {\n            return addr.data.length == 21;\n        } else if (addr.data[0] == 0x03) {\n            return addr.data.length == 49;\n        } else if (addr.data[0] == 0x04) {\n            return addr.data.length <= 64;\n        }\n\n        return addr.data.length <= 256;\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/utils/Leb128.sol": {
      "content": "/*******************************************************************************\n *   (c) 2023 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"lib/buffer/contracts/Buffer.sol\";\n\n/// @notice This library implement the leb128\n/// @author Zondax AG\nlibrary Leb128 {\n    using Buffer for Buffer.buffer;\n\n    /// @notice encode a unsigned integer 64bits into bytes\n    /// @param value the actor ID to encode\n    /// @return result return the value in bytes\n    function encodeUnsignedLeb128FromUInt64(uint64 value) internal pure returns (Buffer.buffer memory result) {\n        while (true) {\n            uint64 byte_ = value & 0x7f;\n            value >>= 7;\n            if (value == 0) {\n                result.appendUint8(uint8(byte_));\n                return result;\n            }\n            result.appendUint8(uint8(byte_ | 0x80));\n        }\n    }\n}\n"
    },
    "lib/filecoin-solidity/contracts/v0.8/utils/Misc.sol": {
      "content": "/*******************************************************************************\n *   (c) 2022 Zondax AG\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"../types/CommonTypes.sol\";\n\n/// @title Library containing miscellaneous functions used on the project\n/// @author Zondax AG\nlibrary Misc {\n    uint64 constant DAG_CBOR_CODEC = 0x71;\n    uint64 constant CBOR_CODEC = 0x51;\n    uint64 constant NONE_CODEC = 0x00;\n\n    // Code taken from Openzeppelin repo\n    // Link: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0320a718e8e07b1d932f5acb8ad9cec9d9eed99b/contracts/utils/math/SignedMath.sol#L37-L42\n    /// @notice get the abs from a signed number\n    /// @param n number to get abs from\n    /// @return unsigned number\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n\n    /// @notice validate if an address exists or not\n    /// @dev read this article for more information https://blog.finxter.com/how-to-find-out-if-an-ethereum-address-is-a-contract/\n    /// @param addr address to check\n    /// @return whether the address exists or not\n    function addressExists(address addr) internal view returns (bool) {\n        bytes32 codehash;\n        assembly {\n            codehash := extcodehash(addr)\n        }\n        return codehash != 0x0;\n    }\n\n    /// Returns the data size required by CBOR.writeFixedNumeric\n    function getPrefixSize(uint256 data_size) internal pure returns (uint256) {\n        if (data_size <= 23) {\n            return 1;\n        } else if (data_size <= 0xFF) {\n            return 2;\n        } else if (data_size <= 0xFFFF) {\n            return 3;\n        } else if (data_size <= 0xFFFFFFFF) {\n            return 5;\n        }\n        return 9;\n    }\n\n    function getBytesSize(bytes memory value) internal pure returns (uint256) {\n        return getPrefixSize(value.length) + value.length;\n    }\n\n    function getCidSize(bytes memory value) internal pure returns (uint256) {\n        return getPrefixSize(2) + value.length;\n    }\n\n    function getFilActorIdSize(CommonTypes.FilActorId value) internal pure returns (uint256) {\n        uint64 val = CommonTypes.FilActorId.unwrap(value);\n        return getPrefixSize(uint256(val));\n    }\n\n    function getChainEpochSize(CommonTypes.ChainEpoch value) internal pure returns (uint256) {\n        int64 val = CommonTypes.ChainEpoch.unwrap(value);\n        if (val >= 0) {\n            return getPrefixSize(uint256(uint64(val)));\n        } else {\n            return getPrefixSize(uint256(uint64(-1 - val)));\n        }\n    }\n\n    function getBoolSize() internal pure returns (uint256) {\n        return getPrefixSize(1);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "lib/solidity-BigNumber/src/BigNumbers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// Definition here allows both the lib and inheriting contracts to use BigNumber directly.\nstruct BigNumber { \n    bytes val;\n    bool neg;\n    uint bitlen;\n}\n\n/**\n * @notice BigNumbers library for Solidity.\n */\nlibrary BigNumbers {\n    \n    /// @notice the value for number 0 of a BigNumber instance.\n    bytes constant ZERO = hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    /// @notice the value for number 1 of a BigNumber instance.\n    bytes constant  ONE = hex\"0000000000000000000000000000000000000000000000000000000000000001\";\n    /// @notice the value for number 2 of a BigNumber instance.\n    bytes constant  TWO = hex\"0000000000000000000000000000000000000000000000000000000000000002\";\n\n    // ***************** BEGIN EXPOSED MANAGEMENT FUNCTIONS ******************\n    /** @notice verify a BN instance\n     *  @dev checks if the BN is in the correct format. operations should only be carried out on\n     *       verified BNs, so it is necessary to call this if your function takes an arbitrary BN\n     *       as input.\n     *\n     *  @param bn BigNumber instance\n     */\n    function verify(\n        BigNumber memory bn\n    ) internal pure {\n        uint msword; \n        bytes memory val = bn.val;\n        assembly {msword := mload(add(val,0x20))} //get msword of result\n        if(msword==0) require(isZero(bn));\n        else require((bn.val.length % 32 == 0) && (msword>>((bn.bitlen%256)-1)==1));\n    }\n\n    /** @notice initialize a BN instance\n     *  @dev wrapper function for _init. initializes from bytes value.\n     *       Allows passing bitLength of value. This is NOT verified in the internal function. Only use where bitlen is\n     *       explicitly known; otherwise use the other init function.\n     *\n     *  @param val BN value. may be of any size.\n     *  @param neg neg whether the BN is +/-\n     *  @param bitlen bit length of output.\n     *  @return BigNumber instance\n     */\n    function init(\n        bytes memory val, \n        bool neg, \n        uint bitlen\n    ) internal view returns(BigNumber memory){\n        return _init(val, neg, bitlen);\n    }\n    \n    /** @notice initialize a BN instance\n     *  @dev wrapper function for _init. initializes from bytes value.\n     *\n     *  @param val BN value. may be of any size.\n     *  @param neg neg whether the BN is +/-\n     *  @return BigNumber instance\n     */\n    function init(\n        bytes memory val, \n        bool neg\n    ) internal view returns(BigNumber memory){\n        return _init(val, neg, 0);\n    }\n\n    /** @notice initialize a BN instance\n     *  @dev wrapper function for _init. initializes from uint value (converts to bytes); \n     *       tf. resulting BN is in the range -2^256-1 ... 2^256-1.\n     *\n     *  @param val uint value.\n     *  @param neg neg whether the BN is +/-\n     *  @return BigNumber instance\n     */\n    function init(\n        uint val, \n        bool neg\n    ) internal view returns(BigNumber memory){\n        return _init(abi.encodePacked(val), neg, 0);\n    }\n    // ***************** END EXPOSED MANAGEMENT FUNCTIONS ******************\n\n\n\n\n    // ***************** BEGIN EXPOSED CORE CALCULATION FUNCTIONS ******************\n    /** @notice BigNumber addition: a + b.\n      * @dev add: Initially prepare BigNumbers for addition operation; internally calls actual addition/subtraction,\n      *           depending on inputs.\n      *           In order to do correct addition or subtraction we have to handle the sign.\n      *           This function discovers the sign of the result based on the inputs, and calls the correct operation.\n      *\n      * @param a first BN\n      * @param b second BN\n      * @return r result  - addition of a and b.\n      */\n    function add(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(BigNumber memory r) {\n        if(a.bitlen==0 && b.bitlen==0) return zero();\n        if(a.bitlen==0) return b;\n        if(b.bitlen==0) return a;\n        bytes memory val;\n        uint bitlen;\n        int compare = cmp(a,b,false);\n\n        if(a.neg || b.neg){\n            if(a.neg && b.neg){\n                if(compare>=0) (val, bitlen) = _add(a.val,b.val,a.bitlen);\n                else (val, bitlen) = _add(b.val,a.val,b.bitlen);\n                r.neg = true;\n            }\n            else {\n                if(compare==1){\n                    (val, bitlen) = _sub(a.val,b.val);\n                    r.neg = a.neg;\n                }\n                else if(compare==-1){\n                    (val, bitlen) = _sub(b.val,a.val);\n                    r.neg = !a.neg;\n                }\n                else return zero();//one pos and one neg, and same value.\n            }\n        }\n        else{\n            if(compare>=0){ // a>=b\n                (val, bitlen) = _add(a.val,b.val,a.bitlen);\n            }\n            else {\n                (val, bitlen) = _add(b.val,a.val,b.bitlen);\n            }\n            r.neg = false;\n        }\n\n        r.val = val;\n        r.bitlen = (bitlen);\n    }\n\n    /** @notice BigNumber subtraction: a - b.\n      * @dev sub: Initially prepare BigNumbers for subtraction operation; internally calls actual addition/subtraction,\n                  depending on inputs.\n      *           In order to do correct addition or subtraction we have to handle the sign.\n      *           This function discovers the sign of the result based on the inputs, and calls the correct operation.\n      *\n      * @param a first BN\n      * @param b second BN\n      * @return r result - subtraction of a and b.\n      */  \n    function sub(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(BigNumber memory r) {\n        if(a.bitlen==0 && b.bitlen==0) return zero();\n        bytes memory val;\n        int compare;\n        uint bitlen;\n        compare = cmp(a,b,false);\n        if(a.neg || b.neg) {\n            if(a.neg && b.neg){           \n                if(compare == 1) { \n                    (val,bitlen) = _sub(a.val,b.val); \n                    r.neg = true;\n                }\n                else if(compare == -1) { \n\n                    (val,bitlen) = _sub(b.val,a.val); \n                    r.neg = false;\n                }\n                else return zero();\n            }\n            else {\n                if(compare >= 0) (val,bitlen) = _add(a.val,b.val,a.bitlen);\n                else (val,bitlen) = _add(b.val,a.val,b.bitlen);\n                \n                r.neg = (a.neg) ? true : false;\n            }\n        }\n        else {\n            if(compare == 1) {\n                (val,bitlen) = _sub(a.val,b.val);\n                r.neg = false;\n             }\n            else if(compare == -1) { \n                (val,bitlen) = _sub(b.val,a.val);\n                r.neg = true;\n            }\n            else return zero(); \n        }\n        \n        r.val = val;\n        r.bitlen = (bitlen);\n    }\n\n    /** @notice BigNumber multiplication: a * b.\n      * @dev mul: takes two BigNumbers and multiplys them. Order is irrelevant.\n      *              multiplication achieved using modexp precompile:\n      *                 (a * b) = ((a + b)**2 - (a - b)**2) / 4\n      *\n      * @param a first BN\n      * @param b second BN\n      * @return r result - multiplication of a and b.\n      */\n    function mul(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal view returns(BigNumber memory r){\n            \n        BigNumber memory lhs = add(a,b);\n        BigNumber memory fst = modexp(lhs, two(), _powModulus(lhs, 2)); // (a+b)^2\n        \n        // no need to do subtraction part of the equation if a == b; if so, it has no effect on final result.\n        if(!eq(a,b)) {\n            BigNumber memory rhs = sub(a,b);\n            BigNumber memory snd = modexp(rhs, two(), _powModulus(rhs, 2)); // (a-b)^2\n            r = _shr(sub(fst, snd) , 2); // (a * b) = (((a + b)**2 - (a - b)**2) / 4\n        }\n        else {\n            r = _shr(fst, 2); // a==b ? (((a + b)**2 / 4\n        }\n    }\n\n    /** @notice BigNumber division verification: a * b.\n      * @dev div: takes three BigNumbers (a,b and result), and verifies that a/b == result.\n      * Performing BigNumber division on-chain is a significantly expensive operation. As a result, \n      * we expose the ability to verify the result of a division operation, which is a constant time operation. \n      *              (a/b = result) == (a = b * result)\n      *              Integer division only; therefore:\n      *                verify ((b*result) + (a % (b*result))) == a.\n      *              eg. 17/7 == 2:\n      *                verify  (7*2) + (17 % (7*2)) == 17.\n      * The function returns a bool on successful verification. The require statements will ensure that false can never\n      *  be returned, however inheriting contracts may also want to put this function inside a require statement.\n      *  \n      * @param a first BigNumber\n      * @param b second BigNumber\n      * @param r result BigNumber\n      * @return bool whether or not the operation was verified\n      */\n    function divVerify(\n        BigNumber memory a, \n        BigNumber memory b, \n        BigNumber memory r\n    ) internal view returns(bool) {\n\n        // first do zero check.\n        // if a<b (always zero) and r==zero (input check), return true.\n        if(cmp(a, b, false) == -1){\n            require(cmp(zero(), r, false)==0);\n            return true;\n        }\n\n        // Following zero check:\n        //if both negative: result positive\n        //if one negative: result negative\n        //if neither negative: result positive\n        bool positiveResult = ( a.neg && b.neg ) || (!a.neg && !b.neg);\n        require(positiveResult ? !r.neg : r.neg);\n        \n        // require denominator to not be zero.\n        require(!(cmp(b,zero(),true)==0));\n        \n        // division result check assumes inputs are positive.\n        // we have already checked for result sign so this is safe.\n        bool[3] memory negs = [a.neg, b.neg, r.neg];\n        a.neg = false;\n        b.neg = false;\n        r.neg = false;\n\n        // do multiplication (b * r)\n        BigNumber memory fst = mul(b,r);\n        // check if we already have 'a' (ie. no remainder after division). if so, no mod necessary, and return true.\n        if(cmp(fst,a,true)==0) return true;\n        //a mod (b*r)\n        BigNumber memory snd = modexp(a,one(),fst); \n        // ((b*r) + a % (b*r)) == a\n        require(cmp(add(fst,snd),a,true)==0); \n\n        a.neg = negs[0];\n        b.neg = negs[1];\n        r.neg = negs[2];\n\n        return true;\n    }\n\n    /** @notice BigNumber exponentiation: a ^ b.\n      * @dev pow: takes a BigNumber and a uint (a,e), and calculates a^e.\n      * modexp precompile is used to achieve a^e; for this is work, we need to work out the minimum modulus value \n      * such that the modulus passed to modexp is not used. the result of a^e can never be more than size bitlen(a) * e.\n      * \n      * @param a BigNumber\n      * @param e exponent\n      * @return r result BigNumber\n      */\n    function pow(\n        BigNumber memory a, \n        uint e\n    ) internal view returns(BigNumber memory){\n        return modexp(a, init(e, false), _powModulus(a, e));\n    }\n\n    /** @notice BigNumber modulus: a % n.\n      * @dev mod: takes a BigNumber and modulus BigNumber (a,n), and calculates a % n.\n      * modexp precompile is used to achieve a % n; an exponent of value '1' is passed.\n      * @param a BigNumber\n      * @param n modulus BigNumber\n      * @return r result BigNumber\n      */\n    function mod(\n        BigNumber memory a, \n        BigNumber memory n\n    ) internal view returns(BigNumber memory){\n      return modexp(a,one(),n);\n    }\n\n    /** @notice BigNumber modular exponentiation: a^e mod n.\n      * @dev modexp: takes base, exponent, and modulus, internally computes base^exponent % modulus using the precompile at address 0x5, and creates new BigNumber.\n      *              this function is overloaded: it assumes the exponent is positive. if not, the other method is used, whereby the inverse of the base is also passed.\n      *\n      * @param a base BigNumber\n      * @param e exponent BigNumber\n      * @param n modulus BigNumber\n      * @return result BigNumber\n      */    \n    function modexp(\n        BigNumber memory a, \n        BigNumber memory e, \n        BigNumber memory n\n    ) internal view returns(BigNumber memory) {\n        //if exponent is negative, other method with this same name should be used.\n        //if modulus is negative or zero, we cannot perform the operation.\n        require(  e.neg==false\n                && n.neg==false\n                && !isZero(n.val));\n\n        bytes memory _result = _modexp(a.val,e.val,n.val);\n        //get bitlen of result (TODO: optimise. we know bitlen is in the same byte as the modulus bitlen byte)\n        uint bitlen = bitLength(_result);\n        \n        // if result is 0, immediately return.\n        if(bitlen == 0) return zero();\n        // if base is negative AND exponent is odd, base^exp is negative, and tf. result is negative;\n        // in that case we make the result positive by adding the modulus.\n        if(a.neg && isOdd(e)) return add(BigNumber(_result, true, bitlen), n);\n        // in any other case we return the positive result.\n        return BigNumber(_result, false, bitlen);\n    }\n\n    /** @notice BigNumber modular exponentiation with negative base: inv(a)==a_inv && a_inv^e mod n.\n    /** @dev modexp: takes base, base inverse, exponent, and modulus, asserts inverse(base)==base inverse, \n      *              internally computes base_inverse^exponent % modulus and creates new BigNumber.\n      *              this function is overloaded: it assumes the exponent is negative. \n      *              if not, the other method is used, where the inverse of the base is not passed.\n      *\n      * @param a base BigNumber\n      * @param ai base inverse BigNumber\n      * @param e exponent BigNumber\n      * @param a modulus\n      * @return BigNumber memory result.\n      */ \n    function modexp(\n        BigNumber memory a, \n        BigNumber memory ai, \n        BigNumber memory e, \n        BigNumber memory n) \n    internal view returns(BigNumber memory) {\n        // base^-exp = (base^-1)^exp\n        require(!a.neg && e.neg);\n\n        //if modulus is negative or zero, we cannot perform the operation.\n        require(!n.neg && !isZero(n.val));\n\n        //base_inverse == inverse(base, modulus)\n        require(modinvVerify(a, n, ai)); \n            \n        bytes memory _result = _modexp(ai.val,e.val,n.val);\n        //get bitlen of result (TODO: optimise. we know bitlen is in the same byte as the modulus bitlen byte)\n        uint bitlen = bitLength(_result);\n\n        // if result is 0, immediately return.\n        if(bitlen == 0) return zero();\n        // if base_inverse is negative AND exponent is odd, base_inverse^exp is negative, and tf. result is negative;\n        // in that case we make the result positive by adding the modulus.\n        if(ai.neg && isOdd(e)) return add(BigNumber(_result, true, bitlen), n);\n        // in any other case we return the positive result.\n        return BigNumber(_result, false, bitlen);\n    }\n \n    /** @notice modular multiplication: (a*b) % n.\n      * @dev modmul: Takes BigNumbers for a, b, and modulus, and computes (a*b) % modulus\n      *              We call mul for the two input values, before calling modexp, passing exponent as 1.\n      *              Sign is taken care of in sub-functions.\n      *\n      * @param a BigNumber\n      * @param b BigNumber\n      * @param n Modulus BigNumber\n      * @return result BigNumber\n      */\n    function modmul(\n        BigNumber memory a, \n        BigNumber memory b, \n        BigNumber memory n) internal view returns(BigNumber memory) {       \n        return mod(mul(a,b), n);       \n    }\n\n    /** @notice modular inverse verification: Verifies that (a*r) % n == 1.\n      * @dev modinvVerify: Takes BigNumbers for base, modulus, and result, verifies (base*result)%modulus==1, and returns result.\n      *              Similar to division, it's far cheaper to verify an inverse operation on-chain than it is to calculate it, so we allow the user to pass their own result.\n      *\n      * @param a base BigNumber\n      * @param n modulus BigNumber\n      * @param r result BigNumber\n      * @return boolean result\n      */\n    function modinvVerify(\n        BigNumber memory a, \n        BigNumber memory n, \n        BigNumber memory r\n    ) internal view returns(bool) {\n        require(!a.neg && !n.neg); //assert positivity of inputs.\n        /*\n         * the following proves:\n         * - user result passed is correct for values base and modulus\n         * - modular inverse exists for values base and modulus.\n         * otherwise it fails.\n         */        \n        require(cmp(modmul(a, r, n),one(),true)==0);\n        \n        return true;\n    }\n    // ***************** END EXPOSED CORE CALCULATION FUNCTIONS ******************\n\n\n\n\n    // ***************** START EXPOSED HELPER FUNCTIONS ******************\n    /** @notice BigNumber odd number check\n      * @dev isOdd: returns 1 if BigNumber value is an odd number and 0 otherwise.\n      *              \n      * @param a BigNumber\n      * @return r Boolean result\n      */  \n    function isOdd(\n        BigNumber memory a\n    ) internal pure returns(bool r){\n        assembly{\n            let a_ptr := add(mload(a), mload(mload(a))) // go to least significant word\n            r := mod(mload(a_ptr),2)                      // mod it with 2 (returns 0 or 1) \n        }\n    }\n\n    /** @notice BigNumber comparison\n      * @dev cmp: Compares BigNumbers a and b. 'signed' parameter indiciates whether to consider the sign of the inputs.\n      *           'trigger' is used to decide this - \n      *              if both negative, invert the result; \n      *              if both positive (or signed==false), trigger has no effect;\n      *              if differing signs, we return immediately based on input.\n      *           returns -1 on a<b, 0 on a==b, 1 on a>b.\n      *           \n      * @param a BigNumber\n      * @param b BigNumber\n      * @param signed whether to consider sign of inputs\n      * @return int result\n      */\n    function cmp(\n        BigNumber memory a, \n        BigNumber memory b, \n        bool signed\n    ) internal pure returns(int){\n        int trigger = 1;\n        if(signed){\n            if(a.neg && b.neg) trigger = -1;\n            else if(a.neg==false && b.neg==true) return 1;\n            else if(a.neg==true && b.neg==false) return -1;\n        }\n\n        if(a.bitlen>b.bitlen) return    trigger;   // 1*trigger\n        if(b.bitlen>a.bitlen) return -1*trigger;\n\n        uint a_ptr;\n        uint b_ptr;\n        uint a_word;\n        uint b_word;\n\n        uint len = a.val.length; //bitlen is same so no need to check length.\n\n        assembly{\n            a_ptr := add(mload(a),0x20) \n            b_ptr := add(mload(b),0x20)\n        }\n\n        for(uint i=0; i<len;i+=32){\n            assembly{\n                a_word := mload(add(a_ptr,i))\n                b_word := mload(add(b_ptr,i))\n            }\n\n            if(a_word>b_word) return    trigger; // 1*trigger\n            if(b_word>a_word) return -1*trigger; \n\n        }\n\n        return 0; //same value.\n    }\n\n    /** @notice BigNumber equality\n      * @dev eq: returns true if a==b. sign always considered.\n      *           \n      * @param a BigNumber\n      * @param b BigNumber\n      * @return boolean result\n      */\n    function eq(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(bool){\n        int result = cmp(a, b, true);\n        return (result==0) ? true : false;\n    }\n\n    /** @notice BigNumber greater than\n      * @dev eq: returns true if a>b. sign always considered.\n      *           \n      * @param a BigNumber\n      * @param b BigNumber\n      * @return boolean result\n      */\n    function gt(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(bool){\n        int result = cmp(a, b, true);\n        return (result==1) ? true : false;\n    }\n\n    /** @notice BigNumber greater than or equal to\n      * @dev eq: returns true if a>=b. sign always considered.\n      *           \n      * @param a BigNumber\n      * @param b BigNumber\n      * @return boolean result\n      */\n    function gte(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(bool){\n        int result = cmp(a, b, true);\n        return (result==1 || result==0) ? true : false;\n    }\n\n    /** @notice BigNumber less than\n      * @dev eq: returns true if a<b. sign always considered.\n      *           \n      * @param a BigNumber\n      * @param b BigNumber\n      * @return boolean result\n      */\n    function lt(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(bool){\n        int result = cmp(a, b, true);\n        return (result==-1) ? true : false;\n    }\n\n    /** @notice BigNumber less than or equal o\n      * @dev eq: returns true if a<=b. sign always considered.\n      *           \n      * @param a BigNumber\n      * @param b BigNumber\n      * @return boolean result\n      */\n    function lte(\n        BigNumber memory a, \n        BigNumber memory b\n    ) internal pure returns(bool){\n        int result = cmp(a, b, true);\n        return (result==-1 || result==0) ? true : false;\n    }\n\n    /** @notice right shift BigNumber value\n      * @dev shr: right shift BigNumber a by 'bits' bits.\n             copies input value to new memory location before shift and calls _shr function after. \n      * @param a BigNumber value to shift\n      * @param bits amount of bits to shift by\n      * @return result BigNumber\n      */\n    function shr(\n        BigNumber memory a, \n        uint bits\n    ) internal view returns(BigNumber memory){\n        require(!a.neg);\n        return _shr(a, bits);\n    }\n\n    /** @notice right shift BigNumber memory 'dividend' by 'bits' bits.\n      * @dev _shr: Shifts input value in-place, ie. does not create new memory. shr function does this.\n      * right shift does not necessarily have to copy into a new memory location. where the user wishes the modify\n      * the existing value they have in place, they can use this.  \n      * @param bn value to shift\n      * @param bits amount of bits to shift by\n      * @return r result\n      */\n    function _shr(BigNumber memory bn, uint bits) internal view returns(BigNumber memory){\n        uint length;\n        assembly { length := mload(mload(bn)) }\n\n        // if bits is >= the bitlength of the value the result is always 0\n        if(bits >= bn.bitlen) return BigNumber(ZERO,false,0); \n        \n        // set bitlen initially as we will be potentially modifying 'bits'\n        bn.bitlen = bn.bitlen-(bits);\n\n        // handle shifts greater than 256:\n        // if bits is greater than 256 we can simply remove any trailing words, by altering the BN length. \n        // we also update 'bits' so that it is now in the range 0..256.\n        assembly {\n            if or(gt(bits, 0x100), eq(bits, 0x100)) {\n                length := sub(length, mul(div(bits, 0x100), 0x20))\n                mstore(mload(bn), length)\n                bits := mod(bits, 0x100)\n            }\n\n            // if bits is multiple of 8 (byte size), we can simply use identity precompile for cheap memcopy.\n            // otherwise we shift each word, starting at the least signifcant word, one-by-one using the mask technique.\n            // TODO it is possible to do this without the last two operations, see SHL identity copy.\n            let bn_val_ptr := mload(bn)\n            switch eq(mod(bits, 8), 0)\n              case 1 {  \n                  let bytes_shift := div(bits, 8)\n                  let in          := mload(bn)\n                  let inlength    := mload(in)\n                  let insize      := add(inlength, 0x20)\n                  let out         := add(in,     bytes_shift)\n                  let outsize     := sub(insize, bytes_shift)\n                  let success     := staticcall(450, 0x4, in, insize, out, insize)\n                  mstore8(add(out, 0x1f), 0) // maintain our BN layout following identity call:\n                  mstore(in, inlength)         // set current length byte to 0, and reset old length.\n              }\n              default {\n                  let mask\n                  let lsw\n                  let mask_shift := sub(0x100, bits)\n                  let lsw_ptr := add(bn_val_ptr, length)   \n                  for { let i := length } eq(eq(i,0),0) { i := sub(i, 0x20) } { // for(int i=max_length; i!=0; i-=32)\n                      switch eq(i,0x20)                                         // if i==32:\n                          case 1 { mask := 0 }                                  //    - handles lsword: no mask needed.\n                          default { mask := mload(sub(lsw_ptr,0x20)) }          //    - else get mask (previous word)\n                      lsw := shr(bits, mload(lsw_ptr))                          // right shift current by bits\n                      mask := shl(mask_shift, mask)                             // left shift next significant word by mask_shift\n                      mstore(lsw_ptr, or(lsw,mask))                             // store OR'd mask and shifted bits in-place\n                      lsw_ptr := sub(lsw_ptr, 0x20)                             // point to next bits.\n                  }\n              }\n\n            // The following removes the leading word containing all zeroes in the result should it exist, \n            // as well as updating lengths and pointers as necessary.\n            let msw_ptr := add(bn_val_ptr,0x20)\n            switch eq(mload(msw_ptr), 0) \n                case 1 {\n                   mstore(msw_ptr, sub(mload(bn_val_ptr), 0x20)) // store new length in new position\n                   mstore(bn, msw_ptr)                           // update pointer from bn\n                }\n                default {}\n        }\n    \n\n        return bn;\n    }\n\n    /** @notice left shift BigNumber value\n      * @dev shr: left shift BigNumber a by 'bits' bits.\n                  ensures the value is not negative before calling the private function.\n      * @param a BigNumber value to shift\n      * @param bits amount of bits to shift by\n      * @return result BigNumber\n      */\n    function shl(\n        BigNumber memory a, \n        uint bits\n    ) internal view returns(BigNumber memory){\n        require(!a.neg);\n        return _shl(a, bits);\n    }\n\n    /** @notice sha3 hash a BigNumber.\n      * @dev hash: takes a BigNumber and performs sha3 hash on it.\n      *            we hash each BigNumber WITHOUT it's first word - first word is a pointer to the start of the bytes value,\n      *            and so is different for each struct.\n      *             \n      * @param a BigNumber\n      * @return h bytes32 hash.\n      */\n    function hash(\n        BigNumber memory a\n    ) internal pure returns(bytes32 h) {\n        //amount of words to hash = all words of the value and three extra words: neg, bitlen & value length.     \n        assembly {\n            h := keccak256( add(a,0x20), add (mload(mload(a)), 0x60 ) ) \n        }\n    }\n\n    /** @notice BigNumber full zero check\n      * @dev isZero: checks if the BigNumber is in the default zero format for BNs (ie. the result from zero()).\n      *             \n      * @param a BigNumber\n      * @return boolean result.\n      */\n    function isZero(\n        BigNumber memory a\n    ) internal pure returns(bool) {\n        return isZero(a.val) && a.val.length==0x20 && !a.neg && a.bitlen == 0;\n    }\n\n\n    /** @notice bytes zero check\n      * @dev isZero: checks if input bytes value resolves to zero.\n      *             \n      * @param a bytes value\n      * @return boolean result.\n      */\n    function isZero(\n        bytes memory a\n    ) internal pure returns(bool) {\n        uint msword;\n        uint msword_ptr;\n        assembly {\n            msword_ptr := add(a,0x20)\n        }\n        for(uint i=0; i<a.length; i+=32) {\n            assembly { msword := mload(msword_ptr) } // get msword of input\n            if(msword > 0) return false;\n            assembly { msword_ptr := add(msword_ptr, 0x20) }\n        }\n        return true;\n\n    }\n\n    /** @notice BigNumber value bit length\n      * @dev bitLength: returns BigNumber value bit length- ie. log2 (most significant bit of value)\n      *             \n      * @param a BigNumber\n      * @return uint bit length result.\n      */\n    function bitLength(\n        BigNumber memory a\n    ) internal pure returns(uint){\n        return bitLength(a.val);\n    }\n\n    /** @notice bytes bit length\n      * @dev bitLength: returns bytes bit length- ie. log2 (most significant bit of value)\n      *             \n      * @param a bytes value\n      * @return r uint bit length result.\n      */\n    function bitLength(\n        bytes memory a\n    ) internal pure returns(uint r){\n        if(isZero(a)) return 0;\n        uint msword; \n        assembly {\n            msword := mload(add(a,0x20))               // get msword of input\n        }\n        r = bitLength(msword);                         // get bitlen of msword, add to size of remaining words.\n        assembly {                                           \n            r := add(r, mul(sub(mload(a), 0x20) , 8))  // res += (val.length-32)*8;  \n        }\n    }\n\n    /** @notice uint bit length\n        @dev bitLength: get the bit length of a uint input - ie. log2 (most significant bit of 256 bit value (one EVM word))\n      *                       credit: Tjaden Hess @ ethereum.stackexchange             \n      * @param a uint value\n      * @return r uint bit length result.\n      */\n    function bitLength(\n        uint a\n    ) internal pure returns (uint r){\n        assembly {\n            switch eq(a, 0)\n            case 1 {\n                r := 0\n            }\n            default {\n                let arg := a\n                a := sub(a,1)\n                a := or(a, div(a, 0x02))\n                a := or(a, div(a, 0x04))\n                a := or(a, div(a, 0x10))\n                a := or(a, div(a, 0x100))\n                a := or(a, div(a, 0x10000))\n                a := or(a, div(a, 0x100000000))\n                a := or(a, div(a, 0x10000000000000000))\n                a := or(a, div(a, 0x100000000000000000000000000000000))\n                a := add(a, 1)\n                let m := mload(0x40)\n                mstore(m,           0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd)\n                mstore(add(m,0x20), 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe)\n                mstore(add(m,0x40), 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616)\n                mstore(add(m,0x60), 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff)\n                mstore(add(m,0x80), 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e)\n                mstore(add(m,0xa0), 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707)\n                mstore(add(m,0xc0), 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606)\n                mstore(add(m,0xe0), 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100)\n                mstore(0x40, add(m, 0x100))\n                let magic := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\n                let shift := 0x100000000000000000000000000000000000000000000000000000000000000\n                let _a := div(mul(a, magic), shift)\n                r := div(mload(add(m,sub(255,_a))), shift)\n                r := add(r, mul(256, gt(arg, 0x8000000000000000000000000000000000000000000000000000000000000000)))\n                // where a is a power of two, result needs to be incremented. we use the power of two trick here: if(arg & arg-1 == 0) ++r;\n                if eq(and(arg, sub(arg, 1)), 0) {\n                    r := add(r, 1) \n                }\n            }\n        }\n    }\n\n    /** @notice BigNumber zero value\n        @dev zero: returns zero encoded as a BigNumber\n      * @return zero encoded as BigNumber\n      */\n    function zero(\n    ) internal pure returns(BigNumber memory) {\n        return BigNumber(ZERO, false, 0);\n    }\n\n    /** @notice BigNumber one value\n        @dev one: returns one encoded as a BigNumber\n      * @return one encoded as BigNumber\n      */\n    function one(\n    ) internal pure returns(BigNumber memory) {\n        return BigNumber(ONE, false, 1);\n    }\n\n    /** @notice BigNumber two value\n        @dev two: returns two encoded as a BigNumber\n      * @return two encoded as BigNumber\n      */\n    function two(\n    ) internal pure returns(BigNumber memory) {\n        return BigNumber(TWO, false, 2);\n    }\n    // ***************** END EXPOSED HELPER FUNCTIONS ******************\n\n\n\n\n\n    // ***************** START PRIVATE MANAGEMENT FUNCTIONS ******************\n    /** @notice Create a new BigNumber.\n        @dev init: overloading allows caller to obtionally pass bitlen where it is known - as it is cheaper to do off-chain and verify on-chain. \n      *            we assert input is in data structure as defined above, and that bitlen, if passed, is correct.\n      *            'copy' parameter indicates whether or not to copy the contents of val to a new location in memory (for example where you pass \n      *            the contents of another variable's value in)\n      * @param val bytes - bignum value.\n      * @param neg bool - sign of value\n      * @param bitlen uint - bit length of value\n      * @return r BigNumber initialized value.\n      */\n    function _init(\n        bytes memory val, \n        bool neg, \n        uint bitlen\n    ) private view returns(BigNumber memory r){ \n        // use identity at location 0x4 for cheap memcpy.\n        // grab contents of val, load starting from memory end, update memory end pointer.\n        assembly {\n            let data := add(val, 0x20)\n            let length := mload(val)\n            let out\n            let freemem := msize()\n            switch eq(mod(length, 0x20), 0)                       // if(val.length % 32 == 0)\n                case 1 {\n                    out     := add(freemem, 0x20)                 // freememory location + length word\n                    mstore(freemem, length)                       // set new length \n                }\n                default { \n                    let offset  := sub(0x20, mod(length, 0x20))   // offset: 32 - (length % 32)\n                    out     := add(add(freemem, offset), 0x20)    // freememory location + offset + length word\n                    mstore(freemem, add(length, offset))          // set new length \n                }\n            pop(staticcall(450, 0x4, data, length, out, length))  // copy into 'out' memory location\n            mstore(0x40, add(freemem, add(mload(freemem), 0x20))) // update the free memory pointer\n            \n            // handle leading zero words. assume freemem is pointer to bytes value\n            let bn_length := mload(freemem)\n            for { } eq ( eq(bn_length, 0x20), 0) { } {            // for(; length!=32; length-=32)\n             switch eq(mload(add(freemem, 0x20)),0)               // if(msword==0):\n                    case 1 { freemem := add(freemem, 0x20) }      //     update length pointer\n                    default { break }                             // else: loop termination. non-zero word found\n                bn_length := sub(bn_length,0x20)                          \n            } \n            mstore(freemem, bn_length)                             \n\n            mstore(r, freemem)                                    // store new bytes value in r\n            mstore(add(r, 0x20), neg)                             // store neg value in r\n        }\n\n        r.bitlen = bitlen == 0 ? bitLength(r.val) : bitlen;\n    }\n    // ***************** END PRIVATE MANAGEMENT FUNCTIONS ******************\n\n\n\n\n\n    // ***************** START PRIVATE CORE CALCULATION FUNCTIONS ******************\n    /** @notice takes two BigNumber memory values and the bitlen of the max value, and adds them.\n      * @dev _add: This function is private and only callable from add: therefore the values may be of different sizes,\n      *            in any order of size, and of different signs (handled in add).\n      *            As values may be of different sizes, inputs are considered starting from the least significant \n      *            words, working back. \n      *            The function calculates the new bitlen (basically if bitlens are the same for max and min, \n      *            max_bitlen++) and returns a new BigNumber memory value.\n      *\n      * @param max bytes -  biggest value  (determined from add)\n      * @param min bytes -  smallest value (determined from add)\n      * @param max_bitlen uint - bit length of max value.\n      * @return bytes result - max + min.\n      * @return uint - bit length of result.\n      */\n    function _add(\n        bytes memory max, \n        bytes memory min, \n        uint max_bitlen\n    ) private pure returns (bytes memory, uint) {\n        bytes memory result;\n        assembly {\n\n            let result_start := msize()                                       // Get the highest available block of memory\n            let carry := 0\n            let uint_max := sub(0,1)\n\n            let max_ptr := add(max, mload(max))\n            let min_ptr := add(min, mload(min))                               // point to last word of each byte array.\n\n            let result_ptr := add(add(result_start,0x20), mload(max))         // set result_ptr end.\n\n            for { let i := mload(max) } eq(eq(i,0),0) { i := sub(i, 0x20) } { // for(int i=max_length; i!=0; i-=32)\n                let max_val := mload(max_ptr)                                 // get next word for 'max'\n                switch gt(i,sub(mload(max),mload(min)))                       // if(i>(max_length-min_length)). while \n                                                                              // 'min' words are still available.\n                    case 1{ \n                        let min_val := mload(min_ptr)                         //      get next word for 'min'\n                        mstore(result_ptr, add(add(max_val,min_val),carry))   //      result_word = max_word+min_word+carry\n                        switch gt(max_val, sub(uint_max,sub(min_val,carry)))  //      this switch block finds whether or\n                                                                              //      not to set the carry bit for the\n                                                                              //      next iteration.\n                            case 1  { carry := 1 }\n                            default {\n                                switch and(eq(max_val,uint_max),or(gt(carry,0), gt(min_val,0)))\n                                case 1 { carry := 1 }\n                                default{ carry := 0 }\n                            }\n                            \n                        min_ptr := sub(min_ptr,0x20)                       //       point to next 'min' word\n                    }\n                    default{                                               // else: remainder after 'min' words are complete.\n                        mstore(result_ptr, add(max_val,carry))             //       result_word = max_word+carry\n                        \n                        switch and( eq(uint_max,max_val), eq(carry,1) )    //       this switch block finds whether or \n                                                                           //       not to set the carry bit for the \n                                                                           //       next iteration.\n                            case 1  { carry := 1 }\n                            default { carry := 0 }\n                    }\n                result_ptr := sub(result_ptr,0x20)                         // point to next 'result' word\n                max_ptr := sub(max_ptr,0x20)                               // point to next 'max' word\n            }\n\n            switch eq(carry,0) \n                case 1{ result_start := add(result_start,0x20) }           // if carry is 0, increment result_start, ie.\n                                                                           // length word for result is now one word \n                                                                           // position ahead.\n                default { mstore(result_ptr, 1) }                          // else if carry is 1, store 1; overflow has\n                                                                           // occured, so length word remains in the \n                                                                           // same position.\n\n            result := result_start                                         // point 'result' bytes value to the correct\n                                                                           // address in memory.\n            mstore(result,add(mload(max),mul(0x20,carry)))                 // store length of result. we are finished \n                                                                           // with the byte array.\n            \n            mstore(0x40, add(result,add(mload(result),0x20)))              // Update freemem pointer to point to new \n                                                                           // end of memory.\n\n            // we now calculate the result's bit length.\n            // with addition, if we assume that some a is at least equal to some b, then the resulting bit length will\n            // be a's bit length or (a's bit length)+1, depending on carry bit.this is cheaper than calling bitLength.\n            let msword := mload(add(result,0x20))                             // get most significant word of result\n            // if(msword==1 || msword>>(max_bitlen % 256)==1):\n            if or( eq(msword, 1), eq(shr(mod(max_bitlen,256),msword),1) ) {\n                    max_bitlen := add(max_bitlen, 1)                          // if msword's bit length is 1 greater \n                                                                              // than max_bitlen, OR overflow occured,\n                                                                              // new bitlen is max_bitlen+1.\n                }\n        }\n        \n\n        return (result, max_bitlen);\n    }\n\n    /** @notice takes two BigNumber memory values and subtracts them.\n      * @dev _sub: This function is private and only callable from add: therefore the values may be of different sizes, \n      *            in any order of size, and of different signs (handled in add).\n      *            As values may be of different sizes, inputs are considered starting from the least significant words,\n      *            working back. \n      *            The function calculates the new bitlen (basically if bitlens are the same for max and min, \n      *            max_bitlen++) and returns a new BigNumber memory value.\n      *\n      * @param max bytes -  biggest value  (determined from add)\n      * @param min bytes -  smallest value (determined from add)\n      * @return bytes result - max + min.\n      * @return uint - bit length of result.\n      */\n    function _sub(\n        bytes memory max, \n        bytes memory min\n    ) internal pure returns (bytes memory, uint) {\n        bytes memory result;\n        uint carry = 0;\n        uint uint_max = type(uint256).max;\n        assembly {\n                \n            let result_start := msize()                                     // Get the highest available block of \n                                                                            // memory\n        \n            let max_len := mload(max)\n            let min_len := mload(min)                                       // load lengths of inputs\n            \n            let len_diff := sub(max_len,min_len)                            // get differences in lengths.\n            \n            let max_ptr := add(max, max_len)\n            let min_ptr := add(min, min_len)                                // go to end of arrays\n            let result_ptr := add(result_start, max_len)                    // point to least significant result \n                                                                            // word.\n            let memory_end := add(result_ptr,0x20)                          // save memory_end to update free memory\n                                                                            // pointer at the end.\n            \n            for { let i := max_len } eq(eq(i,0),0) { i := sub(i, 0x20) } {  // for(int i=max_length; i!=0; i-=32)\n                let max_val := mload(max_ptr)                               // get next word for 'max'\n                switch gt(i,len_diff)                                       // if(i>(max_length-min_length)). while\n                                                                            // 'min' words are still available.\n                    case 1{ \n                        let min_val := mload(min_ptr)                       //  get next word for 'min'\n        \n                        mstore(result_ptr, sub(sub(max_val,min_val),carry)) //  result_word = (max_word-min_word)-carry\n                    \n                        switch or(lt(max_val, add(min_val,carry)), \n                               and(eq(min_val,uint_max), eq(carry,1)))      //  this switch block finds whether or \n                                                                            //  not to set the carry bit for the next iteration.\n                            case 1  { carry := 1 }\n                            default { carry := 0 }\n                            \n                        min_ptr := sub(min_ptr,0x20)                        //  point to next 'result' word\n                    }\n                    default {                                               // else: remainder after 'min' words are complete.\n\n                        mstore(result_ptr, sub(max_val,carry))              //      result_word = max_word-carry\n                    \n                        switch and( eq(max_val,0), eq(carry,1) )            //      this switch block finds whether or \n                                                                            //      not to set the carry bit for the \n                                                                            //      next iteration.\n                            case 1  { carry := 1 }\n                            default { carry := 0 }\n\n                    }\n                result_ptr := sub(result_ptr,0x20)                          // point to next 'result' word\n                max_ptr    := sub(max_ptr,0x20)                             // point to next 'max' word\n            }      \n\n            //the following code removes any leading words containing all zeroes in the result.\n            result_ptr := add(result_ptr,0x20)                                                 \n\n            // for(result_ptr+=32;; result==0; result_ptr+=32)\n            for { }   eq(mload(result_ptr), 0) { result_ptr := add(result_ptr,0x20) } { \n               result_start := add(result_start, 0x20)                      // push up the start pointer for the result\n               max_len := sub(max_len,0x20)                                 // subtract a word (32 bytes) from the \n                                                                            // result length.\n            } \n\n            result := result_start                                          // point 'result' bytes value to \n                                                                            // the correct address in memory\n            \n            mstore(result,max_len)                                          // store length of result. we \n                                                                            // are finished with the byte array.\n            \n            mstore(0x40, memory_end)                                        // Update freemem pointer.\n        }\n\n        uint new_bitlen = bitLength(result);                                // calculate the result's \n                                                                            // bit length.\n        \n        return (result, new_bitlen);\n    }\n\n    /** @notice gets the modulus value necessary for calculating exponetiation.\n      * @dev _powModulus: we must pass the minimum modulus value which would return JUST the a^b part of the calculation\n      *       in modexp. the rationale here is:\n      *       if 'a' has n bits, then a^e has at most n*e bits.\n      *       using this modulus in exponetiation will result in simply a^e.\n      *       therefore the value may be many words long.\n      *       This is done by:\n      *         - storing total modulus byte length\n      *         - storing first word of modulus with correct bit set\n      *         - updating the free memory pointer to come after total length.\n      *\n      * @param a BigNumber base\n      * @param e uint exponent\n      * @return BigNumber modulus result\n      */\n    function _powModulus(\n        BigNumber memory a, \n        uint e\n    ) private pure returns(BigNumber memory){\n        bytes memory _modulus = ZERO;\n        uint mod_index;\n\n        assembly {\n            mod_index := mul(mload(add(a, 0x40)), e)               // a.bitlen * e is the max bitlength of result\n            let first_word_modulus := shl(mod(mod_index, 256), 1)  // set bit in first modulus word.\n            mstore(_modulus, mul(add(div(mod_index,256),1),0x20))  // store length of modulus\n            mstore(add(_modulus,0x20), first_word_modulus)         // set first modulus word\n            mstore(0x40, add(_modulus, add(mload(_modulus),0x20))) // update freemem pointer to be modulus index\n                                                                   // + length\n        }\n\n        //create modulus BigNumber memory for modexp function\n        return BigNumber(_modulus, false, mod_index); \n    }\n\n    /** @notice Modular Exponentiation: Takes bytes values for base, exp, mod and calls precompile for (base^exp)%^mod\n      * @dev modexp: Wrapper for built-in modexp (contract 0x5) as described here: \n      *              https://github.com/ethereum/EIPs/pull/198\n      *\n      * @param _b bytes base\n      * @param _e bytes base_inverse \n      * @param _m bytes exponent\n      * @param r bytes result.\n      */\n    function _modexp(\n        bytes memory _b, \n        bytes memory _e, \n        bytes memory _m\n    ) private view returns(bytes memory r) {\n        assembly {\n            \n            let bl := mload(_b)\n            let el := mload(_e)\n            let ml := mload(_m)\n            \n            \n            let freemem := mload(0x40) // Free memory pointer is always stored at 0x40\n            \n            \n            mstore(freemem, bl)         // arg[0] = base.length @ +0\n            \n            mstore(add(freemem,32), el) // arg[1] = exp.length @ +32\n            \n            mstore(add(freemem,64), ml) // arg[2] = mod.length @ +64\n            \n            // arg[3] = base.bits @ + 96\n            // Use identity built-in (contract 0x4) as a cheap memcpy\n            let success := staticcall(450, 0x4, add(_b,32), bl, add(freemem,96), bl)\n            \n            // arg[4] = exp.bits @ +96+base.length\n            let size := add(96, bl)\n            success := staticcall(450, 0x4, add(_e,32), el, add(freemem,size), el)\n            \n            // arg[5] = mod.bits @ +96+base.length+exp.length\n            size := add(size,el)\n            success := staticcall(450, 0x4, add(_m,32), ml, add(freemem,size), ml)\n            \n            switch success case 0 { invalid() } //fail where we haven't enough gas to make the call\n\n            // Total size of input = 96+base.length+exp.length+mod.length\n            size := add(size,ml)\n            // Invoke contract 0x5, put return value right after mod.length, @ +96\n            success := staticcall(sub(gas(), 1350), 0x5, freemem, size, add(freemem, 0x60), ml)\n\n            switch success case 0 { invalid() } //fail where we haven't enough gas to make the call\n\n            let length := ml\n            let msword_ptr := add(freemem, 0x60)\n\n            ///the following code removes any leading words containing all zeroes in the result.\n            for { } eq ( eq(length, 0x20), 0) { } {                   // for(; length!=32; length-=32)\n                switch eq(mload(msword_ptr),0)                        // if(msword==0):\n                    case 1 { msword_ptr := add(msword_ptr, 0x20) }    //     update length pointer\n                    default { break }                                 // else: loop termination. non-zero word found\n                length := sub(length,0x20)                          \n            } \n            r := sub(msword_ptr,0x20)\n            mstore(r, length)\n            \n            // point to the location of the return value (length, bits)\n            //assuming mod length is multiple of 32, return value is already in the right format.\n            mstore(0x40, add(add(96, freemem),ml)) //deallocate freemem pointer\n        }        \n    }\n    // ***************** END PRIVATE CORE CALCULATION FUNCTIONS ******************\n\n\n\n\n\n    // ***************** START PRIVATE HELPER FUNCTIONS ******************\n    /** @notice left shift BigNumber memory 'dividend' by 'value' bits.\n      * @param bn value to shift\n      * @param bits amount of bits to shift by\n      * @return r result\n      */\n    function _shl(\n        BigNumber memory bn, \n        uint bits\n    ) private view returns(BigNumber memory r) {\n        if(bits==0 || bn.bitlen==0) return bn;\n        \n        // we start by creating an empty bytes array of the size of the output, based on 'bits'.\n        // for that we must get the amount of extra words needed for the output.\n        uint length = bn.val.length;\n        // position of bitlen in most significnat word\n        uint bit_position = ((bn.bitlen-1) % 256) + 1;\n        // total extra words. we check if the bits remainder will add one more word.\n        uint extra_words = (bits / 256) + ( (bits % 256) >= (256 - bit_position) ? 1 : 0);\n        // length of output\n        uint total_length = length + (extra_words * 0x20);\n\n        r.bitlen = bn.bitlen+(bits);\n        r.neg = bn.neg;\n        bits %= 256;\n\n        \n        bytes memory bn_shift;\n        uint bn_shift_ptr;\n        // the following efficiently creates an empty byte array of size 'total_length'\n        assembly {\n            let freemem_ptr := mload(0x40)                // get pointer to free memory\n            mstore(freemem_ptr, total_length)             // store bytes length\n            let mem_end := add(freemem_ptr, total_length) // end of memory\n            mstore(mem_end, 0)                            // store 0 at memory end\n            bn_shift := freemem_ptr                       // set pointer to bytes\n            bn_shift_ptr := add(bn_shift, 0x20)           // get bn_shift pointer\n            mstore(0x40, add(mem_end, 0x20))              // update freemem pointer\n        }\n\n        // use identity for cheap copy if bits is multiple of 8.\n        if(bits % 8 == 0) {\n            // calculate the position of the first byte in the result.\n            uint bytes_pos = ((256-(((bn.bitlen-1)+bits) % 256))-1) / 8;\n            uint insize = (bn.bitlen / 8) + ((bn.bitlen % 8 != 0) ? 1 : 0);\n            assembly {\n              let in          := add(add(mload(bn), 0x20), div(sub(256, bit_position), 8))\n              let out         := add(bn_shift_ptr, bytes_pos)\n              let success     := staticcall(450, 0x4, in, insize, out, length)\n            }\n            r.val = bn_shift;\n            return r;\n        }\n\n\n        uint mask;\n        uint mask_shift = 0x100-bits;\n        uint msw;\n        uint msw_ptr;\n\n       assembly {\n           msw_ptr := add(mload(bn), 0x20)   \n       }\n        \n       // handle first word before loop if the shift adds any extra words.\n       // the loop would handle it if the bit shift doesn't wrap into the next word, \n       // so we check only for that condition.\n       if((bit_position+bits) > 256){\n           assembly {\n              msw := mload(msw_ptr)\n              mstore(bn_shift_ptr, shr(mask_shift, msw))\n              bn_shift_ptr := add(bn_shift_ptr, 0x20)\n           }\n       }\n        \n       // as a result of creating the empty array we just have to operate on the words in the original bn.\n       for(uint i=bn.val.length; i!=0; i-=0x20){                  // for each word:\n           assembly {\n               msw := mload(msw_ptr)                              // get most significant word\n               switch eq(i,0x20)                                  // if i==32:\n                   case 1 { mask := 0 }                           // handles msword: no mask needed.\n                   default { mask := mload(add(msw_ptr,0x20)) }   // else get mask (next word)\n               msw := shl(bits, msw)                              // left shift current msw by 'bits'\n               mask := shr(mask_shift, mask)                      // right shift next significant word by mask_shift\n               mstore(bn_shift_ptr, or(msw,mask))                 // store OR'd mask and shifted bits in-place\n               msw_ptr := add(msw_ptr, 0x20)\n               bn_shift_ptr := add(bn_shift_ptr, 0x20)\n           }\n       }\n\n       r.val = bn_shift;\n    }\n    // ***************** END PRIVATE HELPER FUNCTIONS ******************\n}\n"
    },
    "lib/solidity-cborutils/contracts/CBOR.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"lib/buffer/contracts/Buffer.sol\";\n\n/**\n* @dev A library for populating CBOR encoded payload in Solidity.\n*\n* https://datatracker.ietf.org/doc/html/rfc7049\n*\n* The library offers various write* and start* methods to encode values of different types.\n* The resulted buffer can be obtained with data() method.\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\n* in an invalid CBOR if start/write/end flow is violated.\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\n* except for nested start/end pairs.\n*/\n\nlibrary CBOR {\n    using Buffer for Buffer.buffer;\n\n    struct CBORBuffer {\n        Buffer.buffer buf;\n        uint256 depth;\n    }\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_TAG = 6;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\n\n    uint8 private constant CBOR_FALSE = 20;\n    uint8 private constant CBOR_TRUE = 21;\n    uint8 private constant CBOR_NULL = 22;\n    uint8 private constant CBOR_UNDEFINED = 23;\n\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\n        Buffer.init(cbor.buf, capacity);\n        cbor.depth = 0;\n        return cbor;\n    }\n\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\n        require(buf.depth == 0, \"Invalid CBOR\");\n        return buf.buf.buf;\n    }\n\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\n        writeBytes(buf, abi.encode(value));\n    }\n\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\n        if (value < 0) {\n            buf.buf.appendUint8(\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\n            );\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\n        } else {\n            writeUInt256(buf, uint256(value));\n        }\n    }\n\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\n    }\n\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\n        if(value >= 0) {\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\n        } else{\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\n        }\n    }\n\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\n        buf.buf.append(value);\n    }\n\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\n        buf.buf.append(bytes(value));\n    }\n\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\n    }\n\n    function writeNull(CBORBuffer memory buf) internal pure {\n        writeContentFree(buf, CBOR_NULL);\n    }\n\n    function writeUndefined(CBORBuffer memory buf) internal pure {\n        writeContentFree(buf, CBOR_UNDEFINED);\n    }\n\n    function startArray(CBORBuffer memory buf) internal pure {\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n        buf.depth += 1;\n    }\n\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\n    }\n\n    function startMap(CBORBuffer memory buf) internal pure {\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n        buf.depth += 1;\n    }\n\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\n    }\n\n    function endSequence(CBORBuffer memory buf) internal pure {\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n        buf.depth -= 1;\n    }\n\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\n        writeString(buf, key);\n        writeString(buf, value);\n    }\n\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\n        writeString(buf, key);\n        writeBytes(buf, value);\n    }\n\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\n        writeString(buf, key);\n        writeUInt256(buf, value);\n    }\n\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\n        writeString(buf, key);\n        writeInt256(buf, value);\n    }\n\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\n        writeString(buf, key);\n        writeUInt64(buf, value);\n    }\n\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\n        writeString(buf, key);\n        writeInt64(buf, value);\n    }\n\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\n        writeString(buf, key);\n        writeBool(buf, value);\n    }\n\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        writeNull(buf);\n    }\n\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        writeUndefined(buf);\n    }\n\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        startMap(buf);\n    }\n\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        startArray(buf);\n    }\n\n    function writeFixedNumeric(\n        CBORBuffer memory buf,\n        uint8 major,\n        uint64 value\n    ) private pure {\n        if (value <= 23) {\n            buf.buf.appendUint8(uint8((major << 5) | value));\n        } else if (value <= 0xFF) {\n            buf.buf.appendUint8(uint8((major << 5) | 24));\n            buf.buf.appendInt(value, 1);\n        } else if (value <= 0xFFFF) {\n            buf.buf.appendUint8(uint8((major << 5) | 25));\n            buf.buf.appendInt(value, 2);\n        } else if (value <= 0xFFFFFFFF) {\n            buf.buf.appendUint8(uint8((major << 5) | 26));\n            buf.buf.appendInt(value, 4);\n        } else {\n            buf.buf.appendUint8(uint8((major << 5) | 27));\n            buf.buf.appendInt(value, 8);\n        }\n    }\n\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\n        private\n        pure\n    {\n        buf.buf.appendUint8(uint8((major << 5) | 31));\n    }\n\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\n        private\n        pure\n    {\n        writeFixedNumeric(buf, major, length);\n    }\n\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\n    }\n}"
    },
    "lib/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "lib/solmate/src/utils/FixedPointMathLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\nlibrary FixedPointMathLib {\n    /*//////////////////////////////////////////////////////////////\n                    SIMPLIFIED FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\n\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\n    }\n\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\n    }\n\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    LOW LEVEL FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\n                revert(0, 0)\n            }\n\n            // Divide x * y by the denominator.\n            z := div(mul(x, y), denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\n                revert(0, 0)\n            }\n\n            // If x * y modulo the denominator is strictly greater than 0,\n            // 1 is added to round up the division of x * y by the denominator.\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\n        }\n    }\n\n    function rpow(\n        uint256 x,\n        uint256 n,\n        uint256 scalar\n    ) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := scalar\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store scalar in z for now.\n                    z := scalar\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, scalar)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, scalar)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, scalar)\n                    }\n                }\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let y := x // We start y at x, which will help us make our initial estimate.\n\n            z := 181 // The \"correct\" value is 1, but this saves a multiplication later.\n\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\n\n            // We check y >= 2^(k + 8) but shift right by k bits\n            // each branch to ensure that if x >= 256, then y >= 256.\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\n                y := shr(128, y)\n                z := shl(64, z)\n            }\n            if iszero(lt(y, 0x1000000000000000000)) {\n                y := shr(64, y)\n                z := shl(32, z)\n            }\n            if iszero(lt(y, 0x10000000000)) {\n                y := shr(32, y)\n                z := shl(16, z)\n            }\n            if iszero(lt(y, 0x1000000)) {\n                y := shr(16, y)\n                z := shl(8, z)\n            }\n\n            // Goal was to get z*z*y within a small factor of x. More iterations could\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\n\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\n\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\n\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\n\n            // There is no overflow risk here since y < 2^136 after the first branch above.\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\n\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // If x+1 is a perfect square, the Babylonian method cycles between\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\n            z := sub(z, lt(div(x, z), z))\n        }\n    }\n\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Mod x by y. Note this will return\n            // 0 instead of reverting if y is zero.\n            z := mod(x, y)\n        }\n    }\n\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Divide x by y. Note this will return\n            // 0 instead of reverting if y is zero.\n            r := div(x, y)\n        }\n    }\n\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Add 1 to x * y if x % y > 0. Note this will\n            // return 0 instead of reverting if y is zero.\n            z := add(gt(mod(x, y), 0), div(x, y))\n        }\n    }\n}\n"
    },
    "lib/solmate/src/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    uint256 private locked = 1;\n\n    modifier nonReentrant() virtual {\n        require(locked == 1, \"REENTRANCY\");\n\n        locked = 2;\n\n        _;\n\n        locked = 1;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1,
      "details": {
        "yul": false,
        "constantOptimizer": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x0000000000000031363833323139313032373532"
      }
    },
    "remappings": [
      "@ensdomains/buffer/=lib/filecoin-solidity/lib/buffer/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "@zondax/solidity-bignumber/=lib/solidity-BigNumber/",
      "ERC4626/=lib/ERC4626/src/",
      "buffer/=lib/buffer/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "fei-protocol/erc4626/=lib/ERC4626/src/",
      "fevmate/=lib/fevmate/contracts/",
      "filecoin-solidity/=lib/filecoin-solidity/",
      "forge-std/=lib/forge-std/src/",
      "solidity-BigNumber/=lib/solidity-BigNumber/src/",
      "solidity-bignumber/=lib/filecoin-solidity/lib/solidity-bignumber/src/",
      "solidity-cborutils/=lib/solidity-cborutils/contracts/",
      "solidity-cborutils/contracts/=lib/solidity-cborutils/contracts/",
      "solmate/=lib/solmate/src/"
    ]
  }
}