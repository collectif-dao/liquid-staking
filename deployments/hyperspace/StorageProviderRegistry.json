{
  "address": "0x80fE18b436314b7C8b68D4a981e9e9D6ad3d2D3c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "errorCode",
          "type": "int256"
        }
      ],
      "name": "ActorError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ActorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailToCallActor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailToCallActor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "CommonTypes.FilActorId",
          "name": "actorId",
          "type": "uint64"
        }
      ],
      "name": "InvalidActorID",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "InvalidCodec",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidResponseLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "CollateralAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "LiquidStakingPoolRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "name": "StorageProviderAccruedRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocationLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dailyAllocation",
          "type": "uint256"
        }
      ],
      "name": "StorageProviderAllocationLimitRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocationLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dailyAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayment",
          "type": "uint256"
        }
      ],
      "name": "StorageProviderAllocationLimitUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usedAllocation",
          "type": "uint256"
        }
      ],
      "name": "StorageProviderAllocationUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        }
      ],
      "name": "StorageProviderBeneficiaryAddressAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiaryAddress",
          "type": "address"
        }
      ],
      "name": "StorageProviderBeneficiaryAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        }
      ],
      "name": "StorageProviderDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "int64",
          "name": "lastEpoch",
          "type": "int64"
        }
      ],
      "name": "StorageProviderLastEpochUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "miner",
          "type": "uint64"
        }
      ],
      "name": "StorageProviderMinerAddressUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "restakingRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "restakingAddress",
          "type": "address"
        }
      ],
      "name": "StorageProviderMinerRestakingRatioUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "minerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocationLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dailyAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int64",
          "name": "lastEpoch",
          "type": "int64"
        }
      ],
      "name": "StorageProviderOnboarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "owner",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "minerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "targetPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocationLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dailyAllocation",
          "type": "uint256"
        }
      ],
      "name": "StorageProviderRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ownerId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pledge",
          "type": "uint256"
        }
      ],
      "name": "StorageProviderRepaidPledge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAllocation",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxAllocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        }
      ],
      "name": "acceptBeneficiaryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "allocationRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocationLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dailyAllocation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "allocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocationLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usedAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dailyAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accruedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repaidPledge",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "changeBeneficiaryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IStorageProviderCollateralClient",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "dailyUsages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        }
      ],
      "name": "deactivateStorageProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        }
      ],
      "name": "getStorageProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "int64",
          "name": "",
          "type": "int64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_repaidPledge",
          "type": "uint256"
        }
      ],
      "name": "increasePledgeRepayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_accuredRewards",
          "type": "uint256"
        }
      ],
      "name": "increaseRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_allocated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "increaseUsedAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxAllocation",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "isActivePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        }
      ],
      "name": "isActiveProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_minerId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_allocationLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dailyAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_repayment",
          "type": "uint256"
        },
        {
          "internalType": "int64",
          "name": "_lastEpoch",
          "type": "int64"
        }
      ],
      "name": "onboardStorageProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_minerId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_targetPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allocationLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dailyAllocation",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "registerPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocationLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dailyAllocation",
          "type": "uint256"
        }
      ],
      "name": "requestAllocationLimitUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "restakings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "restakingRatio",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "restakingAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "sectorSizes",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "setCollateralAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_minerId",
          "type": "uint64"
        }
      ],
      "name": "setMinerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_restakingRatio",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_restakingAddress",
          "type": "address"
        }
      ],
      "name": "setRestaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "storageProviders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "onboarded",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "targetPool",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "minerId",
          "type": "uint64"
        },
        {
          "internalType": "int64",
          "name": "lastEpoch",
          "type": "int64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_ownerId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_allocationLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dailyAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_repaymentAmount",
          "type": "uint256"
        }
      ],
      "name": "updateAllocationLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        }
      ],
      "name": "updateMaxAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "f60d41c239028915942e19e20fb1bf4f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"errorCode\",\"type\":\"int256\"}],\"name\":\"ActorError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ActorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailToCallActor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailToCallActor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"CommonTypes.FilActorId\",\"name\":\"actorId\",\"type\":\"uint64\"}],\"name\":\"InvalidActorID\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"InvalidCodec\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidResponseLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"CollateralAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LiquidStakingPoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"StorageProviderAccruedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyAllocation\",\"type\":\"uint256\"}],\"name\":\"StorageProviderAllocationLimitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayment\",\"type\":\"uint256\"}],\"name\":\"StorageProviderAllocationLimitUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usedAllocation\",\"type\":\"uint256\"}],\"name\":\"StorageProviderAllocationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"}],\"name\":\"StorageProviderBeneficiaryAddressAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"StorageProviderBeneficiaryAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"}],\"name\":\"StorageProviderDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"lastEpoch\",\"type\":\"int64\"}],\"name\":\"StorageProviderLastEpochUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"miner\",\"type\":\"uint64\"}],\"name\":\"StorageProviderMinerAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"restakingRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"restakingAddress\",\"type\":\"address\"}],\"name\":\"StorageProviderMinerRestakingRatioUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"minerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"lastEpoch\",\"type\":\"int64\"}],\"name\":\"StorageProviderOnboarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"owner\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"minerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyAllocation\",\"type\":\"uint256\"}],\"name\":\"StorageProviderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ownerId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pledge\",\"type\":\"uint256\"}],\"name\":\"StorageProviderRepaidPledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAllocation\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"}],\"name\":\"acceptBeneficiaryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"allocationRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocationLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyAllocation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocationLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaidPledge\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeBeneficiaryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IStorageProviderCollateralClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"dailyUsages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"}],\"name\":\"deactivateStorageProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"}],\"name\":\"getStorageProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_repaidPledge\",\"type\":\"uint256\"}],\"name\":\"increasePledgeRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_accuredRewards\",\"type\":\"uint256\"}],\"name\":\"increaseRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_allocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"increaseUsedAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAllocation\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isActivePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"}],\"name\":\"isActiveProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_minerId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_allocationLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayment\",\"type\":\"uint256\"},{\"internalType\":\"int64\",\"name\":\"_lastEpoch\",\"type\":\"int64\"}],\"name\":\"onboardStorageProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_minerId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_targetPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocationLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyAllocation\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocationLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyAllocation\",\"type\":\"uint256\"}],\"name\":\"requestAllocationLimitUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"restakings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"restakingRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"restakingAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"sectorSizes\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"setCollateralAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_minerId\",\"type\":\"uint64\"}],\"name\":\"setMinerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_restakingRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_restakingAddress\",\"type\":\"address\"}],\"name\":\"setRestaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"storageProviders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onboarded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetPool\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"minerId\",\"type\":\"uint64\"},{\"internalType\":\"int64\",\"name\":\"lastEpoch\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_ownerId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_allocationLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repaymentAmount\",\"type\":\"uint256\"}],\"name\":\"updateAllocationLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"updateMaxAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptBeneficiaryAddress(uint64)\":{\"details\":\"Only triggered by registry admin\",\"params\":{\"_ownerId\":\"Storage Provider owner ID\"}},\"deactivateStorageProvider(uint64)\":{\"details\":\"Only triggered by registry admin\",\"params\":{\"_ownerId\":\"Storage Provider owner ID\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increasePledgeRepayment(uint64,uint256)\":{\"params\":{\"_ownerId\":\"Storage Provider owner ID\",\"_repaidPledge\":\"Withdrawn initial pledge after sector termination\"}},\"increaseRewards(uint64,uint256)\":{\"params\":{\"_accuredRewards\":\"Withdrawn rewards from SP's miner actor\",\"_ownerId\":\"Storage Provider owner ID\"}},\"increaseUsedAllocation(uint64,uint256,uint256)\":{\"params\":{\"_allocated\":\"FIL amount that is going to be pledged for Storage Provider\",\"_ownerId\":\"Storage Provider owner ID\",\"_timestamp\":\"Transaction timestamp\"}},\"initialize(uint256)\":{\"details\":\"Contract initializer function.\",\"params\":{\"_maxAllocation\":\"Number of maximum FIL allocated to a single storage provider\"}},\"onboardStorageProvider(uint64,uint256,uint256,uint256,int64)\":{\"details\":\"Only triggered by registry admin\",\"params\":{\"_allocationLimit\":\"FIL allocation for storage provider\",\"_dailyAllocation\":\"Daily FIL allocation for storage provider\",\"_lastEpoch\":\"Last epoch for FIL allocation utilization\",\"_minerId\":\"Storage Provider miner ID in Filecoin network\",\"_repayment\":\"FIL repayment for storage provider\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"register(uint64,address,uint256,uint256)\":{\"details\":\"Only triggered by Storage Provider owner\",\"params\":{\"_allocationLimit\":\"FIL allocation for storage provider\",\"_dailyAllocation\":\"Daily FIL allocation for storage provider\",\"_minerId\":\"Storage Provider miner ID in Filecoin network\",\"_targetPool\":\"Target liquid staking strategy\"}},\"registerPool(address)\":{\"details\":\"Only triggered by registry admin\",\"params\":{\"_pool\":\"Address of pool smart contract\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"requestAllocationLimitUpdate(uint256,uint256)\":{\"details\":\"Only triggered by Storage Provider owner\",\"params\":{\"_allocationLimit\":\"New FIL allocation for storage provider\",\"_dailyAllocation\":\"New daily FIL allocation for storage provider\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setCollateralAddress(address)\":{\"details\":\"Only triggered by registry admin\",\"params\":{\"_collateral\":\"StorageProviderCollateral smart contract address\"}},\"setMinerAddress(uint64,uint64)\":{\"details\":\"Only triggered by registry admin\",\"params\":{\"_minerId\":\"Storage Provider new miner ID\",\"_ownerId\":\"Storage Provider owner ID\"}},\"setRestaking(uint256,address)\":{\"details\":\"Only triggered by Storage Provider\",\"params\":{\"_restakingAddress\":\"Restaking address (f4 address) for Storage Provider\",\"_restakingRatio\":\"Restaking ratio for Storage Provider\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateAllocationLimit(uint64,uint256,uint256,uint256)\":{\"details\":\"Only triggered by registry admin\",\"params\":{\"_allocationLimit\":\"New FIL allocation for storage provider\",\"_dailyAllocation\":\"New daily FIL allocation for storage provider\",\"_ownerId\":\"Storage provider owner ID\",\"_repaymentAmount\":\"New FIL repayment amount for storage provider\"}},\"updateMaxAllocation(uint256)\":{\"params\":{\"allocation\":\"New max allocation per SP\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"Storage Provider Registry contract allows storage providers to register in liquid staking protocol and ask for a FIL allocation. Once Storage Provider is registered and signaled their desired FIL allocation it needs to transfer\",\"version\":1},\"userdoc\":{\"errors\":{\"ActorError(int256)\":[{\"notice\":\"the called actor returned an error as part of its expected behaviour\"}],\"ActorNotFound()\":[{\"notice\":\"the actor is not found\"}],\"FailToCallActor()\":[{\"notice\":\"an error happened trying to call the actor\"},{\"notice\":\"an error happened trying to call the actor\"}],\"InvalidActorID(uint64)\":[{\"notice\":\"the provided actor id is not valid\"}],\"InvalidCodec(uint64)\":[{\"notice\":\"the codec received is not valid\"}],\"InvalidResponseLength()\":[{\"notice\":\"the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\"}],\"NotEnoughBalance(uint256,uint256)\":[{\"notice\":\"the smart contract has no enough balance to transfer\"}]},\"kind\":\"user\",\"methods\":{\"acceptBeneficiaryAddress(uint64)\":{\"notice\":\"Accept beneficiary address transfer and activate FIL allocation\"},\"allocations(uint64)\":{\"notice\":\"Return allocation information for a storage provider\"},\"changeBeneficiaryAddress()\":{\"notice\":\"Transfer beneficiary address of a miner to the target pool\"},\"deactivateStorageProvider(uint64)\":{\"notice\":\"Deactive storage provider with ID `_ownerId`\"},\"getStorageProvider(uint64)\":{\"notice\":\"Return Storage Provider information with `_ownerId`\"},\"increasePledgeRepayment(uint64,uint256)\":{\"notice\":\"Increase repaid pledge by Storage Provider\"},\"increaseRewards(uint64,uint256)\":{\"notice\":\"Increase collected rewards by Storage Provider\"},\"increaseUsedAllocation(uint64,uint256,uint256)\":{\"notice\":\"Increase used allocation for Storage Provider\"},\"isActivePool(address)\":{\"notice\":\"Return a boolean flag whether `_pool` is active or not\"},\"isActiveProvider(uint64)\":{\"notice\":\"Return a boolean flag of Storage Provider activity\"},\"onboardStorageProvider(uint64,uint256,uint256,uint256,int64)\":{\"notice\":\"Onboard storage provider with `_minerId`, desired `_allocationLimit`, `_repayment` amount\"},\"register(uint64,address,uint256,uint256)\":{\"notice\":\"Register storage provider with `_minerId`, desired `_allocationLimit` and `_targetPool`\"},\"registerPool(address)\":{\"notice\":\"Register new liquid staking pool\"},\"requestAllocationLimitUpdate(uint256,uint256)\":{\"notice\":\"Request storage provider's FIL allocation update with `_allocationLimit`\"},\"restakings(uint64)\":{\"notice\":\"Return a restaking information for a storage provider\"},\"setCollateralAddress(address)\":{\"notice\":\"Update StorageProviderCollateral smart contract\"},\"setMinerAddress(uint64,uint64)\":{\"notice\":\"Update storage provider miner ID with `_minerId`\"},\"setRestaking(uint256,address)\":{\"notice\":\"Update storage provider's restaking ratio\"},\"updateAllocationLimit(uint64,uint256,uint256,uint256)\":{\"notice\":\"Update storage provider FIL allocation with `_allocationLimit`\"},\"updateMaxAllocation(uint256)\":{\"notice\":\"Updates maximum allocation amount for SP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StorageProviderRegistry.sol\":\"StorageProviderRegistry\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363833353438333534383038\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":0},\"remappings\":[\":@ensdomains/buffer/=lib/filecoin-solidity/lib/buffer/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@oz/contracts/=lib/openzeppelin-contracts/contracts/\",\":@zondax/solidity-bignumber/=lib/solidity-BigNumber/\",\":ERC4626/=lib/ERC4626/src/\",\":buffer/=lib/buffer/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":fei-protocol/erc4626/=lib/ERC4626/src/\",\":fevmate/=lib/fevmate/contracts/\",\":filecoin-solidity/=lib/filecoin-solidity/\",\":forge-std/=lib/forge-std/src/\",\":solidity-BigNumber/=lib/solidity-BigNumber/src/\",\":solidity-bignumber/=lib/filecoin-solidity/lib/solidity-bignumber/src/\",\":solidity-cborutils/=lib/solidity-cborutils/contracts/\",\":solidity-cborutils/contracts/=lib/solidity-cborutils/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/StorageProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {MinerAPI, MinerTypes, CommonTypes} from \\\"lib/filecoin-solidity/contracts/v0.8/MinerAPI.sol\\\";\\nimport {PrecompilesAPI} from \\\"lib/filecoin-solidity/contracts/v0.8/PrecompilesAPI.sol\\\";\\nimport {StorageProviderTypes} from \\\"./types/StorageProviderTypes.sol\\\";\\nimport {FilAddress} from \\\"lib/fevmate/contracts/utils/FilAddress.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\\\";\\nimport {BokkyPooBahsDateTimeLibrary} from \\\"./libraries/DateTimeLibraryCompressed.sol\\\";\\nimport {IStorageProviderRegistry} from \\\"./interfaces/IStorageProviderRegistry.sol\\\";\\nimport {ILiquidStakingClient} from \\\"./interfaces/ILiquidStakingClient.sol\\\";\\nimport {IStorageProviderCollateralClient} from \\\"./interfaces/IStorageProviderCollateralClient.sol\\\";\\nimport {Initializable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/**\\n * @title Storage Provider Registry contract allows storage providers to register\\n * in liquid staking protocol and ask for a FIL allocation.\\n *\\n * Once Storage Provider is registered and signaled their desired FIL allocation\\n * it needs to transfer\\n *\\n */\\ncontract StorageProviderRegistry is\\n\\tInitializable,\\n\\tIStorageProviderRegistry,\\n\\tAccessControlUpgradeable,\\n\\tReentrancyGuardUpgradeable,\\n\\tUUPSUpgradeable\\n{\\n\\tusing FilAddress for address;\\n\\n\\t// Mapping of storage provider IDs to their storage provider info\\n\\tmapping(uint64 => StorageProviderTypes.StorageProvider) public storageProviders;\\n\\n\\t// Mapping of storage provider IDs to their restaking info\\n\\tmapping(uint64 => StorageProviderTypes.SPAllocation) public allocations;\\n\\n\\t// Mapping of storage provider IDs to their restaking info\\n\\tmapping(uint64 => StorageProviderTypes.SPRestaking) public restakings;\\n\\n\\t// Mapping of storage provider IDs to their allocation update requests\\n\\tmapping(uint64 => StorageProviderTypes.AllocationRequest) public allocationRequests;\\n\\n\\t// Mapping of storage provider IDs to their sector sizes\\n\\tmapping(uint64 => uint64) public sectorSizes;\\n\\n\\t// Mapping of storage providers daily allocation usage to date hashes\\n\\tmapping(bytes32 => uint256) public dailyUsages;\\n\\n\\t// Mapping of liquid staking pools to it addresses\\n\\tmapping(address => bool) public pools;\\n\\n\\tbytes32 private constant REGISTRY_ADMIN = keccak256(\\\"REGISTRY_ADMIN\\\");\\n\\n\\tuint256 public maxAllocation;\\n\\n\\tIStorageProviderCollateralClient public collateral;\\n\\n\\tmodifier activeStorageProvider(uint64 _ownerId) {\\n\\t\\trequire(storageProviders[_ownerId].active, \\\"INACTIVE_STORAGE_PROVIDER\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyAdmin() {\\n\\t\\trequire(hasRole(REGISTRY_ADMIN, msg.sender), \\\"INVALID_ACCESS\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Contract initializer function.\\n\\t * @param _maxAllocation Number of maximum FIL allocated to a single storage provider\\n\\t */\\n\\tfunction initialize(uint256 _maxAllocation) public initializer {\\n\\t\\t__AccessControl_init();\\n\\t\\t__ReentrancyGuard_init();\\n\\t\\t__UUPSUpgradeable_init();\\n\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\t_setRoleAdmin(REGISTRY_ADMIN, DEFAULT_ADMIN_ROLE);\\n\\t\\tgrantRole(REGISTRY_ADMIN, msg.sender);\\n\\t\\tmaxAllocation = _maxAllocation;\\n\\t}\\n\\n\\tstruct RegisterLocalVars {\\n\\t\\taddress ownerAddr;\\n\\t\\tbool isID;\\n\\t\\tuint64 msgSenderId;\\n\\t\\tuint64 ownerId;\\n\\t\\tuint64 sectorSize;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Register storage provider with `_minerId`, desired `_allocationLimit` and `_targetPool`\\n\\t * @param _minerId Storage Provider miner ID in Filecoin network\\n\\t * @param _targetPool Target liquid staking strategy\\n\\t * @param _allocationLimit FIL allocation for storage provider\\n\\t * @param _dailyAllocation Daily FIL allocation for storage provider\\n\\t * @dev Only triggered by Storage Provider owner\\n\\t */\\n\\tfunction register(\\n\\t\\tuint64 _minerId,\\n\\t\\taddress _targetPool,\\n\\t\\tuint256 _allocationLimit,\\n\\t\\tuint256 _dailyAllocation\\n\\t) public virtual override nonReentrant {\\n\\t\\trequire(_allocationLimit > 0 && _allocationLimit <= maxAllocation, \\\"INCORRECT_ALLOCATION\\\");\\n\\t\\trequire(_dailyAllocation > 0 && _dailyAllocation <= _allocationLimit, \\\"INCORRECT_DAILY_ALLOCATION\\\");\\n\\t\\trequire(pools[_targetPool], \\\"INVALID_TARGET_POOL\\\");\\n\\n\\t\\tRegisterLocalVars memory vars;\\n\\n\\t\\tvars.ownerAddr = msg.sender.normalize();\\n\\t\\t(vars.isID, vars.msgSenderId) = vars.ownerAddr.getActorID();\\n\\t\\trequire(vars.isID, \\\"INACTIVE_ACTOR_ID\\\");\\n\\n\\t\\tCommonTypes.FilActorId actorId = CommonTypes.FilActorId.wrap(_minerId);\\n\\n\\t\\tMinerTypes.GetOwnerReturn memory ownerReturn = MinerAPI.getOwner(actorId);\\n\\t\\trequire(keccak256(ownerReturn.proposed.data) == keccak256(bytes(\\\"\\\")), \\\"PROPOSED_NEW_OWNER\\\");\\n\\n\\t\\tvars.ownerId = PrecompilesAPI.resolveAddress(ownerReturn.owner);\\n\\t\\trequire(vars.ownerId == vars.msgSenderId, \\\"INVALID_MINER_OWNERSHIP\\\");\\n\\t\\trequire(!storageProviders[vars.ownerId].onboarded, \\\"ALREADY_REGISTERED\\\");\\n\\n\\t\\tStorageProviderTypes.StorageProvider storage storageProvider = storageProviders[vars.ownerId];\\n\\t\\tstorageProvider.minerId = _minerId;\\n\\t\\tstorageProvider.targetPool = _targetPool;\\n\\n\\t\\tStorageProviderTypes.SPAllocation storage spAllocation = allocations[vars.ownerId];\\n\\t\\tspAllocation.allocationLimit = _allocationLimit;\\n\\t\\tspAllocation.dailyAllocation = _dailyAllocation;\\n\\n\\t\\tvars.sectorSize = MinerAPI.getSectorSize(actorId);\\n\\t\\tsectorSizes[vars.ownerId] = vars.sectorSize;\\n\\n\\t\\tcollateral.updateCollateralRequirements(vars.ownerId, 0);\\n\\t\\tILiquidStakingClient(_targetPool).updateProfitShare(vars.ownerId, 0);\\n\\n\\t\\temit StorageProviderRegistered(\\n\\t\\t\\townerReturn.owner.data,\\n\\t\\t\\tvars.ownerId,\\n\\t\\t\\t_minerId,\\n\\t\\t\\t_targetPool,\\n\\t\\t\\t_allocationLimit,\\n\\t\\t\\t_dailyAllocation\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Onboard storage provider with `_minerId`, desired `_allocationLimit`, `_repayment` amount\\n\\t * @param _minerId Storage Provider miner ID in Filecoin network\\n\\t * @param _allocationLimit FIL allocation for storage provider\\n\\t * @param _dailyAllocation Daily FIL allocation for storage provider\\n\\t * @param _repayment FIL repayment for storage provider\\n\\t * @param _lastEpoch Last epoch for FIL allocation utilization\\n\\t * @dev Only triggered by registry admin\\n\\t */\\n\\tfunction onboardStorageProvider(\\n\\t\\tuint64 _minerId,\\n\\t\\tuint256 _allocationLimit,\\n\\t\\tuint256 _dailyAllocation,\\n\\t\\tuint256 _repayment,\\n\\t\\tint64 _lastEpoch\\n\\t) public virtual onlyAdmin nonReentrant {\\n\\t\\trequire(_allocationLimit > 0 && _allocationLimit <= maxAllocation, \\\"INCORRECT_ALLOCATION\\\");\\n\\t\\trequire(_dailyAllocation > 0 && _dailyAllocation <= _allocationLimit, \\\"INCORRECT_DAILY_ALLOCATION\\\");\\n\\t\\trequire(_repayment > _allocationLimit, \\\"INCORRECT_REPAYMENT\\\");\\n\\n\\t\\tCommonTypes.FilActorId actorId = CommonTypes.FilActorId.wrap(_minerId);\\n\\n\\t\\tMinerTypes.GetOwnerReturn memory ownerReturn = MinerAPI.getOwner(actorId);\\n\\t\\trequire(keccak256(bytes(\\\"\\\")) == keccak256(ownerReturn.proposed.data), \\\"PROPOSED_NEW_OWNER\\\");\\n\\n\\t\\tuint64 ownerId = PrecompilesAPI.resolveAddress(ownerReturn.owner);\\n\\n\\t\\tStorageProviderTypes.StorageProvider storage storageProvider = storageProviders[ownerId];\\n\\t\\tStorageProviderTypes.SPAllocation storage spAllocation = allocations[ownerId];\\n\\t\\trequire(!storageProviders[ownerId].onboarded, \\\"ALREADY_REGISTERED\\\");\\n\\n\\t\\tstorageProvider.onboarded = true;\\n\\t\\tstorageProvider.lastEpoch = _lastEpoch;\\n\\n\\t\\tspAllocation.repayment = _repayment;\\n\\t\\tspAllocation.allocationLimit = _allocationLimit;\\n\\t\\tspAllocation.dailyAllocation = _dailyAllocation;\\n\\n\\t\\temit StorageProviderOnboarded(ownerId, _minerId, _allocationLimit, _dailyAllocation, _repayment, _lastEpoch);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfer beneficiary address of a miner to the target pool\\n\\t */\\n\\tfunction changeBeneficiaryAddress() public virtual override nonReentrant {\\n\\t\\taddress ownerAddr = msg.sender.normalize();\\n\\t\\t(bool isID, uint64 ownerId) = ownerAddr.getActorID();\\n\\t\\trequire(isID, \\\"INACTIVE_ACTOR_ID\\\");\\n\\n\\t\\tStorageProviderTypes.StorageProvider memory storageProvider = storageProviders[ownerId];\\n\\t\\trequire(storageProvider.onboarded, \\\"NON_ONBOARDED_SP\\\");\\n\\n\\t\\tILiquidStakingClient(storageProviders[ownerId].targetPool).forwardChangeBeneficiary(\\n\\t\\t\\tstorageProvider.minerId,\\n\\t\\t\\tstorageProvider.targetPool,\\n\\t\\t\\tallocations[ownerId].repayment,\\n\\t\\t\\tstorageProvider.lastEpoch\\n\\t\\t);\\n\\n\\t\\temit StorageProviderBeneficiaryAddressUpdated(storageProvider.targetPool);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Accept beneficiary address transfer and activate FIL allocation\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @dev Only triggered by registry admin\\n\\t */\\n\\tfunction acceptBeneficiaryAddress(uint64 _ownerId) public virtual override onlyAdmin nonReentrant {\\n\\t\\tStorageProviderTypes.StorageProvider memory storageProvider = storageProviders[_ownerId];\\n\\t\\trequire(storageProvider.onboarded, \\\"NON_ONBOARDED_SP\\\");\\n\\n\\t\\tILiquidStakingClient(storageProviders[_ownerId].targetPool).forwardChangeBeneficiary(\\n\\t\\t\\tstorageProvider.minerId,\\n\\t\\t\\tstorageProvider.targetPool,\\n\\t\\t\\tallocations[_ownerId].repayment,\\n\\t\\t\\tstorageProvider.lastEpoch\\n\\t\\t);\\n\\n\\t\\tstorageProviders[_ownerId].active = true;\\n\\n\\t\\temit StorageProviderBeneficiaryAddressAccepted(_ownerId);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Deactive storage provider with ID `_ownerId`\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @dev Only triggered by registry admin\\n\\t */\\n\\tfunction deactivateStorageProvider(uint64 _ownerId) public onlyAdmin activeStorageProvider(_ownerId) {\\n\\t\\tstorageProviders[_ownerId].active = false;\\n\\n\\t\\temit StorageProviderDeactivated(_ownerId);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update storage provider miner ID with `_minerId`\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _minerId Storage Provider new miner ID\\n\\t * @dev Only triggered by registry admin\\n\\t */\\n\\tfunction setMinerAddress(\\n\\t\\tuint64 _ownerId,\\n\\t\\tuint64 _minerId\\n\\t) public virtual onlyAdmin activeStorageProvider(_ownerId) {\\n\\t\\tuint64 prevMiner = storageProviders[_ownerId].minerId;\\n\\t\\trequire(prevMiner != _minerId, \\\"SAME_MINER\\\");\\n\\n\\t\\tCommonTypes.FilActorId actorId = CommonTypes.FilActorId.wrap(_minerId);\\n\\n\\t\\tMinerTypes.GetOwnerReturn memory ownerReturn = MinerAPI.getOwner(actorId);\\n\\t\\trequire(keccak256(ownerReturn.proposed.data) == keccak256(bytes(\\\"\\\")), \\\"PROPOSED_NEW_OWNER\\\");\\n\\n\\t\\tuint64 ownerId = PrecompilesAPI.resolveAddress(ownerReturn.owner);\\n\\t\\trequire(ownerId == _ownerId, \\\"INVALID_MINER_OWNERSHIP\\\");\\n\\n\\t\\tstorageProviders[_ownerId].minerId = _minerId;\\n\\n\\t\\temit StorageProviderMinerAddressUpdate(_ownerId, _minerId);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Request storage provider's FIL allocation update with `_allocationLimit`\\n\\t * @param _allocationLimit New FIL allocation for storage provider\\n\\t * @param _dailyAllocation New daily FIL allocation for storage provider\\n\\t * @dev Only triggered by Storage Provider owner\\n\\t */\\n\\tfunction requestAllocationLimitUpdate(uint256 _allocationLimit, uint256 _dailyAllocation) public virtual override {\\n\\t\\trequire(_allocationLimit > 0 && _allocationLimit <= maxAllocation, \\\"INCORRECT_ALLOCATION\\\");\\n\\t\\trequire(_dailyAllocation > 0 && _dailyAllocation <= _allocationLimit, \\\"INCORRECT_DAILY_ALLOCATION\\\");\\n\\t\\taddress ownerAddr = msg.sender.normalize();\\n\\t\\t(bool isID, uint64 ownerId) = ownerAddr.getActorID();\\n\\t\\trequire(isID, \\\"INACTIVE_ACTOR_ID\\\");\\n\\n\\t\\tStorageProviderTypes.StorageProvider memory storageProvider = storageProviders[ownerId];\\n\\t\\trequire(storageProvider.active, \\\"INACTIVE_STORAGE_PROVIDER\\\");\\n\\n\\t\\tStorageProviderTypes.SPAllocation memory spAllocation = allocations[ownerId];\\n\\t\\trequire(\\n\\t\\t\\tspAllocation.allocationLimit != _allocationLimit || spAllocation.dailyAllocation != _dailyAllocation,\\n\\t\\t\\t\\\"SAME_ALLOCATION_LIMIT\\\"\\n\\t\\t);\\n\\t\\trequire(_allocationLimit <= maxAllocation, \\\"ALLOCATION_OVERFLOW\\\");\\n\\n\\t\\tStorageProviderTypes.AllocationRequest storage allocationRequest = allocationRequests[ownerId];\\n\\t\\tallocationRequest.allocationLimit = _allocationLimit;\\n\\t\\tallocationRequest.dailyAllocation = _dailyAllocation;\\n\\n\\t\\temit StorageProviderAllocationLimitRequest(ownerId, _allocationLimit, _dailyAllocation);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update storage provider FIL allocation with `_allocationLimit`\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _allocationLimit New FIL allocation for storage provider\\n\\t * @param _dailyAllocation New daily FIL allocation for storage provider\\n\\t * @param _repaymentAmount New FIL repayment amount for storage provider\\n\\t * @dev Only triggered by registry admin\\n\\t */\\n\\tfunction updateAllocationLimit(\\n\\t\\tuint64 _ownerId,\\n\\t\\tuint256 _allocationLimit,\\n\\t\\tuint256 _dailyAllocation,\\n\\t\\tuint256 _repaymentAmount\\n\\t) public virtual override onlyAdmin activeStorageProvider(_ownerId) nonReentrant {\\n\\t\\trequire(_allocationLimit > 0 && _allocationLimit <= maxAllocation, \\\"INCORRECT_ALLOCATION\\\");\\n\\t\\trequire(_dailyAllocation > 0 && _dailyAllocation <= _allocationLimit, \\\"INCORRECT_DAILY_ALLOCATION\\\");\\n\\t\\trequire(_repaymentAmount > _allocationLimit, \\\"INCORRECT_REPAYMENT\\\");\\n\\n\\t\\tStorageProviderTypes.AllocationRequest memory allocationRequest = allocationRequests[_ownerId];\\n\\n\\t\\tif (allocationRequest.allocationLimit > 0) {\\n\\t\\t\\t// If SP requested allocation update should fulfil their request first\\n\\t\\t\\trequire(allocationRequest.allocationLimit == _allocationLimit, \\\"INVALID_ALLOCATION\\\");\\n\\t\\t\\trequire(allocationRequest.dailyAllocation == _dailyAllocation, \\\"INVALID_DAILY_ALLOCATION\\\");\\n\\t\\t}\\n\\n\\t\\tStorageProviderTypes.StorageProvider memory storageProvider = storageProviders[_ownerId];\\n\\n\\t\\tILiquidStakingClient(storageProviders[_ownerId].targetPool).forwardChangeBeneficiary(\\n\\t\\t\\tstorageProvider.minerId,\\n\\t\\t\\tstorageProvider.targetPool,\\n\\t\\t\\t_repaymentAmount,\\n\\t\\t\\tstorageProvider.lastEpoch\\n\\t\\t);\\n\\n\\t\\tStorageProviderTypes.SPAllocation storage spAllocation = allocations[_ownerId];\\n\\t\\tspAllocation.allocationLimit = _allocationLimit;\\n\\t\\tspAllocation.dailyAllocation = _dailyAllocation;\\n\\t\\tspAllocation.repayment = _repaymentAmount;\\n\\n\\t\\tdelete allocationRequests[_ownerId];\\n\\n\\t\\temit StorageProviderAllocationLimitUpdate(_ownerId, _allocationLimit, _dailyAllocation, _repaymentAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update storage provider's restaking ratio\\n\\t * @param _restakingRatio Restaking ratio for Storage Provider\\n\\t * @param _restakingAddress Restaking address (f4 address) for Storage Provider\\n\\t * @dev Only triggered by Storage Provider\\n\\t */\\n\\tfunction setRestaking(uint256 _restakingRatio, address _restakingAddress) public virtual override {\\n\\t\\tuint64 ownerId = PrecompilesAPI.resolveEthAddress(msg.sender);\\n\\n\\t\\trequire(_restakingRatio <= 10000, \\\"INVALID_RESTAKING_RATIO\\\");\\n\\t\\trequire(_restakingAddress != address(0), \\\"INVALID_ADDRESS\\\");\\n\\n\\t\\tStorageProviderTypes.SPRestaking storage restaking = restakings[ownerId];\\n\\t\\trestaking.restakingRatio = _restakingRatio;\\n\\t\\trestaking.restakingAddress = _restakingAddress;\\n\\n\\t\\temit StorageProviderMinerRestakingRatioUpdate(ownerId, _restakingRatio, _restakingAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return Storage Provider information with `_ownerId`\\n\\t */\\n\\tfunction getStorageProvider(uint64 _ownerId) public view returns (bool, address, uint64, int64) {\\n\\t\\tStorageProviderTypes.StorageProvider memory storageProvider = storageProviders[_ownerId];\\n\\t\\treturn (storageProvider.active, storageProvider.targetPool, storageProvider.minerId, storageProvider.lastEpoch);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return a boolean flag of Storage Provider activity\\n\\t */\\n\\tfunction isActiveProvider(uint64 _ownerId) external view returns (bool status) {\\n\\t\\tstatus = storageProviders[_ownerId].active;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Increase collected rewards by Storage Provider\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _accuredRewards Withdrawn rewards from SP's miner actor\\n\\t */\\n\\tfunction increaseRewards(uint64 _ownerId, uint256 _accuredRewards) external {\\n\\t\\trequire(pools[msg.sender], \\\"INVALID_ACCESS\\\");\\n\\n\\t\\tStorageProviderTypes.SPAllocation storage spAllocation = allocations[_ownerId];\\n\\t\\tspAllocation.accruedRewards = spAllocation.accruedRewards + _accuredRewards;\\n\\n\\t\\temit StorageProviderAccruedRewards(_ownerId, _accuredRewards);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Increase repaid pledge by Storage Provider\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _repaidPledge Withdrawn initial pledge after sector termination\\n\\t */\\n\\tfunction increasePledgeRepayment(uint64 _ownerId, uint256 _repaidPledge) external {\\n\\t\\trequire(pools[msg.sender], \\\"INVALID_ACCESS\\\");\\n\\n\\t\\tStorageProviderTypes.SPAllocation storage spAllocation = allocations[_ownerId];\\n\\t\\tspAllocation.repaidPledge = spAllocation.repaidPledge + _repaidPledge;\\n\\t\\trequire(spAllocation.repaidPledge <= spAllocation.usedAllocation, \\\"PLEDGE_REPAYMENT_OVERFLOW\\\");\\n\\n\\t\\temit StorageProviderRepaidPledge(_ownerId, _repaidPledge);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Increase used allocation for Storage Provider\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\\n\\t * @param _timestamp Transaction timestamp\\n\\t */\\n\\tfunction increaseUsedAllocation(uint64 _ownerId, uint256 _allocated, uint256 _timestamp) external {\\n\\t\\trequire(msg.sender == address(collateral), \\\"INVALID_ACCESS\\\");\\n\\n\\t\\t(uint year, uint month, uint day) = BokkyPooBahsDateTimeLibrary.timestampToDate(_timestamp);\\n\\t\\tbytes32 dateHash = keccak256(abi.encodePacked(year, month, day));\\n\\n\\t\\tuint256 usedDailyAlloc = dailyUsages[dateHash];\\n\\t\\tuint256 totalDailyUsage = usedDailyAlloc + _allocated;\\n\\n\\t\\tStorageProviderTypes.SPAllocation storage spAllocation = allocations[_ownerId];\\n\\n\\t\\trequire(totalDailyUsage <= spAllocation.dailyAllocation, \\\"DAILY_ALLOCATION_OVERFLOW\\\");\\n\\t\\t// require(spAllocation.usedAllocation + _allocated <= spAllocation.allocationLimit, \\\"TOTAL_ALLOCATION_OVERFLOW\\\");\\n\\n\\t\\tspAllocation.usedAllocation = spAllocation.usedAllocation + _allocated;\\n\\t\\tdailyUsages[dateHash] += _allocated;\\n\\n\\t\\temit StorageProviderAllocationUsed(_ownerId, _allocated);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update StorageProviderCollateral smart contract\\n\\t * @param _collateral StorageProviderCollateral smart contract address\\n\\t * @dev Only triggered by registry admin\\n\\t */\\n\\tfunction setCollateralAddress(address _collateral) public onlyAdmin {\\n\\t\\trequire(_collateral != address(0), \\\"INVALID_ADDRESS\\\");\\n\\n\\t\\taddress prevCollateral = address(collateral);\\n\\t\\trequire(prevCollateral != _collateral, \\\"SAME_ADDRESS\\\");\\n\\n\\t\\tcollateral = IStorageProviderCollateralClient(_collateral);\\n\\n\\t\\temit CollateralAddressUpdated(_collateral);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Register new liquid staking pool\\n\\t * @param _pool Address of pool smart contract\\n\\t * @dev Only triggered by registry admin\\n\\t */\\n\\tfunction registerPool(address _pool) public onlyAdmin {\\n\\t\\trequire(_pool != address(0), \\\"INVALID_ADDRESS\\\");\\n\\t\\trequire(!pools[_pool], \\\"ALREADY_ACTIVE_POOL\\\");\\n\\n\\t\\tpools[_pool] = true;\\n\\n\\t\\temit LiquidStakingPoolRegistered(_pool);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates maximum allocation amount for SP\\n\\t * @param allocation New max allocation per SP\\n\\t */\\n\\tfunction updateMaxAllocation(uint256 allocation) public onlyAdmin {\\n\\t\\trequire(allocation > 0, \\\"INVALID_ALLOCATION\\\");\\n\\n\\t\\tuint256 prevAllocation = maxAllocation;\\n\\t\\trequire(allocation != prevAllocation, \\\"SAME_ALLOCATION\\\");\\n\\n\\t\\tmaxAllocation = allocation;\\n\\n\\t\\temit UpdateMaxAllocation(allocation);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return a boolean flag whether `_pool` is active or not\\n\\t */\\n\\tfunction isActivePool(address _pool) external view returns (bool) {\\n\\t\\treturn pools[_pool];\\n\\t}\\n\\n\\tfunction _authorizeUpgrade(address newImplementation) internal override onlyAdmin {}\\n\\n\\tfunction version() external pure virtual returns (string memory) {\\n\\t\\treturn \\\"v1\\\";\\n\\t}\\n\\n\\tfunction getImplementation() external view returns (address) {\\n\\t\\treturn _getImplementation();\\n\\t}\\n}\\n\",\"keccak256\":\"0x1b5185f1dd39a039a0075f29ea233ef612ff2d086ef5b220e909a8de869d5f26\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidStakingClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ILiquidStakingClient {\\n\\t/**\\n\\t * @notice Returns total amount of fees held by LSP for a specific SP with `_ownerId`\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t */\\n\\tfunction totalFees(uint64 _ownerId) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Updates profit sharing requirements for SP with `_ownerId` by `_profitShare` percentage\\n\\t * @notice Only triggered by Liquid Staking admin or registry contract while registering SP\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _profitShare Percentage of profit sharing\\n\\t */\\n\\tfunction updateProfitShare(uint64 _ownerId, uint256 _profitShare) external;\\n\\n\\t/**\\n\\t * @notice Triggers changeBeneficiary Miner actor call\\n\\t * @param minerId Miner actor ID\\n\\t * @param targetPool LSP smart contract address\\n\\t * @param quota Total beneficiary quota\\n\\t * @param expiration Expiration epoch\\n\\t */\\n\\tfunction forwardChangeBeneficiary(uint64 minerId, address targetPool, uint256 quota, int64 expiration) external;\\n}\\n\",\"keccak256\":\"0x154edcdd3b43e5a959edbcd735a6561ddff0be2f82b45198d1e942dbde267bf9\",\"license\":\"MIT\"},\"contracts/interfaces/IStorageProviderCollateralClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IStorageProviderCollateralClient {\\n\\t/**\\n\\t * @dev Locks required collateral amount based on `_allocated` FIL to pledge\\n\\t * @notice Increases the total amount of locked collateral for storage provider\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\\n\\t */\\n\\tfunction lock(uint64 _ownerId, uint256 _allocated) external;\\n\\n\\t/**\\n\\t * @dev Fits collateral amounts based on SP pledge usage, distributed rewards and pledge paybacks\\n\\t * @notice Rebalances the total locked and available collateral amounts\\n\\t * @param _ownerId Storage provider owner ID\\n\\t */\\n\\tfunction fit(uint64 _ownerId) external;\\n\\n\\t/**\\n\\t * @dev Slashes SP for a `_slashingAmt` and delivers WFIL amount to the `msg.sender` LSP\\n\\t * @notice Doesn't perform a rebalancing checks\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _slashingAmt Slashing amount for SP\\n\\t */\\n\\tfunction slash(uint64 _ownerId, uint256 _slashingAmt) external;\\n\\n\\t/**\\n\\t * @dev Updates collateral requirements for SP with `_ownerId` by `requirements` percentage\\n\\t * @notice Only triggered by Collateral admin or registry contract while registering SP\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param requirements Percentage of collateral requirements\\n\\t */\\n\\tfunction updateCollateralRequirements(uint64 _ownerId, uint256 requirements) external;\\n}\\n\",\"keccak256\":\"0x3c716c5983f9d04247c8ae5905834e99e5f1e58305f9181b5f6a796cb732001b\",\"license\":\"MIT\"},\"contracts/interfaces/IStorageProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IStorageProviderRegistry {\\n\\tevent StorageProviderRegistered(\\n\\t\\tbytes owner,\\n\\t\\tuint64 ownerId,\\n\\t\\tuint64 minerId,\\n\\t\\taddress targetPool,\\n\\t\\tuint256 allocationLimit,\\n\\t\\tuint256 dailyAllocation\\n\\t);\\n\\tevent StorageProviderOnboarded(\\n\\t\\tuint64 ownerId,\\n\\t\\tuint64 minerId,\\n\\t\\tuint256 allocationLimit,\\n\\t\\tuint256 dailyAllocation,\\n\\t\\tuint256 repayment,\\n\\t\\tint64 lastEpoch\\n\\t);\\n\\tevent StorageProviderDeactivated(uint64 ownerId);\\n\\tevent StorageProviderBeneficiaryAddressUpdated(address beneficiaryAddress);\\n\\tevent StorageProviderBeneficiaryAddressAccepted(uint64 ownerId);\\n\\tevent StorageProviderMinerAddressUpdate(uint64 ownerId, uint64 miner);\\n\\n\\tevent StorageProviderLastEpochUpdate(uint64 ownerId, int64 lastEpoch);\\n\\n\\tevent StorageProviderAllocationLimitRequest(uint64 ownerId, uint256 allocationLimit, uint256 dailyAllocation);\\n\\tevent StorageProviderAllocationLimitUpdate(\\n\\t\\tuint64 ownerId,\\n\\t\\tuint256 allocationLimit,\\n\\t\\tuint256 dailyAllocation,\\n\\t\\tuint256 repayment\\n\\t);\\n\\tevent StorageProviderAllocationUsed(uint64 ownerId, uint256 usedAllocation);\\n\\n\\tevent StorageProviderMinerRestakingRatioUpdate(uint64 ownerId, uint256 restakingRatio, address restakingAddress);\\n\\n\\tevent StorageProviderAccruedRewards(uint64 ownerId, uint256 rewards);\\n\\n\\tevent StorageProviderRepaidPledge(uint64 ownerId, uint256 pledge);\\n\\n\\tevent CollateralAddressUpdated(address collateral);\\n\\tevent LiquidStakingPoolRegistered(address pool);\\n\\tevent UpdateMaxAllocation(uint256 maxAllocation);\\n\\n\\t/**\\n\\t * @notice Register storage provider with `_minerId`, desired `_allocationLimit` and `_targetPool`\\n\\t * @param _minerId Storage Provider miner ID in Filecoin network\\n\\t * @param _targetPool Target liquid staking strategy\\n\\t * @param _allocationLimit FIL allocation for storage provider\\n\\t * @param _dailyAllocation Daily FIL allocation for storage provider\\n\\t * @dev Only triggered by Storage Provider owner\\n\\t */\\n\\tfunction register(\\n\\t\\tuint64 _minerId,\\n\\t\\taddress _targetPool,\\n\\t\\tuint256 _allocationLimit,\\n\\t\\tuint256 _dailyAllocation\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Onboard storage provider with `_minerId`, desired `_allocationLimit`, `_repayment` amount\\n\\t * @param _minerId Storage Provider miner ID in Filecoin network\\n\\t * @param _allocationLimit FIL allocation for storage provider\\n\\t * @param _dailyAllocation Daily FIL allocation for storage provider\\n\\t * @param _repayment FIL repayment for storage provider\\n\\t * @param _lastEpoch Last epoch for FIL allocation utilization\\n\\t * @dev Only triggered by owner contract\\n\\t */\\n\\tfunction onboardStorageProvider(\\n\\t\\tuint64 _minerId,\\n\\t\\tuint256 _allocationLimit,\\n\\t\\tuint256 _dailyAllocation,\\n\\t\\tuint256 _repayment,\\n\\t\\tint64 _lastEpoch\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Transfer beneficiary address of a miner to the target pool\\n\\t */\\n\\tfunction changeBeneficiaryAddress() external;\\n\\n\\t/**\\n\\t * @notice Accept beneficiary address transfer and activate FIL allocation\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @dev Only triggered by owner contract\\n\\t */\\n\\tfunction acceptBeneficiaryAddress(uint64 _ownerId) external;\\n\\n\\t/**\\n\\t * @notice Deactive storage provider with ID `_ownerId`\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @dev Only triggered by owner contract\\n\\t */\\n\\tfunction deactivateStorageProvider(uint64 _ownerId) external;\\n\\n\\t/**\\n\\t * @notice Update storage provider miner ID with `_minerId`\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _minerId Storage Provider new miner ID\\n\\t * @dev Only triggered by owner contract\\n\\t */\\n\\tfunction setMinerAddress(uint64 _ownerId, uint64 _minerId) external;\\n\\n\\t/**\\n\\t * @notice Request storage provider's FIL allocation update with `_allocationLimit`\\n\\t * @param _allocationLimit New FIL allocation for storage provider\\n\\t * @param _dailyAllocation New daily FIL allocation for storage provider\\n\\t * @dev Only triggered by Storage Provider owner\\n\\t */\\n\\tfunction requestAllocationLimitUpdate(uint256 _allocationLimit, uint256 _dailyAllocation) external;\\n\\n\\t/**\\n\\t * @notice Update storage provider FIL allocation with `_allocationLimit`\\n\\t * @param _ownerId Storage provider owner ID\\n\\t * @param _allocationLimit New FIL allocation for storage provider\\n\\t * @param _dailyAllocation New daily FIL allocation for storage provider\\n\\t * @param _repaymentAmount New FIL repayment amount for storage provider\\n\\t * @dev Only triggered by registry admin\\n\\t */\\n\\tfunction updateAllocationLimit(\\n\\t\\tuint64 _ownerId,\\n\\t\\tuint256 _allocationLimit,\\n\\t\\tuint256 _dailyAllocation,\\n\\t\\tuint256 _repaymentAmount\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Update storage provider's restaking ratio\\n\\t * @param _restakingRatio Restaking ratio for Storage Provider\\n\\t * @param _restakingAddress Restaking address (f4 address) for Storage Provider\\n\\t * @dev Only triggered by Storage Provider\\n\\t */\\n\\tfunction setRestaking(uint256 _restakingRatio, address _restakingAddress) external;\\n\\n\\t/**\\n\\t * @notice Return Storage Provider information with `_ownerId`\\n\\t */\\n\\tfunction getStorageProvider(uint64 _ownerId) external view returns (bool, address, uint64, int64);\\n\\n\\t/**\\n\\t * @notice Return a boolean flag of Storage Provider activity\\n\\t */\\n\\tfunction isActiveProvider(uint64 _ownerId) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Increase collected rewards by Storage Provider\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _accuredRewards Withdrawn rewards from SP's miner actor\\n\\t */\\n\\tfunction increaseRewards(uint64 _ownerId, uint256 _accuredRewards) external;\\n\\n\\t/**\\n\\t * @notice Increase repaid pledge by Storage Provider\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _repaidPledge Withdrawn initial pledge after sector termination\\n\\t */\\n\\tfunction increasePledgeRepayment(uint64 _ownerId, uint256 _repaidPledge) external;\\n\\n\\t/**\\n\\t * @notice Increase used allocation for Storage Provider\\n\\t * @param _ownerId Storage Provider owner ID\\n\\t * @param _allocated FIL amount that is going to be pledged for Storage Provider\\n\\t * @param _timestamp Transaction timestamp\\n\\t */\\n\\tfunction increaseUsedAllocation(uint64 _ownerId, uint256 _allocated, uint256 _timestamp) external;\\n\\n\\t/**\\n\\t * @notice Update StorageProviderCollateral smart contract\\n\\t * @param _collateral StorageProviderCollateral smart contract address\\n\\t * @dev Only triggered by owner contract\\n\\t */\\n\\tfunction setCollateralAddress(address _collateral) external;\\n\\n\\t/**\\n\\t * @notice Register new liquid staking pool\\n\\t * @param _pool Address of pool smart contract\\n\\t * @dev Only triggered by owner contract\\n\\t */\\n\\tfunction registerPool(address _pool) external;\\n\\n\\t/**\\n\\t * @notice Updates maximum allocation amount for SP\\n\\t * @param allocation New max allocation per SP\\n\\t */\\n\\tfunction updateMaxAllocation(uint256 allocation) external;\\n\\n\\t/**\\n\\t * @notice Return a boolean flag whether `_pool` is active or not\\n\\t */\\n\\tfunction isActivePool(address _pool) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Return a restaking information for a storage provider\\n\\t */\\n\\tfunction restakings(uint64 ownerId) external view returns (uint256, address);\\n\\n\\t/**\\n\\t * @notice Return allocation information for a storage provider\\n\\t */\\n\\tfunction allocations(uint64 ownerId) external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x71c9732dc6bb792dfa6c446fdf8e4c2b9d604500e6899988a1cd066c56de4d63\",\"license\":\"MIT\"},\"contracts/libraries/DateTimeLibraryCompressed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\tuint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n\\tint constant OFFSET19700101 = 2440588;\\n\\n\\t// ------------------------------------------------------------------------\\n\\t// Calculate year/month/day from the number of days since 1970/01/01 using\\n\\t// the date conversion algorithm from\\n\\t//   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n\\t// and adding the offset 2440588 so that 1970/01/01 is day 0\\n\\t//\\n\\t// int L = days + 68569 + offset\\n\\t// int N = 4 * L / 146097\\n\\t// L = L - (146097 * N + 3) / 4\\n\\t// year = 4000 * (L + 1) / 1461001\\n\\t// L = L - 1461 * year / 4 + 31\\n\\t// month = 80 * L / 2447\\n\\t// dd = L - 2447 * month / 80\\n\\t// L = month / 11\\n\\t// month = month + 2 - 12 * L\\n\\t// year = 100 * (N - 49) + year + L\\n\\t// ------------------------------------------------------------------------\\n\\tfunction _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n\\t\\tint __days = int(_days);\\n\\n\\t\\tint L = __days + 68569 + OFFSET19700101;\\n\\t\\tint N = (4 * L) / 146097;\\n\\t\\tL = L - (146097 * N + 3) / 4;\\n\\t\\tint _year = (4000 * (L + 1)) / 1461001;\\n\\t\\tL = L - (1461 * _year) / 4 + 31;\\n\\t\\tint _month = (80 * L) / 2447;\\n\\t\\tint _day = L - (2447 * _month) / 80;\\n\\t\\tL = _month / 11;\\n\\t\\t_month = _month + 2 - 12 * L;\\n\\t\\t_year = 100 * (N - 49) + _year + L;\\n\\n\\t\\tyear = uint(_year);\\n\\t\\tmonth = uint(_month);\\n\\t\\tday = uint(_day);\\n\\t}\\n\\n\\tfunction timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n\\t\\t(year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n\\t}\\n}\\n\",\"keccak256\":\"0x17f8230a59b3e31aa0489f1ae8cbb9f08fbc8a6ba0a1fc8d75c51b1acd41cfdb\",\"license\":\"MIT\"},\"contracts/types/StorageProviderTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Storage provider account types for Solidity.\\n * @author Collective DAO\\n */\\nlibrary StorageProviderTypes {\\n\\tstruct StorageProvider {\\n\\t\\tbool active;\\n\\t\\tbool onboarded;\\n\\t\\taddress targetPool;\\n\\t\\tuint64 minerId; // Miner worker address\\n\\t\\tint64 lastEpoch; // Max time period for accessing FIL from liquid staking\\n\\t}\\n\\n\\tstruct SPAllocation {\\n\\t\\tuint256 allocationLimit; // FIL allocation\\n\\t\\tuint256 repayment; // FIL repayment amount\\n\\t\\tuint256 usedAllocation; // Used allocation in pledges\\n\\t\\tuint256 dailyAllocation; // Daily FIL allocation for SP\\n\\t\\tuint256 accruedRewards; // Storage Provider delivered rewards\\n\\t\\tuint256 repaidPledge; // Storage Provider repaid initial pledge\\n\\t}\\n\\n\\tstruct SPRestaking {\\n\\t\\tuint256 restakingRatio; // Percentage of FIL rewards that is going to be restaked into liquid staking pool\\n\\t\\taddress restakingAddress;\\n\\t}\\n\\n\\tstruct AllocationRequest {\\n\\t\\tuint256 allocationLimit;\\n\\t\\tuint256 dailyAllocation;\\n\\t}\\n}\\n\",\"keccak256\":\"0x97b324a9e58625b824bc177bcd4ed7471f7c84502d0824c372e4cec04c2948f9\",\"license\":\"MIT\"},\"lib/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"lib/fevmate/contracts/utils/FilAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @author fevmate (https://github.com/wadealexc/fevmate)\\n * @notice Utility functions for converting between id and\\n * eth addresses. Helps implement address normalization.\\n *\\n * See README for more details about how to use this when\\n * developing for the FEVM.\\n */\\nlibrary FilAddress {\\n    \\n    // Custom errors\\n    error CallFailed();\\n    error InvalidAddress();\\n    error InsufficientFunds();\\n\\n    // Builtin Actor addresses (singletons)\\n    address constant SYSTEM_ACTOR = 0xfF00000000000000000000000000000000000000;\\n    address constant INIT_ACTOR = 0xff00000000000000000000000000000000000001;\\n    address constant REWARD_ACTOR = 0xff00000000000000000000000000000000000002;\\n    address constant CRON_ACTOR = 0xFF00000000000000000000000000000000000003;\\n    address constant POWER_ACTOR = 0xFf00000000000000000000000000000000000004;\\n    address constant MARKET_ACTOR = 0xff00000000000000000000000000000000000005;\\n    address constant VERIFIED_REGISTRY_ACTOR = 0xFF00000000000000000000000000000000000006;\\n    address constant DATACAP_TOKEN_ACTOR = 0xfF00000000000000000000000000000000000007;\\n    address constant EAM_ACTOR = 0xfF0000000000000000000000000000000000000a;\\n\\n    // FEVM precompile addresses\\n    address constant RESOLVE_ADDRESS = 0xFE00000000000000000000000000000000000001;\\n    address constant LOOKUP_DELEGATED_ADDRESS = 0xfE00000000000000000000000000000000000002;\\n    address constant CALL_ACTOR = 0xfe00000000000000000000000000000000000003;\\n    // address constant GET_ACTOR_TYPE = 0xFe00000000000000000000000000000000000004; // (deprecated)\\n    address constant CALL_ACTOR_BY_ID = 0xfe00000000000000000000000000000000000005;\\n\\n    // An ID address with id == 0. It's also equivalent to the system actor address\\n    // This is useful for bitwise operations\\n    address constant ZERO_ID_ADDRESS = SYSTEM_ACTOR;\\n    \\n    /**\\n     * @notice Convert ID to Eth address. Returns input if conversion fails.\\n     *\\n     * Attempt to convert address _a from an ID address to an Eth address\\n     * If _a is NOT an ID address, this returns _a\\n     * If _a does NOT have a corresponding Eth address, this returns _a\\n     * \\n     * NOTE: It is possible this returns an ID address! If you want a method\\n     *       that will NEVER return an ID address, see mustNormalize below.\\n     */\\n    function normalize(address _a) internal view returns (address) {\\n        // First, check if we have an ID address. If we don't, return as-is\\n        (bool isID, uint64 id) = isIDAddress(_a);\\n        if (!isID) {\\n            return _a;\\n        }\\n\\n        // We have an ID address -- attempt the conversion\\n        // If there is no corresponding Eth address, return _a\\n        (bool success, address eth) = getEthAddress(id);\\n        if (!success) {\\n            return _a;\\n        } else {\\n            return eth;\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert ID to Eth address. Reverts if conversion fails.\\n     *\\n     * Attempt to convert address _a from an ID address to an Eth address\\n     * If _a is NOT an ID address, this returns _a unchanged\\n     * If _a does NOT have a corresponding Eth address, this method reverts\\n     *\\n     * This method can be used when you want a guarantee that an ID address is not\\n     * returned. Note, though, that rejecting ID addresses may mean you don't support\\n     * other Filecoin-native actors.\\n     */\\n    function mustNormalize(address _a) internal view returns (address) {\\n        // First, check if we have an ID address. If we don't, return as-is\\n        (bool isID, uint64 id) = isIDAddress(_a);\\n        if (!isID) {\\n            return _a;\\n        }\\n\\n        // We have an ID address -- attempt the conversion\\n        // If there is no corresponding Eth address, revert\\n        (bool success, address eth) = getEthAddress(id);\\n        if (!success) revert InvalidAddress();\\n        return eth;\\n    }\\n\\n    // Used to clear the last 8 bytes of an address    (addr & U64_MASK)\\n    address constant U64_MASK = 0xFffFfFffffFfFFffffFFFffF0000000000000000;\\n    // Used to retrieve the last 8 bytes of an address (addr & MAX_U64)\\n    address constant MAX_U64 = 0x000000000000000000000000fFFFFFffFFFFfffF;\\n\\n    /**\\n     * @notice Checks whether _a matches the ID address format.\\n     * If it does, returns true and the id\\n     * \\n     * The ID address format is:\\n     * 0xFF | bytes11(0) | uint64(id)\\n     */\\n    function isIDAddress(address _a) internal pure returns (bool isID, uint64 id) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Zeroes out the last 8 bytes of _a\\n            let a_mask := and(_a, U64_MASK)\\n\\n            // If the result is equal to the ZERO_ID_ADDRESS,\\n            // _a is an ID address.\\n            if eq(a_mask, ZERO_ID_ADDRESS) {\\n                isID := true\\n                id := and(_a, MAX_U64)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Given an Actor ID, converts it to an EVM-compatible address.\\n     * \\n     * If _id has a corresponding Eth address, we return that\\n     * Otherwise, _id is returned as a 20-byte ID address\\n     */\\n    function toAddress(uint64 _id) internal view returns (address) {\\n        (bool success, address eth) = getEthAddress(_id);\\n        if (success) {\\n            return eth;\\n        } else {\\n            return toIDAddress(_id);\\n        }\\n    }\\n\\n    /**\\n     * @notice Given an Actor ID, converts it to a 20-byte ID address\\n     * \\n     * Note that this method does NOT check if the _id has a corresponding\\n     * Eth address. If you want that, try toAddress above.\\n     */\\n    function toIDAddress(uint64 _id) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly { addr := or(ZERO_ID_ADDRESS, _id) }\\n    }\\n\\n    // An address with all bits set. Used to clean higher-order bits\\n    address constant ADDRESS_MASK = 0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF;\\n\\n    /**\\n     * @notice Convert ID to Eth address by querying the lookup_delegated_address\\n     * precompile.\\n     *\\n     * If the actor ID corresponds to an Eth address, this will return (true, addr)\\n     * If the actor ID does NOT correspond to an Eth address, this will return (false, 0)\\n     * \\n     * --- About ---\\n     * \\n     * The lookup_delegated_address precompile retrieves the actor state corresponding\\n     * to the id. If the actor has a delegated address, it is returned using fil\\n     * address encoding (see below).\\n     *\\n     * f4, or delegated addresses, have a namespace as well as a subaddress that can\\n     * be up to 54 bytes long. This is to support future address formats. Currently,\\n     * though, the f4 format is only used to support Eth addresses.\\n     *\\n     * Consequently, the only addresses lookup_delegated_address should return have:\\n     * - Prefix:     \\\"f4\\\" address      - 1 byte   - (0x04)\\n     * - Namespace:  EAM actor id 10   - 1 byte   - (0x0A)\\n     * - Subaddress: EVM-style address - 20 bytes - (EVM address)\\n     * \\n     * This method checks that the precompile output exactly matches this format:\\n     * 22 bytes, starting with 0x040A.\\n     * \\n     * If we get anything else, we return (false, 0x00).\\n     */\\n    function getEthAddress(uint64 _id) internal view returns (bool success, address eth) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Call LOOKUP_DELEGATED_ADDRESS precompile\\n            //\\n            // Input: uint64 id, in standard EVM format (left-padded to 32 bytes)\\n            //\\n            // Output: LOOKUP_DELEGATED_ADDRESS returns an f4-encoded address. \\n            // For Eth addresses, the format is a 20-byte address, prefixed with\\n            // 0x040A. So, we expect exactly 22 bytes of returndata.\\n            // \\n            // Since we want to read an address from the returndata, we place the\\n            // output at memory offset 10, which means the address is already\\n            // word-aligned (10 + 22 == 32)\\n            //\\n            // NOTE: success and returndatasize checked at the end of the function\\n            mstore(0, _id)\\n            success := staticcall(gas(), LOOKUP_DELEGATED_ADDRESS, 0, 32, 10, 22)\\n\\n            // Read result. LOOKUP_DELEGATED_ADDRESS returns raw, unpadded\\n            // bytes. Assuming we succeeded, we can extract the eth address\\n            // by reading from offset 0 and cleaning any higher-order bits:\\n            let result := mload(0)\\n            eth := and(ADDRESS_MASK, result)\\n\\n            // Check that the returned address has the expected prefix. The\\n            // prefix is the first 2 bytes of returndata, located at memory \\n            // offset 10. \\n            // \\n            // To isolate it, shift right by the # of bits in an address (160),\\n            // and clean all but the last 2 bytes.\\n            let prefix := and(0xFFFF, shr(160, result))\\n            if iszero(eq(prefix, 0x040A)) {\\n                success := false\\n                eth := 0\\n            }\\n        }\\n        // Checking these here because internal functions don't have\\n        // a good way to return from inline assembly.\\n        //\\n        // But, it's very important we do check these. If the output\\n        // wasn't exactly what we expected, we assume there's no eth\\n        // address and return (false, 0).\\n        if (!success || returnDataSize() != 22) {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert Eth address to ID by querying the resolve_address precompile.\\n     *\\n     * If the passed-in address is already in ID form, returns (true, id)\\n     * If the Eth address has no corresponding ID address, returns (false, 0)\\n     * Otherwise, the lookup succeeds and this returns (true, id)\\n     * \\n     * --- About ---\\n     *\\n     * The resolve_address precompile can resolve any fil-encoded address to its\\n     * corresponding actor ID, if there is one. This means resolve_address handles\\n     * all address protocols: f0, f1, f2, f3, and f4. \\n     * \\n     * An address might not have an actor ID if it does not exist in state yet. A \\n     * typical example of this is a public-key-type address, which can exist even \\n     * if it hasn't been used on-chain yet.\\n     *\\n     * This method is only meant to look up ids for Eth addresses, so it contains\\n     * very specific logic to correctly encode an Eth address into its f4 format.\\n     * \\n     * Note: This is essentially just the reverse of getEthAddress above, so check\\n     * the comments there for more details on f4 encoding.\\n     */\\n    function getActorID(address _eth) internal view returns (bool success, uint64 id) {\\n        // First - if we already have an ID address, we can just return that\\n        (success, id) = isIDAddress(_eth);\\n        if (success) {\\n            return (success, id);\\n        }\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert Eth address to f4 format: 22 bytes, with prefix 0x040A.\\n            // (see getEthAddress above for more details on this format)\\n            //\\n            // We're going to pass the 22 bytes to the precompile without any\\n            // padding or length, so everything will be left-aligned. Since \\n            // addresses are right-aligned, we need to shift everything left:\\n            // - 0x040A prefix - shifted left 240 bits (30 bytes * 8 bits)\\n            // - Eth address   - shifted left 80 bits  (10 bytes * 8 bits)\\n            let input := or(\\n                shl(240, 0x040A),\\n                shl(80, _eth)\\n            )\\n            // Call RESOLVE_ADDRESS precompile\\n            //\\n            // Input: Eth address in f4 format. 22 bytes, no padding or length\\n            //\\n            // Output: RESOLVE_ADDRESS returns a uint64 actor ID in standard EVM\\n            // format (left-padded to 32 bytes).\\n            // \\n            // NOTE: success and returndatasize checked at the end of the function\\n            mstore(0, input)\\n            success := staticcall(gas(), RESOLVE_ADDRESS, 0, 22, 0, 32)\\n\\n            // Read result and clean higher-order bits, just in case.\\n            // If successful, this will be the actor id.\\n            id := and(MAX_U64, mload(0))\\n        }\\n        // Checking these here because internal functions don't have\\n        // a good way to return from inline assembly.\\n        //\\n        // But, it's very important we do check these. If the output\\n        // wasn't exactly what we expected, we assume there's no ID\\n        // address and return (false, 0).\\n        if (!success || returnDataSize() != 32) {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Replacement for Solidity's address.send and address.transfer\\n     * This sends _amount to _recipient, forwarding all available gas and\\n     * reverting if there are any errors.\\n     *\\n     * If _recpient is an Eth address, this works the way you'd\\n     * expect the EVM to work.\\n     *\\n     * If _recpient is an ID address, this works if:\\n     * 1. The ID corresponds to an Eth EOA address      (EthAccount actor)\\n     * 2. The ID corresponds to an Eth contract address (EVM actor)\\n     * 3. The ID corresponds to a BLS/SECPK address     (Account actor)\\n     *\\n     * If _recpient is some other Filecoin-native actor, this will revert.\\n     */\\n    function sendValue(address payable _recipient, uint _amount) internal {\\n        if (address(this).balance < _amount) revert InsufficientFunds();\\n\\n        (bool success, ) = _recipient.call{value: _amount}(\\\"\\\");\\n        if (!success) revert CallFailed();\\n    }\\n\\n    function returnDataSize() private pure returns (uint size) {\\n        /// @solidity memory-safe-assembly\\n        assembly { size := returndatasize() }\\n    }\\n}\\n\",\"keccak256\":\"0x8707b4f152e92b852090c313419c0dc772eebf4428472a0659dd6b13dd6bee31\",\"license\":\"MIT\"},\"lib/filecoin-solidity/contracts/v0.8/MinerAPI.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./types/MinerTypes.sol\\\";\\nimport \\\"./types/CommonTypes.sol\\\";\\nimport \\\"./cbor/MinerCbor.sol\\\";\\nimport \\\"./cbor/FilecoinCbor.sol\\\";\\nimport \\\"./cbor/BytesCbor.sol\\\";\\nimport \\\"./utils/Misc.sol\\\";\\nimport \\\"./utils/Actor.sol\\\";\\n\\n/// @title This library is a proxy to a built-in Miner actor. Calling one of its methods will result in a cross-actor call being performed.\\n/// @notice During miner initialization, a miner actor is created on the chain, and this actor gives the miner its ID f0.... The miner actor is in charge of collecting all the payments sent to the miner.\\n/// @dev For more info about the miner actor, please refer to https://lotus.filecoin.io/storage-providers/operate/addresses/\\n/// @author Zondax AG\\nlibrary MinerAPI {\\n    using MinerCBOR for *;\\n    using FilecoinCBOR for *;\\n    using BytesCBOR for bytes;\\n\\n    /// @notice Income and returned collateral are paid to this address\\n    /// @notice This address is also allowed to change the worker address for the miner\\n    /// @param target The miner actor id you want to interact with\\n    /// @return the owner address of a Miner\\n    function getOwner(CommonTypes.FilActorId target) internal returns (MinerTypes.GetOwnerReturn memory) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetOwnerMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetOwnerReturn();\\n    }\\n\\n    /// @param target  The miner actor id you want to interact with\\n    /// @param addr New owner address\\n    /// @notice Proposes or confirms a change of owner address.\\n    /// @notice If invoked by the current owner, proposes a new owner address for confirmation. If the proposed address is the current owner address, revokes any existing proposal that proposed address.\\n    function changeOwnerAddress(CommonTypes.FilActorId target, CommonTypes.FilAddress memory addr) internal {\\n        bytes memory raw_request = addr.serializeAddress();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangeOwnerAddressMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target  The miner actor id you want to interact with\\n    /// @param addr The \\\"controlling\\\" addresses are the Owner, the Worker, and all Control Addresses.\\n    /// @return Whether the provided address is \\\"controlling\\\".\\n    function isControllingAddress(CommonTypes.FilActorId target, CommonTypes.FilAddress memory addr) internal returns (bool) {\\n        bytes memory raw_request = addr.serializeAddress();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.IsControllingAddressMethodNum, Misc.CBOR_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeBool();\\n    }\\n\\n    /// @return the miner's sector size.\\n    /// @param target The miner actor id you want to interact with\\n    /// @dev For more information about sector sizes, please refer to https://spec.filecoin.io/systems/filecoin_mining/sector/#section-systems.filecoin_mining.sector\\n    function getSectorSize(CommonTypes.FilActorId target) internal returns (uint64) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetSectorSizeMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeUint64();\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    /// @notice This is calculated as actor balance - (vesting funds + pre-commit deposit + initial pledge requirement + fee debt)\\n    /// @notice Can go negative if the miner is in IP debt.\\n    /// @return the available balance of this miner.\\n    function getAvailableBalance(CommonTypes.FilActorId target) internal returns (CommonTypes.BigInt memory) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetAvailableBalanceMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeBytesBigInt();\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    /// @return the funds vesting in this miner as a list of (vesting_epoch, vesting_amount) tuples.\\n    function getVestingFunds(CommonTypes.FilActorId target) internal returns (MinerTypes.GetVestingFundsReturn memory) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetVestingFundsMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetVestingFundsReturn();\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    /// @notice Proposes or confirms a change of beneficiary address.\\n    /// @notice A proposal must be submitted by the owner, and takes effect after approval of both the proposed beneficiary and current beneficiary, if applicable, any current beneficiary that has time and quota remaining.\\n    /// @notice See FIP-0029, https://github.com/filecoin-project/FIPs/blob/master/FIPS/fip-0029.md\\n    function changeBeneficiary(CommonTypes.FilActorId target, MinerTypes.ChangeBeneficiaryParams memory params) internal {\\n        bytes memory raw_request = params.serializeChangeBeneficiaryParams();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangeBeneficiaryMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    /// @notice This method is for use by other actors (such as those acting as beneficiaries), and to abstract the state representation for clients.\\n    /// @notice Retrieves the currently active and proposed beneficiary information.\\n    function getBeneficiary(CommonTypes.FilActorId target) internal returns (MinerTypes.GetBeneficiaryReturn memory) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetBeneficiaryMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetBeneficiaryReturn();\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function changeWorkerAddress(CommonTypes.FilActorId target, MinerTypes.ChangeWorkerAddressParams memory params) internal {\\n        bytes memory raw_request = params.serializeChangeWorkerAddressParams();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangeWorkerAddressMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function changePeerId(CommonTypes.FilActorId target, CommonTypes.FilAddress memory newId) internal {\\n        bytes memory raw_request = newId.serializeArrayFilAddress();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangePeerIDMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function changeMultiaddresses(CommonTypes.FilActorId target, MinerTypes.ChangeMultiaddrsParams memory params) internal {\\n        bytes memory raw_request = params.serializeChangeMultiaddrsParams();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ChangeMultiaddrsMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function repayDebt(CommonTypes.FilActorId target) internal {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.RepayDebtMethodNum, Misc.NONE_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function confirmChangeWorkerAddress(CommonTypes.FilActorId target) internal {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.ConfirmChangeWorkerAddressMethodNum, Misc.NONE_CODEC, raw_request, 0, false);\\n        if (result.length != 0) {\\n            revert Actor.InvalidResponseLength();\\n        }\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function getPeerId(CommonTypes.FilActorId target) internal returns (CommonTypes.FilAddress memory) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetPeerIDMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeArrayFilAddress();\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    function getMultiaddresses(CommonTypes.FilActorId target) internal returns (MinerTypes.GetMultiaddrsReturn memory) {\\n        bytes memory raw_request = new bytes(0);\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.GetMultiaddrsMethodNum, Misc.NONE_CODEC, raw_request, 0, true);\\n\\n        return result.deserializeGetMultiaddrsReturn();\\n    }\\n\\n    /// @param target The miner actor id you want to interact with\\n    /// @param amount the amount you want to withdraw\\n    function withdrawBalance(CommonTypes.FilActorId target, CommonTypes.BigInt memory amount) internal returns (CommonTypes.BigInt memory) {\\n        bytes memory raw_request = amount.serializeArrayBigInt();\\n\\n        bytes memory result = Actor.callNonSingletonByID(target, MinerTypes.WithdrawBalanceMethodNum, Misc.CBOR_CODEC, raw_request, 0, false);\\n\\n        return result.deserializeBytesBigInt();\\n    }\\n}\\n\",\"keccak256\":\"0x441de61a7d91510848def8bb0c0acbae12a79973ea604dc82d6a18dd9cb796fb\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/PrecompilesAPI.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./types/CommonTypes.sol\\\";\\n\\n/// @title This library simplify the call of FEVM precompiles contracts.\\n/// @author Zondax AG\\nlibrary PrecompilesAPI {\\n    address constant RESOLVE_ADDRESS_PRECOMPILE_ADDR = 0xFE00000000000000000000000000000000000001;\\n    address constant LOOKUP_DELEGATED_ADDRESS_PRECOMPILE_ADDR = 0xfE00000000000000000000000000000000000002;\\n\\n    /// @notice an error happened trying to call the actor\\n    error FailToCallActor();\\n\\n    /// @notice get the actor id from an actor address\\n    /// @param addr actor address you want to get id from (in bytes format, not string)\\n    /// @return the actor id\\n    function resolveAddress(CommonTypes.FilAddress memory addr) internal view returns (uint64) {\\n        (bool success, bytes memory raw_response) = address(RESOLVE_ADDRESS_PRECOMPILE_ADDR).staticcall(addr.data);\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        uint256 actor_id = abi.decode(raw_response, (uint256));\\n\\n        return uint64(actor_id);\\n    }\\n\\n    /// @notice get the actor id from an eth address\\n    /// @param addr eth address you want to get id from (in bytes format)\\n    /// @return the actor id\\n    function resolveEthAddress(address addr) internal view returns (uint64) {\\n        bytes memory delegatedAddr = abi.encodePacked(hex\\\"040a\\\", addr);\\n\\n        (bool success, bytes memory raw_response) = address(RESOLVE_ADDRESS_PRECOMPILE_ADDR).staticcall(delegatedAddr);\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        uint256 actor_id = abi.decode(raw_response, (uint256));\\n\\n        return uint64(actor_id);\\n    }\\n\\n    /// @notice get the actor delegated address (f4) from an actor id\\n    /// @param actor_id actor id you want to get the delegated address (f4) from\\n    /// @return delegated address in bytes format (not string)\\n    function lookupDelegatedAddress(uint64 actor_id) internal view returns (bytes memory) {\\n        (bool success, bytes memory raw_response) = address(LOOKUP_DELEGATED_ADDRESS_PRECOMPILE_ADDR).staticcall(abi.encodePacked(uint256(actor_id)));\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return raw_response;\\n    }\\n}\\n\",\"keccak256\":\"0xaf2d09961a638c9287b6e68b242670e3ce9b2d2f58e56e36d1f67200905e5b34\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/cbor/BigIntCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for BigInt type\\n/// @author Zondax AG\\nlibrary BigIntCBOR {\\n    /// @notice serialize BigInt instance to bytes\\n    /// @param num BigInt instance to serialize\\n    /// @return serialized BigInt as bytes\\n    function serializeBigInt(CommonTypes.BigInt memory num) internal pure returns (bytes memory) {\\n        bytes memory raw = new bytes(num.val.length + 1);\\n\\n        raw[0] = num.neg == true ? bytes1(0x01) : bytes1(0x00);\\n\\n        uint index = 1;\\n        for (uint i = 0; i < num.val.length; i++) {\\n            raw[index] = num.val[i];\\n            index++;\\n        }\\n\\n        return raw;\\n    }\\n\\n    /// @notice deserialize big int (encoded as bytes) to BigInt instance\\n    /// @param raw as bytes to parse\\n    /// @return parsed BigInt instance\\n    function deserializeBigInt(bytes memory raw) internal pure returns (CommonTypes.BigInt memory) {\\n        if (raw.length == 0) {\\n            return CommonTypes.BigInt(hex\\\"00\\\", false);\\n        }\\n\\n        bytes memory val = new bytes(raw.length - 1);\\n        bool neg = false;\\n\\n        if (raw[0] == 0x01) {\\n            neg = true;\\n        }\\n\\n        for (uint i = 1; i < raw.length; i++) {\\n            val[i - 1] = raw[i];\\n        }\\n\\n        return CommonTypes.BigInt(val, neg);\\n    }\\n}\\n\",\"keccak256\":\"0xbe9eb7f33f943e12a2ca6d8a02178c30cef91f8c9db1c1b50f88a77e31784ac4\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/cbor/BytesCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"lib/solidity-cborutils/contracts/CBOR.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"./BigIntCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for bytes\\n/// @author Zondax AG\\nlibrary BytesCBOR {\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for bytes;\\n    using BigIntCBOR for bytes;\\n\\n    /// @notice serialize raw bytes as cbor bytes string encoded\\n    /// @param data raw data in bytes\\n    /// @return encoded cbor bytes\\n    function serializeBytes(bytes memory data) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getBytesSize(data);\\n\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeBytes(data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize raw address (in bytes) as cbor bytes string encoded (how an address is passed to filecoin actors)\\n    /// @param addr raw address in bytes\\n    /// @return encoded address as cbor bytes\\n    function serializeAddress(bytes memory addr) internal pure returns (bytes memory) {\\n        return serializeBytes(addr);\\n    }\\n\\n    /// @notice encoded null value as cbor\\n    /// @return cbor encoded null\\n    function serializeNull() internal pure returns (bytes memory) {\\n        CBOR.CBORBuffer memory buf = CBOR.create(1);\\n\\n        buf.writeNull();\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize cbor encoded filecoin address to bytes\\n    /// @param ret cbor encoded filecoin address\\n    /// @return raw bytes representing a filecoin address\\n    function deserializeAddress(bytes memory ret) internal pure returns (bytes memory) {\\n        bytes memory addr;\\n        uint byteIdx = 0;\\n\\n        (addr, byteIdx) = ret.readBytes(byteIdx);\\n\\n        return addr;\\n    }\\n\\n    /// @notice deserialize cbor encoded string\\n    /// @param ret cbor encoded string (in bytes)\\n    /// @return decoded string\\n    function deserializeString(bytes memory ret) internal pure returns (string memory) {\\n        string memory response;\\n        uint byteIdx = 0;\\n\\n        (response, byteIdx) = ret.readString(byteIdx);\\n\\n        return response;\\n    }\\n\\n    /// @notice deserialize cbor encoded bool\\n    /// @param ret cbor encoded bool (in bytes)\\n    /// @return decoded bool\\n    function deserializeBool(bytes memory ret) internal pure returns (bool) {\\n        bool response;\\n        uint byteIdx = 0;\\n\\n        (response, byteIdx) = ret.readBool(byteIdx);\\n\\n        return response;\\n    }\\n\\n    /// @notice deserialize cbor encoded BigInt\\n    /// @param ret cbor encoded BigInt (in bytes)\\n    /// @return decoded BigInt\\n    /// @dev BigInts are cbor encoded as bytes string first. That is why it unwraps the cbor encoded bytes first, and then parse the result into BigInt\\n    function deserializeBytesBigInt(bytes memory ret) internal pure returns (CommonTypes.BigInt memory) {\\n        bytes memory tmp;\\n        uint byteIdx = 0;\\n\\n        if (ret.length > 0) {\\n            (tmp, byteIdx) = ret.readBytes(byteIdx);\\n            if (tmp.length > 0) {\\n                return tmp.deserializeBigInt();\\n            }\\n        }\\n\\n        return CommonTypes.BigInt(new bytes(0), false);\\n    }\\n\\n    /// @notice deserialize cbor encoded uint64\\n    /// @param rawResp cbor encoded uint64 (in bytes)\\n    /// @return decoded uint64\\n    function deserializeUint64(bytes memory rawResp) internal pure returns (uint64) {\\n        uint byteIdx = 0;\\n        uint64 value;\\n\\n        (value, byteIdx) = rawResp.readUInt64(byteIdx);\\n        return value;\\n    }\\n\\n    /// @notice deserialize cbor encoded int64\\n    /// @param rawResp cbor encoded int64 (in bytes)\\n    /// @return decoded int64\\n    function deserializeInt64(bytes memory rawResp) internal pure returns (int64) {\\n        uint byteIdx = 0;\\n        int64 value;\\n\\n        (value, byteIdx) = rawResp.readInt64(byteIdx);\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0xb1b8d2649f73ab5df528ddc92fe7dd51459f74f0f9079bfbd3e1f4f3cdc96ed0\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/cbor/FilecoinCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"lib/solidity-cborutils/contracts/CBOR.sol\\\";\\nimport \\\"lib/buffer/contracts/Buffer.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR serialization and deserialization for general data types on the filecoin network.\\n/// @author Zondax AG\\nlibrary FilecoinCBOR {\\n    using Buffer for Buffer.buffer;\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for *;\\n    using BigIntCBOR for *;\\n\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant TAG_TYPE_CID_CODE = 42;\\n    uint8 private constant PAYLOAD_LEN_8_BITS = 24;\\n\\n    /// @notice Write a CID into a CBOR buffer.\\n    /// @dev The CBOR major will be 6 (type 'tag') and the tag type value is 42, as per CBOR tag assignments.\\n    /// @dev https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml\\n    /// @param buf buffer containing the actual CBOR serialization process\\n    /// @param value CID value to serialize as CBOR\\n    function writeCid(CBOR.CBORBuffer memory buf, bytes memory value) internal pure {\\n        buf.buf.appendUint8(uint8(((MAJOR_TYPE_TAG << 5) | PAYLOAD_LEN_8_BITS)));\\n        buf.buf.appendUint8(TAG_TYPE_CID_CODE);\\n        // See https://ipld.io/specs/codecs/dag-cbor/spec/#links for explanation on 0x00 prefix.\\n        buf.writeBytes(bytes.concat(hex'00', value));\\n    }\\n\\n    function readCid(bytes memory cborData, uint byteIdx) internal pure returns (CommonTypes.Cid memory, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = cborData.parseCborHeader(byteIdx);\\n        require(maj == MAJOR_TYPE_TAG, \\\"expected major type tag when parsing cid\\\");\\n        require(value == TAG_TYPE_CID_CODE, \\\"expected tag 42 when parsing cid\\\");\\n\\n        bytes memory raw;\\n        (raw, byteIdx) = cborData.readBytes(byteIdx);\\n        require(raw[0] == 0x00, \\\"expected first byte to be 0 when parsing cid\\\");\\n\\n        // Pop off the first byte, which corresponds to the historical multibase 0x00 byte.\\n        // https://ipld.io/specs/codecs/dag-cbor/spec/#links\\n        CommonTypes.Cid memory ret;\\n        ret.data = new bytes(raw.length - 1);\\n        for (uint256 i = 1; i < raw.length; i++) {\\n            ret.data[i-1] = raw[i];\\n        }\\n\\n        return (ret, byteIdx);\\n    }\\n\\n    /// @notice serialize filecoin address to cbor encoded\\n    /// @param addr filecoin address to serialize\\n    /// @return cbor serialized data as bytes\\n    function serializeAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\\n        uint256 capacity = Misc.getBytesSize(addr.data);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.writeBytes(addr.data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize a BigInt value wrapped in a cbor fixed array.\\n    /// @param value BigInt to serialize as cbor inside an\\n    /// @return cbor serialized data as bytes\\n    function serializeArrayBigInt(CommonTypes.BigInt memory value) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory valueBigInt = value.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getBytesSize(valueBigInt);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.writeBytes(value.serializeBigInt());\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize a FilAddress value wrapped in a cbor fixed array.\\n    /// @param addr FilAddress to serialize as cbor inside an\\n    /// @return cbor serialized data as bytes\\n    function serializeArrayFilAddress(CommonTypes.FilAddress memory addr) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getBytesSize(addr.data);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.writeBytes(addr.data);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize a FilAddress wrapped on a cbor fixed array coming from a actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of FilAddress created based on parsed data\\n    function deserializeArrayFilAddress(bytes memory rawResp) internal pure returns (CommonTypes.FilAddress memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        require(len == 1, \\\"Wrong numbers of parameters (should find 1)\\\");\\n\\n        (ret.data, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize a BigInt wrapped on a cbor fixed array coming from a actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of BigInt created based on parsed data\\n    function deserializeArrayBigInt(bytes memory rawResp) internal pure returns (CommonTypes.BigInt memory) {\\n        uint byteIdx = 0;\\n        uint len;\\n        bytes memory tmp;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 1);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        return tmp.deserializeBigInt();\\n    }\\n\\n    /// @notice serialize UniversalReceiverParams struct to cbor in order to pass as arguments to an actor\\n    /// @param params UniversalReceiverParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeUniversalReceiverParams(CommonTypes.UniversalReceiverParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getPrefixSize(params.type_);\\n        capacity += Misc.getBytesSize(params.payload);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeUInt64(params.type_);\\n        buf.writeBytes(params.payload);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize UniversalReceiverParams cbor to struct when receiving a message\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of UniversalReceiverParams created based on parsed data\\n    function deserializeUniversalReceiverParams(bytes memory rawResp) internal pure returns (CommonTypes.UniversalReceiverParams memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        require(len == 2, \\\"Wrong numbers of parameters (should find 2)\\\");\\n\\n        (ret.type_, byteIdx) = rawResp.readUInt32(byteIdx);\\n        (ret.payload, byteIdx) = rawResp.readBytes(byteIdx);\\n    }\\n\\n    /// @notice attempt to read a FilActorId value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a FilActorId decoded from input bytes and the byte index after moving past the value\\n    function readFilActorId(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.FilActorId, uint) {\\n        uint64 tmp = 0;\\n\\n        (tmp, byteIdx) = rawResp.readUInt64(byteIdx);\\n        return (CommonTypes.FilActorId.wrap(tmp), byteIdx);\\n    }\\n\\n    /// @notice write FilActorId into a cbor buffer\\n    /// @dev FilActorId is just wrapping a uint64\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param id FilActorId to serialize as cbor\\n    function writeFilActorId(CBOR.CBORBuffer memory buf, CommonTypes.FilActorId id) internal pure {\\n        buf.writeUInt64(CommonTypes.FilActorId.unwrap(id));\\n    }\\n\\n    /// @notice attempt to read a ChainEpoch value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a ChainEpoch decoded from input bytes and the byte index after moving past the value\\n    function readChainEpoch(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.ChainEpoch, uint) {\\n        int64 tmp = 0;\\n\\n        (tmp, byteIdx) = rawResp.readInt64(byteIdx);\\n        return (CommonTypes.ChainEpoch.wrap(tmp), byteIdx);\\n    }\\n\\n    /// @notice write ChainEpoch into a cbor buffer\\n    /// @dev ChainEpoch is just wrapping a int64\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param id ChainEpoch to serialize as cbor\\n    function writeChainEpoch(CBOR.CBORBuffer memory buf, CommonTypes.ChainEpoch id) internal pure {\\n        buf.writeInt64(CommonTypes.ChainEpoch.unwrap(id));\\n    }\\n\\n    /// @notice write DealLabel into a cbor buffer\\n    /// @param buf buffer containing the actual cbor serialization process\\n    /// @param label DealLabel to serialize as cbor\\n    function writeDealLabel(CBOR.CBORBuffer memory buf, CommonTypes.DealLabel memory label) internal pure {\\n        label.isString ? buf.writeString(string(label.data)) : buf.writeBytes(label.data);\\n    }\\n\\n    /// @notice deserialize DealLabel cbor to struct when receiving a message\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of DealLabel created based on parsed data\\n    function deserializeDealLabel(bytes memory rawResp) internal pure returns (CommonTypes.DealLabel memory) {\\n        uint byteIdx = 0;\\n        CommonTypes.DealLabel memory label;\\n\\n        (label, byteIdx) = readDealLabel(rawResp, byteIdx);\\n        return label;\\n    }\\n\\n    /// @notice attempt to read a DealLabel value\\n    /// @param rawResp cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a DealLabel decoded from input bytes and the byte index after moving past the value\\n    function readDealLabel(bytes memory rawResp, uint byteIdx) internal pure returns (CommonTypes.DealLabel memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = CBORDecoder.parseCborHeader(rawResp, byteIdx);\\n        require(maj == MajByteString || maj == MajTextString, \\\"invalid maj (expected MajByteString or MajTextString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = rawResp[i];\\n            slice_index++;\\n        }\\n\\n        return (CommonTypes.DealLabel(slice, maj == MajTextString), byteIdx + len);\\n    }\\n}\\n\",\"keccak256\":\"0x85ef7117554e84280fbdba42acbdc3b6da95f55bcf1b3a22283e3a533d6e5a39\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/cbor/MinerCbor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"lib/solidity-cborutils/contracts/CBOR.sol\\\";\\n\\nimport \\\"./BigIntCbor.sol\\\";\\nimport \\\"./FilecoinCbor.sol\\\";\\n\\nimport \\\"../types/MinerTypes.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\nimport \\\"../utils/CborDecode.sol\\\";\\nimport \\\"../utils/Misc.sol\\\";\\n\\n/// @title This library is a set of functions meant to handle CBOR parameters serialization and return values deserialization for Miner actor exported methods.\\n/// @author Zondax AG\\nlibrary MinerCBOR {\\n    using CBOR for CBOR.CBORBuffer;\\n    using CBORDecoder for bytes;\\n    using BigIntCBOR for *;\\n    using FilecoinCBOR for *;\\n\\n    /// @notice serialize ChangeBeneficiaryParams struct to cbor in order to pass as arguments to the miner actor\\n    /// @param params ChangeBeneficiaryParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeChangeBeneficiaryParams(MinerTypes.ChangeBeneficiaryParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n        bytes memory new_quota = params.new_quota.serializeBigInt();\\n\\n        capacity += Misc.getPrefixSize(3);\\n        capacity += Misc.getBytesSize(params.new_beneficiary.data);\\n        capacity += Misc.getBytesSize(new_quota);\\n        capacity += Misc.getChainEpochSize(params.new_expiration);\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(3);\\n        buf.writeBytes(params.new_beneficiary.data);\\n        buf.writeBytes(new_quota);\\n        buf.writeChainEpoch(params.new_expiration);\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize GetOwnerReturn struct from cbor encoded bytes coming from a miner actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetOwnerReturn created based on parsed data\\n    function deserializeGetOwnerReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetOwnerReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.owner.data, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        if (!rawResp.isNullNext(byteIdx)) {\\n            (ret.proposed.data, byteIdx) = rawResp.readBytes(byteIdx);\\n        } else {\\n            ret.proposed.data = new bytes(0);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetBeneficiaryReturn struct from cbor encoded bytes coming from a miner actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetBeneficiaryReturn created based on parsed data\\n    function deserializeGetBeneficiaryReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetBeneficiaryReturn memory ret) {\\n        bytes memory tmp;\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 2);\\n\\n        (ret.active.beneficiary.data, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 3);\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        if (tmp.length > 0) {\\n            ret.active.term.quota = tmp.deserializeBigInt();\\n        } else {\\n            ret.active.term.quota = CommonTypes.BigInt(new bytes(0), false);\\n        }\\n\\n        (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n        if (tmp.length > 0) {\\n            ret.active.term.used_quota = tmp.deserializeBigInt();\\n        } else {\\n            ret.active.term.used_quota = CommonTypes.BigInt(new bytes(0), false);\\n        }\\n\\n        (ret.active.term.expiration, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n\\n        if (!rawResp.isNullNext(byteIdx)) {\\n            (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n            assert(len == 5);\\n\\n            (ret.proposed.new_beneficiary.data, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n            (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n            if (tmp.length > 0) {\\n                ret.proposed.new_quota = tmp.deserializeBigInt();\\n            } else {\\n                ret.proposed.new_quota = CommonTypes.BigInt(new bytes(0), false);\\n            }\\n\\n            (ret.proposed.new_expiration, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n            (ret.proposed.approved_by_beneficiary, byteIdx) = rawResp.readBool(byteIdx);\\n            (ret.proposed.approved_by_nominee, byteIdx) = rawResp.readBool(byteIdx);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /// @notice deserialize GetVestingFundsReturn struct from cbor encoded bytes coming from a miner actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetVestingFundsReturn created based on parsed data\\n    function deserializeGetVestingFundsReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetVestingFundsReturn memory ret) {\\n        CommonTypes.ChainEpoch epoch;\\n        CommonTypes.BigInt memory amount;\\n        bytes memory tmp;\\n\\n        uint byteIdx = 0;\\n        uint len;\\n        uint leni;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 1);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.vesting_funds = new MinerTypes.VestingFunds[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (leni, byteIdx) = rawResp.readFixedArray(byteIdx);\\n            assert(leni == 2);\\n\\n            (epoch, byteIdx) = rawResp.readChainEpoch(byteIdx);\\n            (tmp, byteIdx) = rawResp.readBytes(byteIdx);\\n\\n            amount = tmp.deserializeBigInt();\\n            ret.vesting_funds[i] = MinerTypes.VestingFunds(epoch, amount);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /// @notice serialize ChangeWorkerAddressParams struct to cbor in order to pass as arguments to the miner actor\\n    /// @param params ChangeWorkerAddressParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeChangeWorkerAddressParams(MinerTypes.ChangeWorkerAddressParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(2);\\n        capacity += Misc.getBytesSize(params.new_worker.data);\\n        capacity += Misc.getPrefixSize(uint256(params.new_control_addresses.length));\\n        for (uint64 i = 0; i < params.new_control_addresses.length; i++) {\\n            capacity += Misc.getBytesSize(params.new_control_addresses[i].data);\\n        }\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(2);\\n        buf.writeBytes(params.new_worker.data);\\n        buf.startFixedArray(uint64(params.new_control_addresses.length));\\n\\n        for (uint64 i = 0; i < params.new_control_addresses.length; i++) {\\n            buf.writeBytes(params.new_control_addresses[i].data);\\n        }\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice serialize ChangeMultiaddrsParams struct to cbor in order to pass as arguments to the miner actor\\n    /// @param params ChangeMultiaddrsParams to serialize as cbor\\n    /// @return cbor serialized data as bytes\\n    function serializeChangeMultiaddrsParams(MinerTypes.ChangeMultiaddrsParams memory params) internal pure returns (bytes memory) {\\n        uint256 capacity = 0;\\n\\n        capacity += Misc.getPrefixSize(1);\\n        capacity += Misc.getPrefixSize(uint256(params.new_multi_addrs.length));\\n        for (uint64 i = 0; i < params.new_multi_addrs.length; i++) {\\n            capacity += Misc.getBytesSize(params.new_multi_addrs[i].data);\\n        }\\n        CBOR.CBORBuffer memory buf = CBOR.create(capacity);\\n\\n        buf.startFixedArray(1);\\n        buf.startFixedArray(uint64(params.new_multi_addrs.length));\\n\\n        for (uint64 i = 0; i < params.new_multi_addrs.length; i++) {\\n            buf.writeBytes(params.new_multi_addrs[i].data);\\n        }\\n\\n        return buf.data();\\n    }\\n\\n    /// @notice deserialize GetMultiaddrsReturn struct from cbor encoded bytes coming from a miner actor call\\n    /// @param rawResp cbor encoded response\\n    /// @return ret new instance of GetMultiaddrsReturn created based on parsed data\\n    function deserializeGetMultiaddrsReturn(bytes memory rawResp) internal pure returns (MinerTypes.GetMultiaddrsReturn memory ret) {\\n        uint byteIdx = 0;\\n        uint len;\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        assert(len == 1);\\n\\n        (len, byteIdx) = rawResp.readFixedArray(byteIdx);\\n        ret.multi_addrs = new CommonTypes.FilAddress[](len);\\n\\n        for (uint i = 0; i < len; i++) {\\n            (ret.multi_addrs[i].data, byteIdx) = rawResp.readBytes(byteIdx);\\n        }\\n\\n        return ret;\\n    }\\n}\\n\",\"keccak256\":\"0x5269ab8879ab633ae4198203eac39fa374ae8e139dbad824d154ec84bda4cbc8\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/types/CommonTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\n\\n/// @title Filecoin actors' common types for Solidity.\\n/// @author Zondax AG\\nlibrary CommonTypes {\\n    uint constant UniversalReceiverHookMethodNum = 3726118371;\\n\\n    /// @param idx index for the failure in batch\\n    /// @param code failure code\\n    struct FailCode {\\n        uint32 idx;\\n        uint32 code;\\n    }\\n\\n    /// @param success_count total successes in batch\\n    /// @param fail_codes list of failures code and index for each failure in batch\\n    struct BatchReturn {\\n        uint32 success_count;\\n        FailCode[] fail_codes;\\n    }\\n\\n    /// @param type_ asset type\\n    /// @param payload payload corresponding to asset type\\n    struct UniversalReceiverParams {\\n        uint32 type_;\\n        bytes payload;\\n    }\\n\\n    /// @param val contains the actual arbitrary number written as binary\\n    /// @param neg indicates if val is negative or not\\n    struct BigInt {\\n        bytes val;\\n        bool neg;\\n    }\\n\\n    /// @param data filecoin address in bytes format\\n    struct FilAddress {\\n        bytes data;\\n    }\\n\\n    /// @param data cid in bytes format\\n    struct Cid {\\n        bytes data;\\n    }\\n\\n    /// @param data deal proposal label in bytes format (it can be utf8 string or arbitrary bytes string).\\n    /// @param isString indicates if the data is string or raw bytes\\n    struct DealLabel {\\n        bytes data;\\n        bool isString;\\n    }\\n\\n    type FilActorId is uint64;\\n\\n    type ChainEpoch is int64;\\n}\\n\",\"keccak256\":\"0x1819b8e82cf53f0fadc446d064a380979888b97a0004f1e70c9fa1a6f4f13ed9\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/types/MinerTypes.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n//\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../cbor/BigIntCbor.sol\\\";\\nimport \\\"./CommonTypes.sol\\\";\\n\\n/// @title Filecoin miner actor types for Solidity.\\n/// @author Zondax AG\\nlibrary MinerTypes {\\n    uint constant GetOwnerMethodNum = 3275365574;\\n    uint constant ChangeOwnerAddressMethodNum = 1010589339;\\n    uint constant IsControllingAddressMethodNum = 348244887;\\n    uint constant GetSectorSizeMethodNum = 3858292296;\\n    uint constant GetAvailableBalanceMethodNum = 4026106874;\\n    uint constant GetVestingFundsMethodNum = 1726876304;\\n    uint constant ChangeBeneficiaryMethodNum = 1570634796;\\n    uint constant GetBeneficiaryMethodNum = 4158972569;\\n    uint constant ChangeWorkerAddressMethodNum = 3302309124;\\n    uint constant ChangePeerIDMethodNum = 1236548004;\\n    uint constant ChangeMultiaddrsMethodNum = 1063480576;\\n    uint constant RepayDebtMethodNum = 3665352697;\\n    uint constant ConfirmChangeWorkerAddressMethodNum = 2354970453;\\n    uint constant GetPeerIDMethodNum = 2812875329;\\n    uint constant GetMultiaddrsMethodNum = 1332909407;\\n    uint constant WithdrawBalanceMethodNum = 2280458852;\\n\\n    /// @param owner owner address.\\n    /// @param proposed owner address.\\n    struct GetOwnerReturn {\\n        CommonTypes.FilAddress owner;\\n        CommonTypes.FilAddress proposed;\\n    }\\n\\n    /// @param vesting_funds funds\\n    struct GetVestingFundsReturn {\\n        VestingFunds[] vesting_funds;\\n    }\\n\\n    /// @param new_beneficiary the new beneficiary address.\\n    /// @param new_quota the new quota token amount.\\n    /// @param new_expiration the epoch that the new quota will be expired.\\n    struct ChangeBeneficiaryParams {\\n        CommonTypes.FilAddress new_beneficiary;\\n        CommonTypes.BigInt new_quota;\\n        CommonTypes.ChainEpoch new_expiration;\\n    }\\n\\n    /// @param active current active beneficiary.\\n    /// @param proposed the proposed and pending beneficiary.\\n    struct GetBeneficiaryReturn {\\n        ActiveBeneficiary active;\\n        PendingBeneficiaryChange proposed;\\n    }\\n\\n    /// @param new_worker the new worker address.\\n    /// @param new_control_addresses the new controller addresses.\\n    struct ChangeWorkerAddressParams {\\n        CommonTypes.FilAddress new_worker;\\n        CommonTypes.FilAddress[] new_control_addresses;\\n    }\\n\\n    /// @param new_multi_addrs the new multi-signature address.\\n    struct ChangeMultiaddrsParams {\\n        CommonTypes.FilAddress[] new_multi_addrs;\\n    }\\n\\n    /// @param multi_addrs the multi-signature address.\\n    struct GetMultiaddrsReturn {\\n        CommonTypes.FilAddress[] multi_addrs;\\n    }\\n\\n    /// @param epoch the epoch of funds vested.\\n    /// @param amount the amount of funds vested.\\n    struct VestingFunds {\\n        CommonTypes.ChainEpoch epoch;\\n        CommonTypes.BigInt amount;\\n    }\\n\\n    /// @param quota the quota token amount.\\n    /// @param used_quota the used quota token amount.\\n    /// @param expiration the epoch that the quota will be expired.\\n    struct BeneficiaryTerm {\\n        CommonTypes.BigInt quota;\\n        CommonTypes.BigInt used_quota;\\n        CommonTypes.ChainEpoch expiration;\\n    }\\n\\n    /// @param beneficiary the address of the beneficiary.\\n    /// @param term BeneficiaryTerm\\n    struct ActiveBeneficiary {\\n        CommonTypes.FilAddress beneficiary;\\n        BeneficiaryTerm term;\\n    }\\n\\n    /// @param new_beneficiary the new beneficiary address.\\n    /// @param new_quota the new quota token amount.\\n    /// @param new_expiration the epoch that the new quota will be expired.\\n    /// @param approved_by_beneficiary if this proposal is approved by beneficiary or not.\\n    /// @param approved_by_nominee if this proposal is approved by nominee or not.\\n    struct PendingBeneficiaryChange {\\n        CommonTypes.FilAddress new_beneficiary;\\n        CommonTypes.BigInt new_quota;\\n        CommonTypes.ChainEpoch new_expiration;\\n        bool approved_by_beneficiary;\\n        bool approved_by_nominee;\\n    }\\n\\n    enum SectorSize {\\n        _2KiB,\\n        _8MiB,\\n        _512MiB,\\n        _32GiB,\\n        _64GiB\\n    }\\n}\\n\",\"keccak256\":\"0x6d7839a173dc3b84142cb3ea3a834148e57a89ad3d15383c26b6036461145e72\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/utils/Actor.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Misc.sol\\\";\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Call actors utilities library, meant to interact with Filecoin builtin actors\\n/// @author Zondax AG\\nlibrary Actor {\\n    /// @notice precompile address for the call_actor precompile\\n    address constant CALL_ACTOR_ADDRESS = 0xfe00000000000000000000000000000000000003;\\n\\n    /// @notice precompile address for the call_actor_id precompile\\n    address constant CALL_ACTOR_ID = 0xfe00000000000000000000000000000000000005;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a static_call to the desired actor\\n    uint64 constant READ_ONLY_FLAG = 0x00000001;\\n\\n    /// @notice flag used to indicate that the call_actor or call_actor_id should perform a call to the desired actor\\n    uint64 constant DEFAULT_FLAG = 0x00000000;\\n\\n    /// @notice the provided address is not valid\\n    error InvalidAddress(bytes addr);\\n\\n    /// @notice the smart contract has no enough balance to transfer\\n    error NotEnoughBalance(uint256 balance, uint256 value);\\n\\n    /// @notice the provided actor id is not valid\\n    error InvalidActorID(CommonTypes.FilActorId actorId);\\n\\n    /// @notice an error happened trying to call the actor\\n    error FailToCallActor();\\n\\n    /// @notice the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none.\\n    error InvalidResponseLength();\\n\\n    /// @notice the codec received is not valid\\n    error InvalidCodec(uint64);\\n\\n    /// @notice the called actor returned an error as part of its expected behaviour\\n    error ActorError(int256 errorCode);\\n\\n    /// @notice the actor is not found\\n    error ActorNotFound();\\n\\n    /// @notice allows to interact with an specific actor by its address (bytes format)\\n    /// @param actor_address actor address (bytes format) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByAddress(\\n        bytes memory actor_address,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        if (actor_address.length < 2) {\\n            revert InvalidAddress(actor_address);\\n        }\\n\\n        validatePrecompileCall(CALL_ACTOR_ADDRESS, value);\\n\\n        // We have to delegate-call the call-actor precompile because the call-actor precompile will\\n        // call the target actor on our behalf. This will _not_ delegate to the target `actor_address`.\\n        //\\n        // Specifically:\\n        //\\n        // - `static_call == false`: `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(CALL)-> actor_address\\n        // - `static_call == true`:  `CALLER (you) --(DELEGATECALL)-> CALL_ACTOR_PRECOMPILE --(STATICCALL)-> actor_address\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ADDRESS).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, actor_address)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to interact with an specific actor by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transferred to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @return payload (in bytes) with the actual response data (without codec or response code)\\n    function callByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        validatePrecompileCall(CALL_ACTOR_ID, value);\\n\\n        (bool success, bytes memory data) = address(CALL_ACTOR_ID).delegatecall(\\n            abi.encode(uint64(method_num), value, static_call ? READ_ONLY_FLAG : DEFAULT_FLAG, codec, raw_request, target)\\n        );\\n        if (!success) {\\n            revert FailToCallActor();\\n        }\\n\\n        return readRespData(data);\\n    }\\n\\n    /// @notice allows to run some generic validations before calling the precompile actor\\n    /// @param addr precompile actor address to run check to\\n    /// @param value tokens to be transferred to the called actor\\n    function validatePrecompileCall(address addr, uint256 value) internal view {\\n        uint balance = address(this).balance;\\n        if (balance < value) {\\n            revert NotEnoughBalance(balance, value);\\n        }\\n\\n        bool actorExists = Misc.addressExists(addr);\\n        if (!actorExists) {\\n            revert ActorNotFound();\\n        }\\n    }\\n\\n    /// @notice allows to interact with an non-singleton actors by its id (uint64)\\n    /// @param target actor id (uint64) to interact with\\n    /// @param method_num id of the method from the actor to call\\n    /// @param codec how the request data passed as argument is encoded\\n    /// @param raw_request encoded arguments to be passed in the call\\n    /// @param value tokens to be transfered to the called actor\\n    /// @param static_call indicates if the call will be allowed to change the actor state or not (just read the state)\\n    /// @dev it requires the id to be bigger than 99, as singleton actors are smaller than that\\n    function callNonSingletonByID(\\n        CommonTypes.FilActorId target,\\n        uint256 method_num,\\n        uint64 codec,\\n        bytes memory raw_request,\\n        uint256 value,\\n        bool static_call\\n    ) internal returns (bytes memory) {\\n        if (CommonTypes.FilActorId.unwrap(target) < 100) {\\n            revert InvalidActorID(target);\\n        }\\n\\n        return callByID(target, method_num, codec, raw_request, value, static_call);\\n    }\\n\\n    /// @notice parse the response an actor returned\\n    /// @notice it will validate the return code (success) and the codec (valid one)\\n    /// @param raw_response raw data (bytes) the actor returned\\n    /// @return the actual raw data (payload, in bytes) to be parsed according to the actor and method called\\n    function readRespData(bytes memory raw_response) internal pure returns (bytes memory) {\\n        (int256 exit, uint64 return_codec, bytes memory return_value) = abi.decode(raw_response, (int256, uint64, bytes));\\n\\n        if (return_codec == Misc.NONE_CODEC) {\\n            if (return_value.length != 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else if (return_codec == Misc.CBOR_CODEC || return_codec == Misc.DAG_CBOR_CODEC) {\\n            if (return_value.length == 0) {\\n                revert InvalidResponseLength();\\n            }\\n        } else {\\n            revert InvalidCodec(return_codec);\\n        }\\n\\n        if (exit != 0) {\\n            revert ActorError(exit);\\n        }\\n\\n        return return_value;\\n    }\\n}\\n\",\"keccak256\":\"0xa4b9eb4d84491477a3c11336a431c4f3a0796977efb92779bd062f273824c67a\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/utils/CborDecode.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\n// \\tMajUnsignedInt = 0\\n// \\tMajSignedInt   = 1\\n// \\tMajByteString  = 2\\n// \\tMajTextString  = 3\\n// \\tMajArray       = 4\\n// \\tMajMap         = 5\\n// \\tMajTag         = 6\\n// \\tMajOther       = 7\\n\\nuint8 constant MajUnsignedInt = 0;\\nuint8 constant MajSignedInt = 1;\\nuint8 constant MajByteString = 2;\\nuint8 constant MajTextString = 3;\\nuint8 constant MajArray = 4;\\nuint8 constant MajMap = 5;\\nuint8 constant MajTag = 6;\\nuint8 constant MajOther = 7;\\n\\nuint8 constant TagTypeBigNum = 2;\\nuint8 constant TagTypeNegativeBigNum = 3;\\n\\nuint8 constant True_Type = 21;\\nuint8 constant False_Type = 20;\\n\\n/// @notice This library is a set a functions that allows anyone to decode cbor encoded bytes\\n/// @dev methods in this library try to read the data type indicated from cbor encoded data stored in bytes at a specific index\\n/// @dev if it successes, methods will return the read value and the new index (intial index plus read bytes)\\n/// @author Zondax AG\\nlibrary CBORDecoder {\\n    /// @notice check if next value on the cbor encoded data is null\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    function isNullNext(bytes memory cborData, uint byteIdx) internal pure returns (bool) {\\n        return cborData[byteIdx] == hex\\\"f6\\\";\\n    }\\n\\n    /// @notice attempt to read a bool value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a bool decoded from input bytes and the byte index after moving past the value\\n    function readBool(bytes memory cborData, uint byteIdx) internal pure returns (bool, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajOther, \\\"invalid maj (expected MajOther)\\\");\\n        assert(value == True_Type || value == False_Type);\\n\\n        return (value != False_Type, byteIdx);\\n    }\\n\\n    /// @notice attempt to read the length of a fixed array\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return length of the fixed array decoded from input bytes and the byte index after moving past the value\\n    function readFixedArray(bytes memory cborData, uint byteIdx) internal pure returns (uint, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajArray, \\\"invalid maj (expected MajArray)\\\");\\n\\n        return (len, byteIdx);\\n    }\\n\\n    /// @notice attempt to read an arbitrary length string value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return arbitrary length string decoded from input bytes and the byte index after moving past the value\\n    function readString(bytes memory cborData, uint byteIdx) internal pure returns (string memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTextString, \\\"invalid maj (expected MajTextString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (string(slice), byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read an arbitrary byte string value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return arbitrary byte string decoded from input bytes and the byte index after moving past the value\\n    function readBytes(bytes memory cborData, uint byteIdx) internal pure returns (bytes memory, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajByteString, \\\"invalid maj (expected MajTag or MajByteString)\\\");\\n\\n        if (maj == MajTag) {\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            assert(maj == MajByteString);\\n        }\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(len);\\n        uint slice_index = 0;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (slice, byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read a bytes32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return a bytes32 decoded from input bytes and the byte index after moving past the value\\n    function readBytes32(bytes memory cborData, uint byteIdx) internal pure returns (bytes32, uint) {\\n        uint8 maj;\\n        uint len;\\n\\n        (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n        uint max_len = byteIdx + len;\\n        bytes memory slice = new bytes(32);\\n        uint slice_index = 32 - len;\\n        for (uint256 i = byteIdx; i < max_len; i++) {\\n            slice[slice_index] = cborData[i];\\n            slice_index++;\\n        }\\n\\n        return (bytes32(slice), byteIdx + len);\\n    }\\n\\n    /// @notice attempt to read a uint256 value encoded per cbor specification\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint256 decoded from input bytes and the byte index after moving past the value\\n    function readUInt256(bytes memory cborData, uint byteIdx) internal pure returns (uint256, uint) {\\n        uint8 maj;\\n        uint256 value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajUnsignedInt, \\\"invalid maj (expected MajTag or MajUnsignedInt)\\\");\\n\\n        if (maj == MajTag) {\\n            require(value == TagTypeBigNum, \\\"invalid tag (expected TagTypeBigNum)\\\");\\n\\n            uint len;\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n            require(cborData.length >= byteIdx + len, \\\"slicing out of range\\\");\\n            assembly {\\n                value := mload(add(cborData, add(len, byteIdx)))\\n            }\\n\\n            return (value, byteIdx + len);\\n        }\\n\\n        return (value, byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int256 value encoded per cbor specification\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int256 decoded from input bytes and the byte index after moving past the value\\n    function readInt256(bytes memory cborData, uint byteIdx) internal pure returns (int256, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajTag || maj == MajSignedInt, \\\"invalid maj (expected MajTag or MajSignedInt)\\\");\\n\\n        if (maj == MajTag) {\\n            assert(value == TagTypeNegativeBigNum);\\n\\n            uint len;\\n            (maj, len, byteIdx) = parseCborHeader(cborData, byteIdx);\\n            require(maj == MajByteString, \\\"invalid maj (expected MajByteString)\\\");\\n\\n            require(cborData.length >= byteIdx + len, \\\"slicing out of range\\\");\\n            assembly {\\n                value := mload(add(cborData, add(len, byteIdx)))\\n            }\\n\\n            return (int256(value), byteIdx + len);\\n        }\\n\\n        return (int256(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint64 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint64 decoded from input bytes and the byte index after moving past the value\\n    function readUInt64(bytes memory cborData, uint byteIdx) internal pure returns (uint64, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint64(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint32 decoded from input bytes and the byte index after moving past the value\\n    function readUInt32(bytes memory cborData, uint byteIdx) internal pure returns (uint32, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint32(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint16 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint16 decoded from input bytes and the byte index after moving past the value\\n    function readUInt16(bytes memory cborData, uint byteIdx) internal pure returns (uint16, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint16(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a uint8 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an uint8 decoded from input bytes and the byte index after moving past the value\\n    function readUInt8(bytes memory cborData, uint byteIdx) internal pure returns (uint8, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajUnsignedInt, \\\"invalid maj (expected MajUnsignedInt)\\\");\\n\\n        return (uint8(value), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int64 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int64 decoded from input bytes and the byte index after moving past the value\\n    function readInt64(bytes memory cborData, uint byteIdx) internal pure returns (int64, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int64(uint64(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int32 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int32 decoded from input bytes and the byte index after moving past the value\\n    function readInt32(bytes memory cborData, uint byteIdx) internal pure returns (int32, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int32(uint32(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int16 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int16 decoded from input bytes and the byte index after moving past the value\\n    function readInt16(bytes memory cborData, uint byteIdx) internal pure returns (int16, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int16(uint16(value)), byteIdx);\\n    }\\n\\n    /// @notice attempt to read a int8 value\\n    /// @param cborData cbor encoded bytes to parse from\\n    /// @param byteIdx current position to read on the cbor encoded bytes\\n    /// @return an int8 decoded from input bytes and the byte index after moving past the value\\n    function readInt8(bytes memory cborData, uint byteIdx) internal pure returns (int8, uint) {\\n        uint8 maj;\\n        uint value;\\n\\n        (maj, value, byteIdx) = parseCborHeader(cborData, byteIdx);\\n        require(maj == MajSignedInt || maj == MajUnsignedInt, \\\"invalid maj (expected MajSignedInt or MajUnsignedInt)\\\");\\n\\n        return (int8(uint8(value)), byteIdx);\\n    }\\n\\n    /// @notice slice uint8 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint8 sliced from bytes\\n    function sliceUInt8(bytes memory bs, uint start) internal pure returns (uint8) {\\n        require(bs.length >= start + 1, \\\"slicing out of range\\\");\\n        return uint8(bs[start]);\\n    }\\n\\n    /// @notice slice uint16 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint16 sliced from bytes\\n    function sliceUInt16(bytes memory bs, uint start) internal pure returns (uint16) {\\n        require(bs.length >= start + 2, \\\"slicing out of range\\\");\\n        bytes2 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint16(x);\\n    }\\n\\n    /// @notice slice uint32 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint32 sliced from bytes\\n    function sliceUInt32(bytes memory bs, uint start) internal pure returns (uint32) {\\n        require(bs.length >= start + 4, \\\"slicing out of range\\\");\\n        bytes4 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint32(x);\\n    }\\n\\n    /// @notice slice uint64 from bytes starting at a given index\\n    /// @param bs bytes to slice from\\n    /// @param start current position to slice from bytes\\n    /// @return uint64 sliced from bytes\\n    function sliceUInt64(bytes memory bs, uint start) internal pure returns (uint64) {\\n        require(bs.length >= start + 8, \\\"slicing out of range\\\");\\n        bytes8 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return uint64(x);\\n    }\\n\\n    /// @notice Parse cbor header for major type and extra info.\\n    /// @param cbor cbor encoded bytes to parse from\\n    /// @param byteIndex current position to read on the cbor encoded bytes\\n    /// @return major type, extra info and the byte index after moving past header bytes\\n    function parseCborHeader(bytes memory cbor, uint byteIndex) internal pure returns (uint8, uint64, uint) {\\n        uint8 first = sliceUInt8(cbor, byteIndex);\\n        byteIndex += 1;\\n        uint8 maj = (first & 0xe0) >> 5;\\n        uint8 low = first & 0x1f;\\n        // We don't handle CBOR headers with extra > 27, i.e. no indefinite lengths\\n        require(low < 28, \\\"cannot handle headers with extra > 27\\\");\\n\\n        // extra is lower bits\\n        if (low < 24) {\\n            return (maj, low, byteIndex);\\n        }\\n\\n        // extra in next byte\\n        if (low == 24) {\\n            uint8 next = sliceUInt8(cbor, byteIndex);\\n            byteIndex += 1;\\n            require(next >= 24, \\\"invalid cbor\\\"); // otherwise this is invalid cbor\\n            return (maj, next, byteIndex);\\n        }\\n\\n        // extra in next 2 bytes\\n        if (low == 25) {\\n            uint16 extra16 = sliceUInt16(cbor, byteIndex);\\n            byteIndex += 2;\\n            return (maj, extra16, byteIndex);\\n        }\\n\\n        // extra in next 4 bytes\\n        if (low == 26) {\\n            uint32 extra32 = sliceUInt32(cbor, byteIndex);\\n            byteIndex += 4;\\n            return (maj, extra32, byteIndex);\\n        }\\n\\n        // extra in next 8 bytes\\n        assert(low == 27);\\n        uint64 extra64 = sliceUInt64(cbor, byteIndex);\\n        byteIndex += 8;\\n        return (maj, extra64, byteIndex);\\n    }\\n}\\n\",\"keccak256\":\"0x3babe3c71558c21f0bef9de09088c42b8b148d16d856f84a350b9c43b4da6018\",\"license\":\"Apache-2.0\"},\"lib/filecoin-solidity/contracts/v0.8/utils/Misc.sol\":{\"content\":\"/*******************************************************************************\\n *   (c) 2022 Zondax AG\\n *\\n *  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *  you may not use this file except in compliance with the License.\\n *  You may obtain a copy of the License at\\n *\\n *      http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *  Unless required by applicable law or agreed to in writing, software\\n *  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *  See the License for the specific language governing permissions and\\n *  limitations under the License.\\n ********************************************************************************/\\n// THIS CODE WAS SECURITY REVIEWED BY KUDELSKI SECURITY, BUT NOT FORMALLY AUDITED\\n\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../types/CommonTypes.sol\\\";\\n\\n/// @title Library containing miscellaneous functions used on the project\\n/// @author Zondax AG\\nlibrary Misc {\\n    uint64 constant DAG_CBOR_CODEC = 0x71;\\n    uint64 constant CBOR_CODEC = 0x51;\\n    uint64 constant NONE_CODEC = 0x00;\\n\\n    // Code taken from Openzeppelin repo\\n    // Link: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0320a718e8e07b1d932f5acb8ad9cec9d9eed99b/contracts/utils/math/SignedMath.sol#L37-L42\\n    /// @notice get the abs from a signed number\\n    /// @param n number to get abs from\\n    /// @return unsigned number\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n\\n    /// @notice validate if an address exists or not\\n    /// @dev read this article for more information https://blog.finxter.com/how-to-find-out-if-an-ethereum-address-is-a-contract/\\n    /// @param addr address to check\\n    /// @return whether the address exists or not\\n    function addressExists(address addr) internal view returns (bool) {\\n        bytes32 codehash;\\n        assembly {\\n            codehash := extcodehash(addr)\\n        }\\n        return codehash != 0x0;\\n    }\\n\\n    /// Returns the data size required by CBOR.writeFixedNumeric\\n    function getPrefixSize(uint256 data_size) internal pure returns (uint256) {\\n        if (data_size <= 23) {\\n            return 1;\\n        } else if (data_size <= 0xFF) {\\n            return 2;\\n        } else if (data_size <= 0xFFFF) {\\n            return 3;\\n        } else if (data_size <= 0xFFFFFFFF) {\\n            return 5;\\n        }\\n        return 9;\\n    }\\n\\n    function getBytesSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(value.length) + value.length;\\n    }\\n\\n    function getCidSize(bytes memory value) internal pure returns (uint256) {\\n        return getPrefixSize(2) + value.length;\\n    }\\n\\n    function getFilActorIdSize(CommonTypes.FilActorId value) internal pure returns (uint256) {\\n        uint64 val = CommonTypes.FilActorId.unwrap(value);\\n        return getPrefixSize(uint256(val));\\n    }\\n\\n    function getChainEpochSize(CommonTypes.ChainEpoch value) internal pure returns (uint256) {\\n        int64 val = CommonTypes.ChainEpoch.unwrap(value);\\n        if (val >= 0) {\\n            return getPrefixSize(uint256(uint64(val)));\\n        } else {\\n            return getPrefixSize(uint256(uint64(-1 - val)));\\n        }\\n    }\\n\\n    function getBoolSize() internal pure returns (uint256) {\\n        return getPrefixSize(1);\\n    }\\n}\\n\",\"keccak256\":\"0x97b02c3ab9cb11169b0b1a143b513017c6bf0f2cba2fc4f81a77345b5dfe96b4\",\"license\":\"Apache-2.0\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb8d68221343ed784c7b76edb6a686cb65e49c476d9e22bb89a5c0c3947ff14db\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1599637b52d20dc3954cea44914b2a4a9a8a5caade58d9da947e0b6c9acc07ba\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"lib/solidity-cborutils/contracts/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"lib/buffer/contracts/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xd140f221969768eafa77bcb25e99513cceb99e591d492d076ac5afb9092fb928\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptBeneficiaryAddress(uint64)": {
        "details": "Only triggered by registry admin",
        "params": {
          "_ownerId": "Storage Provider owner ID"
        }
      },
      "deactivateStorageProvider(uint64)": {
        "details": "Only triggered by registry admin",
        "params": {
          "_ownerId": "Storage Provider owner ID"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increasePledgeRepayment(uint64,uint256)": {
        "params": {
          "_ownerId": "Storage Provider owner ID",
          "_repaidPledge": "Withdrawn initial pledge after sector termination"
        }
      },
      "increaseRewards(uint64,uint256)": {
        "params": {
          "_accuredRewards": "Withdrawn rewards from SP's miner actor",
          "_ownerId": "Storage Provider owner ID"
        }
      },
      "increaseUsedAllocation(uint64,uint256,uint256)": {
        "params": {
          "_allocated": "FIL amount that is going to be pledged for Storage Provider",
          "_ownerId": "Storage Provider owner ID",
          "_timestamp": "Transaction timestamp"
        }
      },
      "initialize(uint256)": {
        "details": "Contract initializer function.",
        "params": {
          "_maxAllocation": "Number of maximum FIL allocated to a single storage provider"
        }
      },
      "onboardStorageProvider(uint64,uint256,uint256,uint256,int64)": {
        "details": "Only triggered by registry admin",
        "params": {
          "_allocationLimit": "FIL allocation for storage provider",
          "_dailyAllocation": "Daily FIL allocation for storage provider",
          "_lastEpoch": "Last epoch for FIL allocation utilization",
          "_minerId": "Storage Provider miner ID in Filecoin network",
          "_repayment": "FIL repayment for storage provider"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "register(uint64,address,uint256,uint256)": {
        "details": "Only triggered by Storage Provider owner",
        "params": {
          "_allocationLimit": "FIL allocation for storage provider",
          "_dailyAllocation": "Daily FIL allocation for storage provider",
          "_minerId": "Storage Provider miner ID in Filecoin network",
          "_targetPool": "Target liquid staking strategy"
        }
      },
      "registerPool(address)": {
        "details": "Only triggered by registry admin",
        "params": {
          "_pool": "Address of pool smart contract"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "requestAllocationLimitUpdate(uint256,uint256)": {
        "details": "Only triggered by Storage Provider owner",
        "params": {
          "_allocationLimit": "New FIL allocation for storage provider",
          "_dailyAllocation": "New daily FIL allocation for storage provider"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setCollateralAddress(address)": {
        "details": "Only triggered by registry admin",
        "params": {
          "_collateral": "StorageProviderCollateral smart contract address"
        }
      },
      "setMinerAddress(uint64,uint64)": {
        "details": "Only triggered by registry admin",
        "params": {
          "_minerId": "Storage Provider new miner ID",
          "_ownerId": "Storage Provider owner ID"
        }
      },
      "setRestaking(uint256,address)": {
        "details": "Only triggered by Storage Provider",
        "params": {
          "_restakingAddress": "Restaking address (f4 address) for Storage Provider",
          "_restakingRatio": "Restaking ratio for Storage Provider"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateAllocationLimit(uint64,uint256,uint256,uint256)": {
        "details": "Only triggered by registry admin",
        "params": {
          "_allocationLimit": "New FIL allocation for storage provider",
          "_dailyAllocation": "New daily FIL allocation for storage provider",
          "_ownerId": "Storage provider owner ID",
          "_repaymentAmount": "New FIL repayment amount for storage provider"
        }
      },
      "updateMaxAllocation(uint256)": {
        "params": {
          "allocation": "New max allocation per SP"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "Storage Provider Registry contract allows storage providers to register in liquid staking protocol and ask for a FIL allocation. Once Storage Provider is registered and signaled their desired FIL allocation it needs to transfer",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ActorError(int256)": [
        {
          "notice": "the called actor returned an error as part of its expected behaviour"
        }
      ],
      "ActorNotFound()": [
        {
          "notice": "the actor is not found"
        }
      ],
      "FailToCallActor()": [
        {
          "notice": "an error happened trying to call the actor"
        },
        {
          "notice": "an error happened trying to call the actor"
        }
      ],
      "InvalidActorID(uint64)": [
        {
          "notice": "the provided actor id is not valid"
        }
      ],
      "InvalidCodec(uint64)": [
        {
          "notice": "the codec received is not valid"
        }
      ],
      "InvalidResponseLength()": [
        {
          "notice": "the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none."
        }
      ],
      "NotEnoughBalance(uint256,uint256)": [
        {
          "notice": "the smart contract has no enough balance to transfer"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "acceptBeneficiaryAddress(uint64)": {
        "notice": "Accept beneficiary address transfer and activate FIL allocation"
      },
      "allocations(uint64)": {
        "notice": "Return allocation information for a storage provider"
      },
      "changeBeneficiaryAddress()": {
        "notice": "Transfer beneficiary address of a miner to the target pool"
      },
      "deactivateStorageProvider(uint64)": {
        "notice": "Deactive storage provider with ID `_ownerId`"
      },
      "getStorageProvider(uint64)": {
        "notice": "Return Storage Provider information with `_ownerId`"
      },
      "increasePledgeRepayment(uint64,uint256)": {
        "notice": "Increase repaid pledge by Storage Provider"
      },
      "increaseRewards(uint64,uint256)": {
        "notice": "Increase collected rewards by Storage Provider"
      },
      "increaseUsedAllocation(uint64,uint256,uint256)": {
        "notice": "Increase used allocation for Storage Provider"
      },
      "isActivePool(address)": {
        "notice": "Return a boolean flag whether `_pool` is active or not"
      },
      "isActiveProvider(uint64)": {
        "notice": "Return a boolean flag of Storage Provider activity"
      },
      "onboardStorageProvider(uint64,uint256,uint256,uint256,int64)": {
        "notice": "Onboard storage provider with `_minerId`, desired `_allocationLimit`, `_repayment` amount"
      },
      "register(uint64,address,uint256,uint256)": {
        "notice": "Register storage provider with `_minerId`, desired `_allocationLimit` and `_targetPool`"
      },
      "registerPool(address)": {
        "notice": "Register new liquid staking pool"
      },
      "requestAllocationLimitUpdate(uint256,uint256)": {
        "notice": "Request storage provider's FIL allocation update with `_allocationLimit`"
      },
      "restakings(uint64)": {
        "notice": "Return a restaking information for a storage provider"
      },
      "setCollateralAddress(address)": {
        "notice": "Update StorageProviderCollateral smart contract"
      },
      "setMinerAddress(uint64,uint64)": {
        "notice": "Update storage provider miner ID with `_minerId`"
      },
      "setRestaking(uint256,address)": {
        "notice": "Update storage provider's restaking ratio"
      },
      "updateAllocationLimit(uint64,uint256,uint256,uint256)": {
        "notice": "Update storage provider FIL allocation with `_allocationLimit`"
      },
      "updateMaxAllocation(uint256)": {
        "notice": "Updates maximum allocation amount for SP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14033,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 14036,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16467,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16746,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13093,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)13088_storage)"
      },
      {
        "astId": 13388,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14345,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 14403,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14015,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14330,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3434,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "storageProviders",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_uint64,t_struct(StorageProvider)6165_storage)"
      },
      {
        "astId": 3439,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "allocations",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_uint64,t_struct(SPAllocation)6178_storage)"
      },
      {
        "astId": 3444,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "restakings",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_uint64,t_struct(SPRestaking)6183_storage)"
      },
      {
        "astId": 3449,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "allocationRequests",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_uint64,t_struct(AllocationRequest)6188_storage)"
      },
      {
        "astId": 3453,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "sectorSizes",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_uint64,t_uint64)"
      },
      {
        "astId": 3457,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "dailyUsages",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3461,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "pools",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3468,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "maxAllocation",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 3471,
        "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
        "label": "collateral",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(IStorageProviderCollateralClient)5386"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IStorageProviderCollateralClient)5386": {
        "encoding": "inplace",
        "label": "contract IStorageProviderCollateralClient",
        "numberOfBytes": "20"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)13088_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)13088_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_struct(AllocationRequest)6188_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct StorageProviderTypes.AllocationRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(AllocationRequest)6188_storage"
      },
      "t_mapping(t_uint64,t_struct(SPAllocation)6178_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct StorageProviderTypes.SPAllocation)",
        "numberOfBytes": "32",
        "value": "t_struct(SPAllocation)6178_storage"
      },
      "t_mapping(t_uint64,t_struct(SPRestaking)6183_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct StorageProviderTypes.SPRestaking)",
        "numberOfBytes": "32",
        "value": "t_struct(SPRestaking)6183_storage"
      },
      "t_mapping(t_uint64,t_struct(StorageProvider)6165_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct StorageProviderTypes.StorageProvider)",
        "numberOfBytes": "32",
        "value": "t_struct(StorageProvider)6165_storage"
      },
      "t_mapping(t_uint64,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_struct(AllocationRequest)6188_storage": {
        "encoding": "inplace",
        "label": "struct StorageProviderTypes.AllocationRequest",
        "members": [
          {
            "astId": 6185,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "allocationLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6187,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "dailyAllocation",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)13088_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 13085,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 13087,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SPAllocation)6178_storage": {
        "encoding": "inplace",
        "label": "struct StorageProviderTypes.SPAllocation",
        "members": [
          {
            "astId": 6167,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "allocationLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6169,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "repayment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6171,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "usedAllocation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6173,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "dailyAllocation",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6175,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "accruedRewards",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6177,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "repaidPledge",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(SPRestaking)6183_storage": {
        "encoding": "inplace",
        "label": "struct StorageProviderTypes.SPRestaking",
        "members": [
          {
            "astId": 6180,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "restakingRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6182,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "restakingAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StorageProvider)6165_storage": {
        "encoding": "inplace",
        "label": "struct StorageProviderTypes.StorageProvider",
        "members": [
          {
            "astId": 6156,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6158,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "onboarded",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6160,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "targetPool",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6162,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "minerId",
            "offset": 22,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6164,
            "contract": "contracts/StorageProviderRegistry.sol:StorageProviderRegistry",
            "label": "lastEpoch",
            "offset": 0,
            "slot": "1",
            "type": "t_int64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}